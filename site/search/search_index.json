{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aktuelle Trends der IKT \u00b6 Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT ! Grober Inhalt \u00b6 Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) Aufgabe (Stand) Abgabe \u00dcbung bis 1. 04.-08.04.2022 Einf\u00fchrung und Organisatorisches - - 2. 11.-15.04.2022 Grundger\u00fcst und Application Manifest - 30.04.2022 3. 18.-22.04.2022 Service workers - 07.05.2022 4. 25.-29.04.2022 Promises und Fetch API - 14.05.2022 5. 02.-06.05.2022 Service workers und Caching - 21.05.2022 6. 09.-13.05.2022 MongoDB und Backend - 28.05.2022 7. 16.-20.05.2022 Bilder-Up- und Download (Backend) - 04.06.2022 8. 23.-27.05.2022 IndexedDB - 11.06.2022 9. 30.-03.06.2022 Kamera - 18.06.2022 10. 06.-10.06.2022 Geolocation Datenbank - 11. 13.-17.06.2022 Hintergrundsynchronisation Backend - 12. 20.-24.06.2022 Push-Notifikationen Backend - 13. 27.-01.07.2022 Wiederholung Frontend - 14. 04.-08.07.2022 Wiederholung Frontend - Abgabe 1.PZ 25.07.2022 - Abgabe 2.PZ 26.09.2022 - Organisatorisches \u00b6 Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie am Ende des Semesters die L\u00f6sung Ihrer Semesteraufgabe abgeben. Diese Aufgabe zusammen mit einem Gespr\u00e4ch, das wir \u00fcber Ihre L\u00f6sung f\u00fchren, wird bewertet. Die Bewertung entspricht dann der Modulnote. Die \u00dcbungen sind daf\u00fcr vorgesehen, dass Sie im Semester sukzessive Ihre L\u00f6sung erstellen k\u00f6nnen. Wir beantworten in den \u00dcbungen Ihre Fragen und l\u00f6sen gemeinsam Probleme. Jede Woche gibt es ein Thema, das Sie selbst\u00e4ndig durcharbeiten und dann angepasst in Ihre L\u00f6sung integrieren k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt! Inhalte \u00b6 Hier sind die Videos aus 2021 verlinkt!!! (auf Wunsch) Der aktuelle Stoff ist aber teilweise abge\u00e4ndert und angepasst! Insbesondere werden wir 2022 MongoDB als Datenbank verwenden und nicht PostgresQL. Au\u00dferdem haben sich wieder einige APIs seit 2021 ge\u00e4ndert. Woche 1 (Grundger\u00fcst) \u00b6 Woche 1 - Grundger\u00fcst Woche 2 (Manifest) \u00b6 Woche 2 - Manifest Diese Woche wird unsere App mithilfe des Application Manifest installierbar . Dazu gibt es folgendes Video: Woche 3 (Promises und Fetch API) \u00b6 Woche 3 - Promises und Fetch API Diese Woche betrachten wir den Lebenszyklus eines Service Workers, schauen uns Promises und die Fetch API an. Dazu dieses Video: Sourcecode zur Vorlesung am 05.05.2021 (also alt!!!) hier zum Herunterladen Woche 4 (Caching) \u00b6 Woche 4 - Caching Diese Woche wird die App mithilfe von Caching auch offline nutzbar. Video zur Vorlesung am 12.05.2021 Sourcecode zur Vorlesung am 12.05.2021 (also alt!!!) hier zum Herunterladen Woche 5 (MongoDB und Backend) \u00b6 Woche 5 - MongoDB und Backend Diese Woche erstellen wir mithilfe von Node.js ein Backend . Dieses realisiert eine REST-API, die alle CRUD-Funktionalit\u00e4ten f\u00fcr unsere Posts auf einer MongoDB zur Verf\u00fcgung stellt. Woche 6 (Bilder-Up- und Download im Backend) \u00b6 Woche 6 - Bilder-Up- und Download im Backend Diese Woche erweitern wir mithilfe von Multer und GridFS unser Backend - Erweiterung um das Speichern von Bildern , um den Up- und Download von Bildern zu erm\u00f6glichen. Woche 7 (IndexedDB) \u00b6 Woche 7 - IndexedDB Diese Woche arbeiten wir am Frontend weiter. Wir binden das Backend an und speichern die Posts-Datens\u00e4tze in der Browser-Built-In-Datenbank IndexedDB . Woche 8 (Kamera) \u00b6 Woche 8 - Kamera Diese Woche nutzen wir die MediaDevices-API, um mithilfe der Kamera Fotos aufzunehmen, die Teil eines jeden Posts sind. Diese Fotos werden an das Backend \u00fcbermittelt. Woche 9 (Geolocation-API) \u00b6 Woche 9 - Geolocation-API Diese Woche nutzen wir die Geolocation-API, um den eigenen Standort zu ermitteln. Dieser Standort wird verwendet, um die entsprechenden Adressinformationen als Lokation in unsere Posts einzutragen. Au\u00dferdem zeigen wir auf einer Landkarte diesen Standort an. Woche 10 (Hintergrundsynchronisation) \u00b6 Woche 10 - Hintergrundsynchronisation Diese Woche wird der Post, den wir in das Formular eingeben, nicht direkt an das Backend gesendet, sondern zun\u00e4chst in der IndexedDB abgelegt. Dort bleibt er solange, bis das Backend erreichbar ist. Dazu wird die SyncManager-API verwendet. Beim Service Worker wird eine Sync Task registriert. Diese wird ausgel\u00f6st, sobald die Anwendung online ist. Video aus der Vorlesung: Semesteraufgabe \u00b6 Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein (wenn nicht, dann mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und/oder deployed, kann es auch eine 1,0 werden. Bitte erstellen Sie eine aussagekr\u00e4ftige README.md -Datei. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Home"},{"location":"#aktuelle-trends-der-ikt","text":"Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT !","title":"Aktuelle Trends der IKT"},{"location":"#grober-inhalt","text":"Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) Aufgabe (Stand) Abgabe \u00dcbung bis 1. 04.-08.04.2022 Einf\u00fchrung und Organisatorisches - - 2. 11.-15.04.2022 Grundger\u00fcst und Application Manifest - 30.04.2022 3. 18.-22.04.2022 Service workers - 07.05.2022 4. 25.-29.04.2022 Promises und Fetch API - 14.05.2022 5. 02.-06.05.2022 Service workers und Caching - 21.05.2022 6. 09.-13.05.2022 MongoDB und Backend - 28.05.2022 7. 16.-20.05.2022 Bilder-Up- und Download (Backend) - 04.06.2022 8. 23.-27.05.2022 IndexedDB - 11.06.2022 9. 30.-03.06.2022 Kamera - 18.06.2022 10. 06.-10.06.2022 Geolocation Datenbank - 11. 13.-17.06.2022 Hintergrundsynchronisation Backend - 12. 20.-24.06.2022 Push-Notifikationen Backend - 13. 27.-01.07.2022 Wiederholung Frontend - 14. 04.-08.07.2022 Wiederholung Frontend - Abgabe 1.PZ 25.07.2022 - Abgabe 2.PZ 26.09.2022 -","title":"Grober Inhalt"},{"location":"#organisatorisches","text":"Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie am Ende des Semesters die L\u00f6sung Ihrer Semesteraufgabe abgeben. Diese Aufgabe zusammen mit einem Gespr\u00e4ch, das wir \u00fcber Ihre L\u00f6sung f\u00fchren, wird bewertet. Die Bewertung entspricht dann der Modulnote. Die \u00dcbungen sind daf\u00fcr vorgesehen, dass Sie im Semester sukzessive Ihre L\u00f6sung erstellen k\u00f6nnen. Wir beantworten in den \u00dcbungen Ihre Fragen und l\u00f6sen gemeinsam Probleme. Jede Woche gibt es ein Thema, das Sie selbst\u00e4ndig durcharbeiten und dann angepasst in Ihre L\u00f6sung integrieren k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!","title":"Organisatorisches"},{"location":"#inhalte","text":"Hier sind die Videos aus 2021 verlinkt!!! (auf Wunsch) Der aktuelle Stoff ist aber teilweise abge\u00e4ndert und angepasst! Insbesondere werden wir 2022 MongoDB als Datenbank verwenden und nicht PostgresQL. Au\u00dferdem haben sich wieder einige APIs seit 2021 ge\u00e4ndert.","title":"Inhalte"},{"location":"#woche-1-grundgerust","text":"Woche 1 - Grundger\u00fcst","title":"Woche 1 (Grundger\u00fcst)"},{"location":"#woche-2-manifest","text":"Woche 2 - Manifest Diese Woche wird unsere App mithilfe des Application Manifest installierbar . Dazu gibt es folgendes Video:","title":"Woche 2 (Manifest)"},{"location":"#woche-3-promises-und-fetch-api","text":"Woche 3 - Promises und Fetch API Diese Woche betrachten wir den Lebenszyklus eines Service Workers, schauen uns Promises und die Fetch API an. Dazu dieses Video: Sourcecode zur Vorlesung am 05.05.2021 (also alt!!!) hier zum Herunterladen","title":"Woche 3 (Promises und Fetch API)"},{"location":"#woche-4-caching","text":"Woche 4 - Caching Diese Woche wird die App mithilfe von Caching auch offline nutzbar. Video zur Vorlesung am 12.05.2021 Sourcecode zur Vorlesung am 12.05.2021 (also alt!!!) hier zum Herunterladen","title":"Woche 4 (Caching)"},{"location":"#woche-5-mongodb-und-backend","text":"Woche 5 - MongoDB und Backend Diese Woche erstellen wir mithilfe von Node.js ein Backend . Dieses realisiert eine REST-API, die alle CRUD-Funktionalit\u00e4ten f\u00fcr unsere Posts auf einer MongoDB zur Verf\u00fcgung stellt.","title":"Woche 5 (MongoDB und Backend)"},{"location":"#woche-6-bilder-up-und-download-im-backend","text":"Woche 6 - Bilder-Up- und Download im Backend Diese Woche erweitern wir mithilfe von Multer und GridFS unser Backend - Erweiterung um das Speichern von Bildern , um den Up- und Download von Bildern zu erm\u00f6glichen.","title":"Woche 6 (Bilder-Up- und Download im Backend)"},{"location":"#woche-7-indexeddb","text":"Woche 7 - IndexedDB Diese Woche arbeiten wir am Frontend weiter. Wir binden das Backend an und speichern die Posts-Datens\u00e4tze in der Browser-Built-In-Datenbank IndexedDB .","title":"Woche 7 (IndexedDB)"},{"location":"#woche-8-kamera","text":"Woche 8 - Kamera Diese Woche nutzen wir die MediaDevices-API, um mithilfe der Kamera Fotos aufzunehmen, die Teil eines jeden Posts sind. Diese Fotos werden an das Backend \u00fcbermittelt.","title":"Woche 8 (Kamera)"},{"location":"#woche-9-geolocation-api","text":"Woche 9 - Geolocation-API Diese Woche nutzen wir die Geolocation-API, um den eigenen Standort zu ermitteln. Dieser Standort wird verwendet, um die entsprechenden Adressinformationen als Lokation in unsere Posts einzutragen. Au\u00dferdem zeigen wir auf einer Landkarte diesen Standort an.","title":"Woche 9 (Geolocation-API)"},{"location":"#woche-10-hintergrundsynchronisation","text":"Woche 10 - Hintergrundsynchronisation Diese Woche wird der Post, den wir in das Formular eingeben, nicht direkt an das Backend gesendet, sondern zun\u00e4chst in der IndexedDB abgelegt. Dort bleibt er solange, bis das Backend erreichbar ist. Dazu wird die SyncManager-API verwendet. Beim Service Worker wird eine Sync Task registriert. Diese wird ausgel\u00f6st, sobald die Anwendung online ist. Video aus der Vorlesung:","title":"Woche 10 (Hintergrundsynchronisation)"},{"location":"#semesteraufgabe","text":"Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein (wenn nicht, dann mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und/oder deployed, kann es auch eine 1,0 werden. Bitte erstellen Sie eine aussagekr\u00e4ftige README.md -Datei. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Semesteraufgabe"},{"location":"backend/","text":"Backend - REST-Server \u00b6 Ehe wir uns der IndexedDB-API zuwenden, erstellen wir zun\u00e4chst eine \"richtige\" Datenbank f\u00fcr unsere Posts. F\u00fcr diese Datenbank stellen wir die Implementierung einer Schnittstelle bereit, so dass wir die wesentlichen Datenbankanfragen dar\u00fcber ausf\u00fchren k\u00f6nnen. Diese wesentlichen Datenbankfragen werden mit CRUD abgek\u00fcrzt, f\u00fcr C reate, R ead, U pdate und D elete. Das bedeutet, wir implementieren Funktionalit\u00e4ten, mit denen wir einen neuen post in die Datenbank einf\u00fcgen ( create ), aus der Datenbank auslesen ( read ), in der Datenbank aktualisieren ( update ) und aus der Datenbank l\u00f6schen ( delete ) k\u00f6nnen. Die Schnittstelle, die wir implementieren, ist eine sogenannte REST-API . REST steht f\u00fcr Representational State Transfer und basiert auf einigen wenigen Prinzipien: Alles wird als eine Ressource betrachtet, z.B. post . Jede Ressource ist durch URIs ( Uniform Resource Identifiers ) eindeutig identifizierbar, z.B. http://localhost/posts . Es werden die Standard-HTTP-Methoden verwendet, also GET , POST , PUT , UPDATE . Ressourcen k\u00f6nnen in verschiedenen Formaten vorliegen, z.B. in HTML , XML , JSON , ... Die Kommunikation ist zustandslos . Jede einzelne HTTP-Anfrage wird komplett isoliert bearbeitet. Es gibt keinerlei Anfragehistorie. Das bedeutet, wir erstellen ein Backend (einen REST-Server), an den HTTP-Anfragen mit der eindeutig identifizierbaren Ressource gestellt werden. Das Backend erstellt daraus die entsprechende SQL-Query. Das Resultat der Datenbankanfrage wird im JSON - oder HTML - oder XML - oder in einem anderen Format bereitsgestellt. Prinzipiell gibt es also ein Mapping von HTTP-Anfragen auf SQL-Anfragen: CRUD SQL MongoDB HTTP create INSERT insertOne(), insertMany() POST read SELECT findOne(), find() GET update UPDATE updateOne(), updateMany() PUT (oder PATCH) delete DELETE deleteOne(), deleteMany() DELETE Zur Unterscheidung zwischen PUT und PATCH siehe z.B. hier oder hier . Wir wollen uns ein Backend erstellen, \u00fcber das wir unsere Daten verwalten. Dazu \u00fcberlegen wir uns zun\u00e4chst ein paar sogenannte Endpunkte (siehe Prinzipien von REST oben) und die Zugriffsmethoden, mit denen wir auf unsere Daten zugreifen wollen. Methode URL Bedeutung GET /posts hole alle Datens\u00e4tze GET /posts/11 hole den Datensatz mit der id=11 POST /posts f\u00fcge einen neuen Datensatz hinzu PUT /posts/11 \u00e4ndere den Datensatz mit der id=11 DELETE /posts/11 l\u00f6sche den Datensatz mit der id=11 Der Wert der id ist nat\u00fcrlich nur ein Beispiel. Es soll f\u00fcr alle id -Werte funktionieren, die in unserem Datensatz enthalten sind. Korrekterweise beschreiben wir die Endpunkte mit variabler id besser durch /posts/:id oder /posts/{id} . Ein Node.js-Projekt mit Express \u00b6 Wir starten damit, uns ein node.js -Projekt zu erstellen. Dazu erstellen wir uns zun\u00e4chst einen Ordner backend , wechseln in diesen Ordner und f\u00fchren dann npm init aus: mkdir backend cd backend npm init Sie werden ein paar Sachen gefragt. Im Prinzip k\u00f6nnen Sie immer Enter dr\u00fccken, au\u00dfer beim entry point . Dort k\u00f6nnen Sie gleich server.js eingeben. Sie k\u00f6nnen das aber auch noch sp\u00e4ter in der package.json \u00e4ndern. This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See ` npm help init ` for definitive documentation on these fields and exactly what they do . Use ` npm install <pkg> ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: ( backend ) version: ( 1 .0.0 ) description: Backend REST-API entry point: ( index.js ) server.js test command: git repository: keywords: rest api backend mongodb author: J. Freiheit license: ( ISC ) About to write to /Users/jornfreiheit/Sites/IKT22/05_Backend/00_skript/backend/package.json: { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" } , \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ] , \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" } Is this OK? ( yes ) Die package.json wurde erstellt. Nun ben\u00f6tigen wir noch das Modul Express . Express bietet uns eine unkomplizierte Middleware f\u00fcr die Weiterverwaltung von http -Anfragen an die Datenbank und zur\u00fcck. npm install express --save Die Option --save muss eigentlich nicht mehr angegeben werden, aber unter Express steht es noch so. Sie erhalten eine Meldung in der Form: % npm install express --save added 57 packages, and audited 58 packages in 887ms 7 packages are looking for funding run ` npm fund ` for details found 0 vulnerabilities In der package.json wurde die entsprechende Abh\u00e4ngigkeit eingetragen: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" } } server.js erstellen und implementieren \u00b6 \u00d6ffnen Sie nun das backend -Projekt in Ihrer IDE und erstellen Sie sich dort eine Datei server.js mit folgendem Inhalt: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const express = require ( 'express' ); const routes = require ( './routes' ); const app = express (); const PORT = 3000 ; app . use ( express . json ()); app . use ( '/' , routes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }); Das bedeutet, wir importieren express (Zeile 1 ), erzeugen uns davon ein Objekt und speichern dieses in der Variablen app (Zeile 4 ). Wir legen in einer Konstanten PORT die Portnummer 3000 fest (Zeile 5 - die Portnummer k\u00f6nnen Sie w\u00e4hlen). Das backend ist somit unter http://localhost:3000 verf\u00fcgbar. Das eigentliche Starten des Webservers erfolgt in den Zeilen 10-16 durch Aufruf der listen() -Funktion von express . Die Syntax der listen() -Funktion ist generell wie folgt: app.listen ([ port [ , host [ , backlog ]]][ , callback ]) Wir \u00fcbergeben als ersten Parameter die PORT -Nummer ( 3000 ) und als zweiten Parameter eine (anonyme) Funktion als sogenannten callback . Callbacks sind hier n\u00e4her erl\u00e4utert. Die anonyme Funktion wird durch die listen() -Funktion aufgerufen. Sollte ein Fehler aufgetreten sein (z.B. wenn der Port bereits belegt ist), wird der anonymen Funktion ein error -Objekt \u00fcbergeben. Ist das der Fall, wird der Fehler auf der Konsole ausgegeben. Wird der anonymen Funktion kein Objekt \u00fcbergeben, wurde der Webserver korrekt gestartet und die entsprechende Meldung erscheint auf der Konsole. Beachten Sie auch die verwendete Syntax ${PORT} im sogenannte template literal . Beachten Sie, dass template literals nicht in einfachen ( ' ) oder doppelten ( \" ) Anf\u00fchrungsstrichen stehen, sondern in ` ( backticks ). Router \u00b6 Noch l\u00e4sst sich unser Programm aber nicht ausf\u00fchren. Wir ben\u00f6tigen im Projektordner noch eine Datei routes.js . Diese wird n\u00e4mlich in der server.js bereits in Zeile 2 eingebunden und in Zeile 8 verwendet. routes.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const router = express . Router (); // eine GET-Anfrage router . get ( '/' , async ( req , res ) => { res . send ({ message : \"Hello FIW!\" }); }); module . exports = router ; Beim Router handelt es sich um eine Middleware (siehe hier ), die die Routen verwaltet und request -Objekte an die entsprechende Routen weiterleitet und response -Objekte empf\u00e4ngt. In unserer routes.js haben wir zun\u00e4chst eine GET -Anfrage implementiert (Zeile 5 ). Das request -Objekt hei\u00dft hier req . Das verwenden wir aber gar nicht. Das respones -Objekt hei\u00dft hier res und wird durch die Anfrage erzeugt. Wir senden in der response ein JavaScript-Objekt zur\u00fcck, das einen Schl\u00fcssel message enth\u00e4lt. In der server.js haben wir mit app.use(express.json()) (Zeile 7 ) angegeben, dass alle JavaScript-Objekte in der response nach JSON umgewandelt werden sollen. Wenn nun die URL localhost:3000 aufgerufen wird, dann wird ein request ausgel\u00f6st, den wir hier mit Hello FIW! als response beantworten (Zeilen 5-8 ). Wichtig ist, dass wir router mit module.exports exportieren, damit es von anderen Modulen importiert und genutzt werden kann. Siehe dazu z.B. hier . Meine Empfehlung ist, (noch) nicht das neue ESM6-Format zu nutzen! Noch \"l\u00e4uft\" unser Backend aber noch nicht. Wir m\u00fcssen es erst starten. Starten des Projektes und Installation von nodemon \u00b6 Das Projekt l\u00e4sst sich nun starten. Wir geben dazu im Terminal im backend -Ordner node server.js ein. Im Terminal erscheint server running on http://localhost:3000 und wenn Sie im Browser die URL http://localhost:3000/ eingeben, wird dort angezeigt. Sie k\u00f6nnen auch Postman \u00f6ffnen und http://localhost:3000 eintragen ( GET -Methode): Wann immer wir jetzt jedoch etwas an der Implementierung \u00e4ndern, m\u00fcssen wir im Terminal zun\u00e4chst den Webserver mit Strg-C // bzw. Control-C stoppen, um ihn dann wieder mit node server.js zu starten. Um das zu umgehen, gibt es das Paket nodemon . Da es nur sinnvoll w\u00e4hrend der Entwicklung eingesetzt werden kann (und sollte), installieren wir es als eine development dependency : npm install --save-dev nodemon Die package.json sieht daraufhin so aus: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Zur Verwendung von nodemon f\u00fcgen wir in die package.json unter \"scripts\" noch die Eigenschaft watch (frei gew\u00e4hlt) und den dazugeh\u00f6rigen Wert nodemon server.js ein: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Nun l\u00e4sst sich die Anwendung mithilfe von nodemon per npm run watch starten und muss auch nicht mehr gestoppt und neu gestartet werden, wenn \u00c4nderungen an der Implementierungen durchgef\u00fchrt wurden. Die Ausgabe im Terminal nach Eingabe von npm run watch ist ungef\u00e4hr so: > backend@1.0.0 watch > nodemon ./server.js [ nodemon ] 2 .0.16 [ nodemon ] to restart at any time, enter ` rs ` [ nodemon ] watching path ( s ) : *.* [ nodemon ] watching extensions: js,mjs,json [ nodemon ] starting ` node ./server.js ` server running on http://localhost:3000 Hier nur zum Verst\u00e4ndnis. Angenommen, wir \u00e4ndern bspw. in der server.js die Zeile 8 zu app . use ( '/api' , routes ); , dann w\u00fcrden alle Routen, die wir in routes.js definieren, unter localhost:3000/api verf\u00fcgbar sein. Wenn wir dann also z.B. in der routes.js die Zeile 5 zu router . get ( '/fiw' , async ( req , res ) => { \u00e4ndern, dann ist der GET-Endpunkt localhost:3000/api/fiw . Mongoose installieren \u00b6 MongoDB ist die am meisten verwendete NoSQL (not only SQL) Datenbank. Sie basiert nicht auf Relationen, Tabellen und ihren Beziehungen zueinander (ist also keine relationale Datenbank), sondern speichert Dokumente in JSON-\u00e4hnlichem Format. Die Community Edition der MongoDB ist Open Source und kostenlos verf\u00fcgbar. Sollten Sie mit Visual Studio Code arbeiten, sollten Sie sich am besten die MongoDB for VS Code -Ereiterung installieren. Zur Verwendung von MongoDB im Backend verwenden wir das Modul Mongoose . Wir installieren Mongoose mithilfe von npm install mongoose --save In die package.json wird das Paket und die entsprechende Abh\u00e4ngigkeit eingetragen: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" , \"mongoose\" : \"^6.3.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Mongoose stellt eine einfach zu verwendende Schnittstelle zwischen Node.js und MongoDB bereit. Die MongoDB ben\u00f6tigen wir aber trotzdem (wir k\u00f6nnten jedoch auch eine Cloud von MongoDB oder z.B. mlab.com verwenden). Bevor wir uns mit der MongoDB verbinden, erstellen wir zun\u00e4chst noch eine Datenbank. MongoDB Compass \u00b6 Um sich Ihre MongoDB-datenbanken anzuschauen, empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach. Dotenv f\u00fcr sichere Zugangsdaten \u00b6 F\u00fcr die \"geheimen\" Zugangsdaten (die jetzt noch gar nicht \"geheim\" sind) verwenden wir das dotenv -Paket: npm install dotenv --save Im Projektordner erstellen wir und eine Datei .env (mit vorangestelltem Punkt!) und schreiben darin: .env 1 DB_CONNECTION = mongodb : //127.0.0.1:27017/posts Beachten Sie, dass der Wert nicht in Hochkomma steht und dass auch kein Semikolon folgt! Wir f\u00fcgen dotenv in die server.js ein und greifen mithilfe von process.env.DB_CONNECTION auf den Wert von DB_CONNECTION zu: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const express = require ( 'express' ); const routes = require ( './routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); const PORT = 3000 ; app . use ( express . json ()); app . use ( '/' , routes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ... ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); In Zeile 4 wird das dotenv -Paket importiert. Mithilfe der config() -Funktion wird die .env -Datei eingelesen. Auf die in der .env -Datei hinterlegten Schl\u00fcssel-Werte-Paare (mit = dazwischen) kann dann mittels process.env.<Schl\u00fcssel> zugegriffen werden (siehe Zeile 21 ). Beachten Sie, die .env -Datei in die .gitignore einzutragen. Die .env -Datei sollte nicht committed werden! Ein Model erstellen \u00b6 Mongoose ist Schema-basiert. Ein Schema kann man sich wie ein Datenmodell vorstellen. Tats\u00e4chlich wird es verwendet, um ein entsprechendes Mongoose-Model zu erstellen. Ein Schema wird unter Aufruf des Konstruktors ( new Schema() ) in Mongoose erstellt. Unter Verwendung des Schemas wird dann mithilfe der model() -Funktion das Datenmodell erzeugt. Wir werden im Folgenden zeigen, wie ein Schema f\u00fcr posts erstellt wird. Das Datenmodell hei\u00dft dann Post . Um sp\u00e4ter auch weitere Schemata, z.B. f\u00fcr user o.\u00e4. zu entwicklen und diese zu trennen, erstellen wir das Schema in einem eigenen Ordner models . Das bedeutet, wir erstellen im Projektordner ein Ordner models und darin eine Datei models/posts.js Die Datei posts.js bekommt folgenden Inhalt: models/posts.js const mongoose = require ( 'mongoose' ); const schema = new mongoose . Schema ({ title : String , location : String , image_id : String }); module . exports = mongoose . model ( 'Post' , schema ); Weiterf\u00fchrende Informationen zu Mongoose-Models finden Sie z.B. hier . Das Thema Schema wird z.B. hier n\u00e4her erl\u00e4utert. Zugriffe auf die Datenbank \u00b6 Nun haben wir alles, was wir ben\u00f6tigen, um unsere Anfragen zu implementieren. Wir nutzen den express.Router , um die Routen zu definieren und k\u00f6nnen mithilfe des Mongoose-Models auf die MongoDB zugreifen. Wir werden nun sukzessive alle Anfragen in die routes.js einf\u00fcgen. R - read all \u00b6 Wir beginnen mit der Anfrage, alle Daten aus der Datenbank auszulesen. F\u00fcr die MongoDB erfolgt dies mit der Funktion find() . In routes.js \u00e4ndern wir unsere GET -Anfrage wie folgt: routes.js 1 2 3 4 5 6 7 8 9 10 11 12 const express = require ( 'express' ); const router = express . Router (); const Post = require ( './models/posts' ); // GET all posts router . get ( '/posts' , async ( req , res ) => { const allPosts = await Post . find (); console . log ( allPosts ); res . send ( allPosts ); }); module . exports = router ; Beachten Sie, dass wir dazu nun das Post -Model in die routes.js einbinden (Zeile 3 ). Die Route wird mit localhost:3000/posts definiert. Die anonyme Callback-Funktion enth\u00e4lt noch zwei Schl\u00fcsselw\u00f6rter: async und await . Die Funktion find() ist ein Promise (siehe dazu hier ). Die Funktion find() wird asynchron ausgef\u00fchrt und \"irgendwann\" ist entweder das Ergebnis dieser Funktion verf\u00fcgbar oder die Funktion gibt einen Fehler zur\u00fcck. Auf eines der beiden wird gewartet ( await ). Nur eine als async deklarierte Funktion darf einen await -Aufruf enthalten (siehe dazu z.B. hier ). Die Ausgabe der Werte auf die Konsole (Zeile 8 ) ist nat\u00fcrlich nicht erforderlich und Sie k\u00f6nnen sie auch l\u00f6schen, wenn Sie wollen. Wenn Sie nun in Postman GET http://localhost:3000/posts aufrufen, erscheinen alle Eintr\u00e4ge aus der Datenbank. Allerdings haben wir dort noch keine Eintr\u00e4ge. Wir bekommen deshalb ein leeres Array [] zur\u00fcck. C - create \u00b6 Als n\u00e4chstes implementieren wir einen Endpunkt, an dem wir einen neuen Datensatz in die Datenbank anlegen k\u00f6nnen. Daf\u00fcr gibt es die http-Methode POST . Wir f\u00fchren also nicht mehr eine GET -, sondern eine POST -Anfrage durch. Bei dieser POST -Anfrage wird der neue Datensatz an den Webserver mitgeschickt. Dies erfolgt im body des request -Objektes. Das Schreiben des Datensatzes in die Datenbank erfolgt mithilfe der save() -Funktion von MongoDB. routes.js 12 13 14 15 16 17 18 19 20 21 // POST one post router . post ( '/posts' , async ( req , res ) => { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . body . image_id }) await newPost . save (); res . send ( newPost ); }); In den Zeilen 15-17 werden die Daten aus dem body des request -Objektes ausgelesen und mit diesen Daten ein neues Post -Objekt erzeugt. Dieses neue Post -Objekt ( newPost ) wird in Zeile 19 in die Datenbank gespeichert und in Zeile 20 als response zur\u00fcckgeschickt. Nun geben wir in Postman POST http://localhost:3000/posts ein und bef\u00fcllen den Body z.B. mit: 1 2 3 4 5 { \"title\" : \"H-Geb\u00e4ude\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"test\" } Achten Sie darauf, dass in der zweiten Men\u00fczeile rechts JSON ausgew\u00e4hlt ist (im Bild blau) - nicht Text . Wir klicken auf Send und es erscheint: Schauen Sie auch in MongoDB Compass nach, ob der Datensatz dort erscheint: R - read one \u00b6 Wir erweitern die routes.js um einen Endpunkt, der uns f\u00fcr eine gegebene id den entsprechenden Datensatz zur\u00fcckliefert. Die _id werden von MongoDB automatisch vergeben und sind recht kryptisch, also z.B. \"626bdb36cd1af60df758d300\" . Wir k\u00f6nnen nat\u00fcrlich nach jedem beliebigen Wert f\u00fcr jeden Schl\u00fcssel in der Datenbank suchen. Wir nehmen hier beispielhaft die _id . Die id wird aus der URL des Endpunktes ausgelesen, d.h. wenn wir bspw. den Endpunkt GET http://localhost:3000/posts/626bdb36cd1af60df758d300 eingeben, dann soll der Datensatz mit der _id: 626bdb36cd1af60df758d300 im JSON-Format zur\u00fcckgegeben werden. Wir nutzen dazu parametrisierte Routen und lesen die id aus der Parameterliste aus. Paremtrisierte Routen werden per : und dann den Namen des Parameters (hier id ) erstellt. Um dann den Wert des Parametrs id aus der Parameterliste auszulesen, wird params verwendet. Im folgenden Code lassen wir req.params auf die Konsole ausgeben, um die Funktionsweise zu erl\u00e4utern. Diese Ausgabe kann nat\u00fcrlich gel\u00f6scht werden (Zeile 27 ). routes.js 23 24 25 26 27 28 29 30 31 32 33 34 35 // POST one post via id router . get ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }); console . log ( req . params ); res . send ( post ); } catch { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); } }); Zum Finden eines einzelnen Datensatzes wird in MongoDB die Funktion findOne() verwendet (siehe hier ). Wird der Datensatz gefunden, d.h. existiert die entsprechende _id , dann wird dieser in der response zur\u00fcckgesendet (Zeile 28 ). Existiert er nicht, wird der HTTP-Statuscode 404 gesendet (Zeile 30 ) und ein JSON mit der error -Nachricht Post does not exist! (Zeile 31 ). Nach Neustart des Servers geben wir in Postman z.B. GET http://localhost:3000/posts/626bdb36cd1af60df758d300 ein (bei Ihnen sind die _id -Werte andere!) und erhalten: Probieren Sie auch einmal GET http://localhost:3000/posts/0 aus, um die Fehlermeldung als JSON zu sehen. U - update \u00b6 Um einen bereits existierenden Datensatz zu \u00e4ndern, kann entweder die HTTP-Anfrage PUT oder PATCH verwendet werden. Zur Unterscheidung zwischen PUT und PATCH siehe z.B. hier oder hier . Um einen Datensatz in der MongoDB zu \u00e4ndern, stehen prinzipiell mehrere Funktionen zur Verf\u00fcging: updateOne() : \u00e4ndert einzelne (oder alle) Teile eines Datensatzes und sendet die _id zur\u00fcck, falls ein neur Datensatz angelegt wurde, findOneAndUpdate() : \u00e4ndert einzelne (oder alle) Teile eines Datensatzes und sendet den kompletten Datensatz zur\u00fcck, replaceOne() : \u00e4ndert den kompletten Datensatz. In der folgenden Implementierung haben wir uns f\u00fcr die HTTP-Anfragemethode PATCH und f\u00fcr die MongoDB-Funktion updateOne() entschieden. Diese Funktion erwartet als ersten Parameter einen <filter> , d.h. die Werte, nach denen nach einem Datensatz gesucht werden soll. Im folgenden Beispiel ist der Filter die _id . Dazu wird erneute ein Parameter id f\u00fcr die URL definiert. Der zweite Parameter der updateOne() -Funktion sind die zu \u00e4ndernden Werte f\u00fcr diesen Datensatz. In der folgenden Implementierung werden diese zu \u00e4ndernden Werte als ein JSON dem body des request -Objektes \u00fcbergeben. Um zu erm\u00f6glichen, dass ein, zwei oder drei Schl\u00fcssel-Werte-Paare in diesem JSON enthalten sein k\u00f6nnen, pr\u00fcfen wir die Eintr\u00e4ge im body und setzen daraus ein neues member -Objekt zusammen, wenn es bereits in der Datenbank existiert (deshalb zun\u00e4chst findOne() ): router.js 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // PATCH (update) one post router . patch ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) if ( req . body . title ) { post . title = req . body . title } if ( req . body . location ) { post . location = req . body . location } if ( req . body . image_id ) { post . image_id = req . body . image_id } await Post . updateOne ({ _id : req . params . id }, post ); res . send ( post ) } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); Wir k\u00f6nnen diese Funktion in Postman ausprobieren, indem wir im body z.B. das JSON 1 2 3 { \"image_id\" : \"test_neu\" } mit unserem Request \u00fcbergeben und PATCH http://localhost:3000/posts/626bdb36cd1af60df758d300 w\u00e4hlen (bei Ihnen eine andere id !). Der Datensatz mit der _id=626bdb36cd1af60df758d300 wird dann aktualisiert. Schauen Sie auch in der Datenbank nach (z.B. in MongoDB Compass) und w\u00e4hlen auch ruhig nochmal GET http://localhost:3000/posts (z.B. in Postman). D - delete one \u00b6 Jetzt implementieren wir noch den Endpunkt, um einen Datensatz zu l\u00f6schen. Dazu werden die HTTP-Anfragemethode DELETE und die MongoDB-Funktion deleteOne() verwendet. Im folgenden Beispiel wird der Datensatz erneut \u00fcber die _id ermittelt und daf\u00fcr erneut die parametrisierte URL ausgelesen: routes.js 87 88 89 90 91 92 93 94 95 96 // DELETE one post via id router . delete ( '/posts/:id' , async ( req , res ) => { try { await Post . deleteOne ({ _id : req . params . id }) res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); Wenn wir nun in Postman z.B. DELETE http://localhost:3000/members/626bdb36cd1af60df758d300 w\u00e4hlen (bei Ihnen eine andere id !), wird der Datensatz mit der _id=626bdb36cd1af60df758d300 aus der Datenbank gel\u00f6scht. Hier nochmal die vollst\u00e4ndige routes.js : routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 const express = require ( 'express' ); const router = express . Router (); const Post = require ( './models/posts' ); // GET all posts router . get ( '/posts' , async ( req , res ) => { const allPosts = await Post . find (); console . log ( allPosts ); res . send ( allPosts ); }); // POST one post router . post ( '/posts' , async ( req , res ) => { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . body . image_id }) await newPost . save (); res . send ( newPost ); }); // POST one post via id router . get ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }); console . log ( req . params ); res . send ( post ); } catch { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); } }); // PATCH (update) one post router . patch ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) if ( req . body . title ) { post . title = req . body . title } if ( req . body . location ) { post . location = req . body . location } if ( req . body . image_id ) { post . image_id = req . body . image_id } await Post . updateOne ({ _id : req . params . id }, post ); res . send ( post ) } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); // DELETE one post via id router . delete ( '/posts/:id' , async ( req , res ) => { try { await Post . deleteOne ({ _id : req . params . id }) res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); module . exports = router ; Cross-Origin Resource Sharing (CORS) \u00b6 Die Same Origin Policy (SOP) ist ein Sicherheitskonzept, das clientseitig Skriptsprachen (also z.B. JavaScript oder CSS) untersagt, Ressourcen aus verschiedenen Herkunften zu verwenden, also von verschiedenen Servern. Dadurch soll verhindert werden, dass fremde Skripte in die bestehende Client-Server-Kommunikation eingeschleust werden. Gleiche Herkunft (origin) bedeutet, dass das gleiche Protokoll (z.B. http oder https ), von der gleichen Domain (z.B. localhost oder htw-berlin ) sowie dem gleichen Port (z.B. 80 oder 4200 ) verwendet werden. Es m\u00fcssen alle drei Eigenschaften \u00fcbereinstimmen. Mit dem Aufkommen von Single Page Applications und dem darin ben\u00f6tigten AJAX kam jedoch der Bedarf auf, die SOP aufzuweichen. Es sollte m\u00f6glich sein, dass z.B. JavaScript sowohl client-seitig das DOM \u00e4ndert als auch einen Request an den Server (das Backend) sendet. Der Kompromiss, der daf\u00fcr gefunden wurde, nennt sich Cross-Origin Resource Sharing (CORS) . Damit ist es m\u00f6glich, f\u00fcr einige oder alle Anfragen zu definieren, dass sie im Sinne der SOP trotzdem erlaub sein sollen. Um CORS f\u00fcr Ihr Backend zu aktivieren, wechseln Sie im Terminal in Ihren backend -Ordner und geben dort npm install cors ein. \u00d6ffnen Sie dann die server.js und f\u00fcgen Sie die hervorgehobenen Zeilen ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 const express = require ( 'express' ); const cors = require ( 'cors' ); const routes = require ( './routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); const PORT = 3000 ; app . use ( express . json ()); // enable cors for all requests app . use ( cors ()); app . use ( '/' , routes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); Wenn Sie z.B. nur die get -Anfrage teilen wollen, dann w\u00e4hlen Sie nicht app.use(cors()); , sondern app . get ( \"/\" , cors (), ( req , res ) => { res . json ({ message : \"Hello FIW!\" }); }); Mehr zum CORS-Paket von node.js bzw. express finden Sie hier . Success Das bis hier erstellte Backend ist unter https://github.com/jfreiheit/IKT-PWA-Backend.git verf\u00fcgbar. Erweiterung um das Speichern von Bildern \u00b6 Bis jetzt haben wir nur Daten im JSON-Format zwischen Frontend und Backend ausgetauscht und auch nur solche Daten in der MongoDB gespeichert. Bilder (und auch andere Dateien) sind FormData-Objects im multipart/form-data -Format. Zur Behandlung solcher Daten verwenden wir ein Middleware f\u00fcr unser Backend, namens Multer . Hint Wenn Sie nur am Code f\u00fcr unser Backend interessiert sind, dann k\u00f6nnen Sie auch direkt zu Zusammenf\u00fchren der Funktionalit\u00e4ten springen. Im Folgenden werden die Entstehung aber n\u00e4her erl\u00e4utert und verschiedene Varianten diskutiert. MongoDB speichert Daten bis zu einer Gr\u00f6\u00dfe von 16Mb im Bin\u00e4rformat. Um auch gr\u00f6\u00dfere Dateien (Bilder, Videos, pdf, ...) speichern zu k\u00f6nnen, werden die Dateien in chunks zerlegt und k\u00f6nnen dann aus diesen St\u00fccken wieder zusammengesetzt werden. Daf\u00fcr gibt es in der MongoDB eine GridFS -Spezifikation (siehe auch hier oder hier ). Zur Verwendung von GridFS gibt es die beiden Pakte multer-gridfs-storage und gridfs-stream . Wir installieren im Backend-Projekt alle drei Pakete und zeigen im Folgenden deren Verwendung: npm install multer multer-gridfs-storage gridfs-stream Die package.json sollte nun ungef\u00e4hr so aussehen: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/jfreiheit/IKT-PWA-Backend.git\" }, \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"dotenv\" : \"^16.0.0\" , \"express\" : \"^4.18.0\" , \"gridfs-stream\" : \"^1.1.1\" , \"mongoose\" : \"^6.3.1\" , \"multer\" : \"^1.4.4\" , \"multer-gridfs-storage\" : \"^5.0.2\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Wir k\u00fcmmern uns nun zun\u00e4chst darum, Bilder in die MongoDB hochzuladen . Upload von Bildern \u00b6 F\u00fcr den Upload der Bilder erstellen wir zun\u00e4chst einen Ordner middleware und darin eine Datei upload.js . In dieser Datei wird unter Verwendung von Multer ein GridFsStorage eingerichtet. Die zu verwendende Collection benennen wir hier fileupload (siehe bucketName ). Sie k\u00f6nnen diesen Namen frei w\u00e4hlen. Beachten Sie dann aber im Folgenden \u00fcberall die Verwendung von fileupload (in der MongoDB entstehen die Collections fileupload.files und fileupload.chunks - siehe z.B. hier oder hier ). middleware/upload.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const multer = require ( \"multer\" ); const { GridFsStorage } = require ( \"multer-gridfs-storage\" ); const storage = new GridFsStorage ({ url : process . env . DB , options : { useNewUrlParser : true , useUnifiedTopology : true }, file : ( req , file ) => { const match = [ \"image/png\" , \"image/jpeg\" ]; if ( match . indexOf ( file . mimetype ) === - 1 ) { console . log ( 'file.mimetype === -1' ) return ` ${ Date . now () } -jf- ${ file . originalname } ` ; } console . log ( 'store' ); return { bucketName : 'posts' , filename : ` ${ Date . now () } -jf- ${ file . originalname } ` , }; }, }); module . exports = multer ({ storage }); Beachten Sie, dass wir beim Upload der Bilder f\u00fcr diese Bilder Dateinamen mithilfe von ${Date.now()}-jf-${file.originalname} erstellen bzw. festlegen. Damit diese Dateinamen eindeutig sind, wird mithilfe von Date.now() der aktuelle Zeitstempel verwendet. Der String -jf- in der Mitte kann nat\u00fcrlich auch durch Ihre Initialen ersetzt (oder weggelassen) werden. Au\u00dferdem wird auch noch der originale Dateiname verwendet. Insgesamt sollte sichergestellt werden, dass die Dateinamen eindeutig sind (deshalb auch Date.now() ). In Zeile 10 werden die Dateitypen festgelegt, die akzeptiert werden, hier png und jpeg . Diese Liste kann erweitert oder eingegrenzt werden. Diese Middleware nutzen wir nun f\u00fcr den POST -Request des Bildes und erstellen einen Ordner routes und darin eine Datei upload.routes.js mit folgendem Inhalt: routes/upload.route.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const express = require ( 'express' ); const upload = require ( '../middleware/upload' ); const router = express . Router (); router . post ( '/' , upload . single ( 'file' ), ( req , res ) => { // req.file is the `file` file if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }); } else { console . log ( 'req.file' , req . file ); const imgUrl = `http://localhost:4000/download/ ${ req . file . filename } ` ; return res . status ( 201 ). send ({ url : imgUrl }); } }) module . exports = router ; In Zeile 5 wird die multer-Middleware mit update.single('file') aufgerufen. Neben der Funktion .single(fieldname) stehen auch die Funktionen .array(fieldname[, maxCount]) und .fields(field) zur Verf\u00fcgung, um gleichzeitig mehrere Dateien hochzuladen (siehe multer ). Als Response wird die URL zur\u00fcckgegeben, unter der das Bild heruntergeladen werden kann ( http://localhost:4000/download/${req.file.filename} ). Routen \u00e4ndern und einbinden \u00b6 In der urspr\u00fcnglichen Implementierung hatten wir die Datei routes.js noch im Projektordner gehabt. Wir benennen diese in posts.routes.js um und schieben sie ebenfalls in den routes -Ordner. Beachten Sie, dass Sie dadurch in der server.js auch den Import auf const routes = require('./routes/posts.routes'); \u00e4ndern m\u00fcssen. Da wir nun aber auch die upload -Route einbinden, \u00e4ndern wir gleich mehrere Sachen. Zun\u00e4chst wird der urspr\u00fcngliche routes zu postRoutes und die generelle Route daf\u00fcr wird /posts : server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); const PORT = 3000 ; app . use ( express . json ()); // enable cors for all requests app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/img' , uploadRoutes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); In der posts.routes.js kann nun aus den URLs der Endpunkte jeweils das /posts entfernt werden: routes/posts.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 const express = require ( 'express' ); const router = express . Router (); const Post = require ( '../models/posts' ); // GET all posts router . get ( '/' , async ( req , res ) => { const allPosts = await Post . find (); console . log ( allPosts ); res . send ( allPosts ); }); // POST one post router . post ( '/' , async ( req , res ) => { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . body . image_id }) await newPost . save (); res . send ( newPost ); }); // POST one post via id router . get ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }); console . log ( req . params ); res . send ( post ); } catch { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); } }); // PATCH (update) one post router . patch ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) if ( req . body . title ) { post . title = req . body . title } if ( req . body . location ) { post . location = req . body . location } if ( req . body . image_id ) { post . image_id = req . body . image_id } await Post . updateOne ({ _id : req . params . id }, post ); res . send ( post ) } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); // DELETE one post via id router . delete ( '/:id' , async ( req , res ) => { try { await Post . deleteOne ({ _id : req . params . id }) res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); module . exports = router ; Upload mithilfe von Postman \u00b6 Das Hochladen der Bilder kann nun bereits getestet werden. Starten Sie das Backend. \u00d6ffnen Sie Postman und geben Sie als URL http://localhost:3000/upload ein und w\u00e4hlen als Anfragemethode POST . Klicken Sie auf Body und markieren dann form-data : Geben Sie unter KEY den Schl\u00fcssel file ein (das wird manchmal vergessen und dann bekommen Sie einen multer -Fehler unexpected field !) und w\u00e4hlen Sie aus dem Dropdown-Men\u00fc File . Unter VALUE erscheint der Button Select Files . Klicken Sie darauf und w\u00e4hlen ein png - oder ein jpeg -Bild (kann auch .jpg sein) aus, das Sie hochladen wollen. Klicken Sie dann auf Send . Es erscheint: Ich habe in diesem Beispiel die Datei fiw.jpg hochgeladen. Wenn Sie sich die MongoDB anschauen, dann finden Sie darin die beiden Collections posts.files und posts.chunks . In posts.files sind die Metadaten des hochgeladenen Bildes zu finden, z.B. { \"_id\" : { \"$oid\" : \"627399fc6820d87a03418810\" }, \"length\" : 86584 , \"chunkSize\" : 261120 , \"uploadDate\" : { \"$date\" : \"2022-05-05T09:33:48.949Z\" }, \"filename\" : \"1651743228869-jf-fiw.jpg\" , \"contentType\" : \"image/jpeg\" } Die dazugeh\u00f6rige _id finden Sie auch in posts.chunks (k\u00f6nnen Sie sich in der mongosh mit db.posts.chunks.find({ _id: \"627399fc6820d87a03418810\" }) anschauen). Darin ist das Bild im Binary-Format gespeichert. Download von Bildern \u00b6 F\u00fcr den Download der gespeicherten Bilder gehen wir \u00e4hnlich vor, wie beim Upload, ben\u00f6tigen daf\u00fcr aber nicht mehr die multer-Middleware , daf\u00fcr aber gridfs-stream . Wir erstellen im Ordner routes die Datei download.routes.js mit folgendem Inhalt: routes/download.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 const express = require ( 'express' ); const mongoose = require ( 'mongoose' ); const Grid = require ( \"gridfs-stream\" ); const router = express . Router (); const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); let gfs , gfsb ; connect . once ( 'open' , () => { // initialize stream gfsb = new mongoose . mongo . GridFSBucket ( connect . db , { bucketName : \"posts\" }); gfs = Grid ( connect . db , mongoose . mongo ); }); router . get ( '/:filename' , async ( req , res ) => { try { const cursor = await gfs . collection ( 'posts' ). find ({ filename : req . params . filename }); cursor . forEach ( doc => { console . log ( 'doc' , doc ); gfsb . openDownloadStream ( doc . _id ). pipe ( res ); }) } catch ( error ) { console . log ( 'error' , error ); res . send ( \"not found\" ); } }); module . exports = router ; GridFSBucket ist eine Klasse aus der Node.js-MongoDB-API . Diese h\u00e4tten wir auch schon f\u00fcr das Upload verwenden k\u00f6nnen (siehe z.B. hier ). Da wir \u00fcber den Dateinamen auf die Datei zugreifen wollen, ben\u00f6tigen wir zun\u00e4chst die entsprechende _id der Datei in der posts.chunks -Collection. Dazu greifen wir mithilfe von find() auf die posts.files -Collection zu und ermitteln die _id . Die find() -Funktion gibt einen sogenannten Cursor auf das Array aller gefundenen Datens\u00e4tze zur\u00fcck. Mithilfe von forEach() durchlaufen wir dieses Array (enth\u00e4lt aber nur einen Datensatz) und ermitteln die _id . Mit der openDownloadStream() -Funktion der GridFSBucket() -Klasse \u00f6ffnen wir den Download-Stream des Bildes und geben ihn als response res zur\u00fcck. Wir binden die download -Route nun noch in unsere server.js ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const downloadRoute = require ( './routes/download.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/image' , uploadRoutes ); app . use ( '/download' , downloadRoute ); app . listen ( process . env . PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ process . env . PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); Download mithilfe von Postman \u00b6 Der Test des GET http://localhost:3000/download/:filename -Endpunktes ist einfach. Dazu verwenden wir einfach die URL, die durch den Upload als Response zur\u00fcckgegeben wurde (im obigen Beispiel also \"http://localhost:3000/download/1651743228869-jf-fiw.jpg\" ): Geben Sie in Postman also Ihre URL ein, w\u00e4hlen GET und klicken Send . Es erscheint das Bild: Da es sich um die GET-Methode handelt, k\u00f6nnen Sie die URL http://localhost:3000/download/1651743228869-jf-fiw.jpg nat\u00fcrlich auch in den Browser eingeben und das Bild erscheint. Download als base64-String \u00b6 Im oberen Beispiel wurde das Bild beim Download gestreamt. Wir betrachten nun die M\u00f6glichkeit, dass es als base64-String gesendet wird. Base64 ist ein Verfahren zur Kodierung von 8-Bit-Bin\u00e4rdaten (z.B. Bilder) in eine Zeichenfolge, die nur aus lesbaren, Codepage-unabh\u00e4ngigen ASCII-Zeichen besteht. Der String ist f\u00fcr ein Bild sehr lang. Er l\u00e4sst sich aber leicht in eine Bildquelle umwandeln, damit das Bild dann im Frontend dargestellt werden kann. Wir werden in der download.routes.js beide M\u00f6glichkeiten lassen (also sowohl den Stream als auch den base64-String). Deshalb passen wir die Routen der Endpunkte an. Die /show/:filename -Route ist f\u00fcr den Stream und die /send/:filename -Route f\u00fcr den base64 -String. Wir pr\u00e4sentieren zun\u00e4chst den Code und erl\u00e4utern ihn dann. Die download.routes.js sieht dann so aus: routes/download.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 const express = require ( 'express' ); const mongoose = require ( 'mongoose' ); const Grid = require ( \"gridfs-stream\" ); const multer = require ( 'multer' ); const router = express . Router (); const { GridFsStorage } = require ( 'multer-gridfs-storage' ) const { MongoClient } = require ( 'mongodb' ); require ( 'dotenv' ). config (); const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const dbName = \"posts\" ; let gfs , gfsb ; connect . once ( 'open' , () => { // initialize stream gfsb = new mongoose . mongo . GridFSBucket ( connect . db , { bucketName : \"posts\" }); gfs = Grid ( connect . db , mongoose . mongo ); // gfs.collection('file'); }); router . get ( '/show/:filename' , async ( req , res ) => { try { const cursor = await gfs . collection ( 'posts' ). find ({ filename : req . params . filename }); cursor . forEach ( doc => { console . log ( 'doc' , doc ); const id = doc . _id . valueOf (); console . log ( 'doc._id' , id ); gfsb . openDownloadStream ( doc . _id ). pipe ( res ); }) } catch ( error ) { console . log ( 'error' , error ); res . send ( \"not found\" ); } }); router . get ( '/send/:filename' , async ( req , res ) => { let fileName = req . params . filename ; MongoClient . connect ( process . env . DB_CONNECTION , ( err , client ) => { if ( err ){ return res . send ({ title : 'Uploaded Error' , message : 'MongoClient Connection error' , error : err . errMsg }); } const db = client . db ( dbName ); const collection = db . collection ( 'posts.files' ); const collectionChunks = db . collection ( 'posts.chunks' ); collection . find ({ filename : fileName }). toArray ( ( err , docs ) => { if ( err ){ return res . send ({ title : 'File error' , message : 'Error finding file' , error : err . errMsg }); } if ( ! docs || docs . length === 0 ){ return res . send ({ title : 'Download Error' , message : 'No file found' }); } else { //Retrieving the chunks from the db console . log ( 'docs[0]._id' , docs [ 0 ]. _id ) collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { if ( err ){ return res . send ({ title : 'Download Error' , message : 'Error retrieving chunks' , error : err . errmsg }); } if ( ! chunks || chunks . length === 0 ){ //No data found return res . send ({ title : 'Download Error' , message : 'No data found' }); } //console.log('chunks', chunks) //Append Chunks let fileData = []; for ( let chunk of chunks ){ console . log ( 'chunk' , chunk ) //This is in Binary JSON or BSON format, which is stored //in fileData array in base64 endocoded string format fileData . push ( chunk . data . toString ( 'base64' )); } //Display the chunks using the data URI format let finalFile = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); // console.log('finalFile', finalFile) res . send ({ title : 'Image File' , message : 'Image loaded from MongoDB GridFS' , imgurl : finalFile }); }) // toArray } // else }) // toArray }) // connect }) // get module . exports = router ; Die Funktion sieht auf den ersten Blick sehr umfangreich aus. Die meisten Zeilen sind jedoch f\u00fcr die Fehlerbehandlung. Wenn wir die Fehlerbahndlung (und die Kommentare und die Konsolenausgaben) entfernen, dann bleibt nur noch das \u00fcbrig: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 router . get ( '/send/:filename' , async ( req , res ) => { let fileName = req . params . filename ; MongoClient . connect ( process . env . DB_CONNECTION , ( err , client ) => { const db = client . db ( dbName ); const collection = db . collection ( 'posts.files' ); const collectionChunks = db . collection ( 'posts.chunks' ); collection . find ({ filename : fileName }). toArray ( ( err , docs ) => { collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { let fileData = []; for ( let chunk of chunks ){ fileData . push ( chunk . data . toString ( 'base64' )); } let finalFile = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); res . send ({ title : 'Image File' , message : 'Image loaded from MongoDB GridFS' , imgurl : finalFile }); }) // toArray }) // toArray }) // connect }) // get Wir verwenden hier also direkt das mongodb -Paket, das ist der MongoDB-Treiber f\u00fcr Node.js. Wir stellen eine Verbindung mit der Datenbank posts her (Zeile 5 ) und erstellen uns drei Variablen, eine f\u00fcr die Datenbank, eine f\u00fcr die posts.files -Collection und eine f\u00fcr die posts.chunks -Collection (siehe GridFS ). Dann suchen wir in der posts.files -Collection nach dem Dateinamen und ermitteln die zugeh\u00f6rige _id (speichern als files_id , erhalten wir aus docs[0]._id - siehe Zeile 13 ). Nun suchen wir alle chunks mit dieser files_id und erhalten ein chunks -Array. Dieses Array enth\u00e4lt die data des jeweiligen chunk . Mithilfe der JavaScript-Funktion toString('base64) wandeln wir diese Daten in einen String um und speichern die String in das Array fileData . Dieses Array ist also ein Array aus Strings. Unter der Verwendung der join('') -Funktion von JavaScript werden alle diese String-Eintr\u00e4ge zu einem String verbunden. Vor diesen String setzen wir noch \"data:image/jpeg;base64,\" (siehe z.B. hier ). Wenn wir nun ein Bild downloaden wollen, geben wir in Postman z.B. http://localhost:3000/download/1652090780364-jf-htwbild4.jpg ein und erhalten den sehr langen base64-String des Bildes. Die gleiche Funktionalit\u00e4t haben Sie auch, wenn Sie einen Online-Encoder verwenden, z.B. base64-image.de . Delete von Bildern \u00b6 Das L\u00f6schen der Bilder ist ganz \u00e4hnlich zum Download. Erstellen Sie die Datei routes/delete.route.js : routes/delete.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const express = require ( 'express' ); const mongoose = require ( 'mongoose' ); const Grid = require ( \"gridfs-stream\" ); const router = express . Router (); const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); let gfs ; connect . once ( 'open' , () => { gfs = Grid ( connect . db , mongoose . mongo ); gfs . collection ( 'posts' ); }); router . delete ( '/:filename' , async ( req , res ) => { try { await gfs . collection ( 'posts' ). deleteOne ({ filename : req . params . filename }); res . send ({ \"message\" : \"deleted\" }); } catch ( error ) { console . log ( 'error' , error ); res . send ( \"An error occured.\" ); } }); module . exports = router ; und binden diese in die server.js ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const downloadRoute = require ( './routes/download.routes' ); const deleteRoute = require ( './routes/delete.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/image' , uploadRoutes ); app . use ( '/download' , downloadRoute ); app . use ( '/delete' , deleteRoute ); app . listen ( process . env . PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ process . env . PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); Delete mithilfe von Postman \u00b6 Zum Testen verwenden Sie den gleichen Dateinamen wie beim Download und w\u00e4hlen als Anfragemethode DELETE . Zusammenf\u00fchren der Funktionalit\u00e4ten \u00b6 Wir haben nun recht viele Routen und Endpunkte in unserem Backend. Wir wollen aber gerne, dass es nur die f\u00fcnf genannten Endpunkte gibt: Methode URL Bedeutung GET /posts hole alle Datens\u00e4tze GET /posts/11 hole den Datensatz mit der id=11 POST /posts f\u00fcge einen neuen Datensatz hinzu PUT /posts/11 \u00e4ndere den Datensatz mit der id=11 DELETE /posts/11 l\u00f6sche den Datensatz mit der id=11 Das bedeutet, wir binden den Upload und Download von Bildern nun in unsere posts -Routen ein. Die Funktionen werden dabei \"etwas\" umfangreicher. Zum Verst\u00e4ndnis \u00b6 Wir verwenden Multer und GridFs storage . Multer ist eine Middleware f\u00fcr Node.js, um Daten im multipart/form-data -Format zu verwalten. Die grunds\u00e4tzliche Idee ist, dass im Request nicht nur ein body , sondern auch eine file -Eigenschaft enthalten ist (neben dem header ). Multer verwendet einen storage , um Bilder (oder andere Dateien) zu speichern. Einen solchen storage bietet GridFs storage . Dieser kann sogar Dateien gr\u00f6\u00dfer als 16 MB speichern und die Idee dabei ist, dass die Datei in zwei Collections gespeichert wird, in der files -Collection, welche die (Meta-)Informationen der Datei speichert und der chunks -Collection, die die eigentliche Datei (als Bin\u00e4rdaten) speichert. Eine Datei kann dabei in mehrere chunks unterteilt werden. Die folgende Abbildung zeigt das Prinzip von GridFS : F\u00fcr unser Datenmodell sieht die Auteilung der Daten somit wie folgt aus: in der posts -Collection speichern wir die _id des Posts, den title eines Posts, die location und die image_id . Die image_id enth\u00e4lt den Dateinamen filename des Bildes. in der posts.files -Collection speichern wir (GridFs) die _id der Datei, die length der Datei, die chunkSize , das uploadDate , den filename (siehe in posts die image_id ) und den contenType (z.B. image/jpeg ) in der posts.chunks -Collection speichern wir (GridFs) die _id des Chunks, die files_id (diese entspricht der _id der Datei in der posts.files -Collection), ein n (fortlaufende Nummerierung der Chunks einer Datei beginnend mit 0 ), die data der Datei (in diesem Chunk) Chunks kann es zu einer Datei mehrere geben. Alle data aller Chunks einer Datei bilden zusammen die Datei als Bin\u00e4r- (bzw. base64-) Daten. Die folgende Abbildung zeigt unser Datenmodell in der Datenbank posts : Um z.B. einen Datensatz (einen Post) anzulegen, speichern wir also die zugeh\u00f6rigen Daten in der posts -Collection (inkl. dem filename der Datei), speichern die Meta-Informationen der Datei in der posts.files -Collection und die zugeh\u00f6rigen Bin\u00e4rdaten der Datei in posts.chunks . POST - kompletter Datensatz \u00b6 Die POST -Funktion f\u00fcr einen Datensatz ist nicht viel umfangreicher als zuvor: aus routes/posts.routes.js 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // POST one post router . post ( '/' , upload . single ( 'file' ), async ( req , res ) => { // req.file is the `file` file if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }); } else { console . log ( 'req.body' , req . body ); const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . file . filename }) await newPost . save (); return res . send ( newPost ); } }) Wichtig ist, dass posts.routes.js nun auch die upload.js einbindet: aus routes/posts.routes.js 4 const upload = require ( '../middleware/upload' ); Beachten Sie, dass die Daten nun nicht mehr als JSON \u00fcbergeben werden, sondern als form-data . Der Test mithilfe von Postman sieht deshalb nun so aus: Als Response bekommen Sie aber wieder ein JSON zur\u00fcck, z.B.: { \"title\" : \"HTW Geb\u00e4ude C\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"1652166642127-jf-htwbild5.jpg\" , \"_id\" : \"627a0ff2305433d805b6b437\" , \"__v\" : 0 } Das Bild ist nun in der Collection posts einerseits in posts.files mit den Daten und in posts.chunks mit den Daten gespeichert. Beachten Sie, dass das Bild so klein ist, dass es in nur einem chunk gespeichert werden kann. Gr\u00f6\u00dfere Dateien werden in mehrer chunks aufgeteilt. Alle diese chunks , die zu einem Bild geh\u00f6ren, haben dann dieselbe files_id (aber fortlaufende _id s). In der posts -Collection sieht der Datensatz dann wie folgt aus: GET - ein kompletter Datensatz \u00b6 Jetzt den kompletten Datensatz mit einer bestimmten _id zu laden, ist etwas aufwendiger: Wir laden zun\u00e4chst aus der posts -Collection den Datensatz mit der _id . Aus diesem Datensatz lesen wir die image_id aus. Das ist der filename mit dem wir in der posts.files -Collection suchen. Aus der posts.files -Collection lesen wir den Datensatz mit dem filename aus und identifizieren dessen _id . Nach dieser _id suchen wir unter files_id in der posts.chunks -Collection und lesen alle zugeh\u00f6rigen chunks aus. Dazu schreiben wir uns zun\u00e4chst eine Funktion getOnePost(id) , die ein Promise zur\u00fcckgibt. aus routes/posts.routes.js 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const collectionFiles = connect . collection ( 'posts.files' ); const collectionChunks = connect . collection ( 'posts.chunks' ); function getOnePost ( id ) { return new Promise ( async ( resolve , reject ) => { try { const post = await Post . findOne ({ _id : id }); // console.log('post.image_id', post.image_id); let fileName = post . image_id ; collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { // console.log('docs', docs) collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { const fileData = []; for ( let chunk of chunks ) { // console.log('chunk._id', chunk._id) fileData . push ( chunk . data . toString ( 'base64' )); } let base64file = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); let getPost = new Post ({ \"title\" : post . title , \"location\" : post . location , \"image_id\" : base64file }); //console.log('getPost', getPost) resolve ( getPost ) }) }) // toArray find filename } catch { reject ( new Error ( \"Post does not exist!\" )); } }) } Die Konsolenausgaben k\u00f6nnen nat\u00fcrlich auch alle entfernt werden, aber es lohnt sich vielleicht auch zu sehen, was an den einzelnen Stellen passiert. In Zeile 30 erfolgt der Zugriff auf die posts -Collection und es wird der Datensatz mit der _id ermittelt, welche als Parameter der URL \u00fcbergeben wurde. Aus dem Ergebnis post wird dann der Dateiname des Bildes in Zeile 32 mithilfe von post.image_id ermittelt. In der post.files -Collection wird in Zeile 34 nach dem Datensatz mit dem entsprechenden filename gesucht. Die _id dieses Datensatzes ist der Wert von files_id in der Collection posts.chunks . Nach all diesen Eintr\u00e4gen wird in Zeile 37 gesucht. Aus allen chunks wird dann der base64 -String erzeugt und dem Post -Objekt \u00fcbergeben, welches als resolve der Promise zur\u00fcckgeschickt wird. Diese Funktion k\u00f6nnen wir nun f\u00fcr unseren get('/:id') -Endpunkt verwenden. Die Funktion sieht dann wie folgt aus: aus routes/posts.routes.js 102 103 104 105 106 107 108 109 110 111 112 113 114 115 // GET one post via id router . get ( '/:id' , async ( req , res ) => { getOnePost ( req . params . id ) . then ( ( post ) => { console . log ( 'post' , post ); res . send ( post ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); }) }); Wir \u00fcbergeben der getOnePost() -Funktion die als Parameter \u00fcbergebene id und senden den resolve -Wert der Promise als Response zur\u00fcck. GET - alle Datens\u00e4tze \u00b6 Der Ansatz, um alle Datens\u00e4tze aus der MongoDB zu lesen, ist der gleiche, wie f\u00fcr einen Datensatz. Wir ermitteln sukzessive die _id alle Datens\u00e4tze in der posts -Collection. Dazu schreiben wir uns eine Funktion getAllPosts() . In dieser laden wir zun\u00e4chst alle posts und rufen dann f\u00fcr jeden einzelnen die getOnePost(id -Funktion auf: aus routes/posts.routes.js 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 function getAllPosts () { return new Promise ( async ( resolve , reject ) => { const sendAllPosts = []; const allPosts = await Post . find (); try { for ( const post of allPosts ) { console . log ( 'post' , post ) const onePost = await getOnePost ( post . _id ); sendAllPosts . push ( onePost ); } console . log ( 'sendAllPosts' , sendAllPosts ) resolve ( sendAllPosts ) } catch { reject ( new Error ( \"Posts do not exist!\" )); } }); } Die Verwendung dieser Funktion ist wie oben: aus routes/posts.routes.js 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // GET all posts router . get ( '/' , async ( req , res ) => { getAllPosts () . then ( ( posts ) => { res . send ( posts ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post do not exist!\" }); }) }); DELETE - einen Datensatz \u00b6 Wird ein Post gel\u00f6scht, m\u00fcssen wir auch daf\u00fcr sorgen, dass das zugeh\u00f6rige Bild aus der posts.files und der posts.chunks gel\u00f6scht wird. Das L\u00f6schen ist also dreistufig: aus routes/posts.routes.js 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // DELETE one post via id router . delete ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) let fileName = post . image_id ; await Post . deleteOne ({ _id : req . params . id }); await collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { await collectionChunks . deleteMany ({ files_id : docs [ 0 ]. _id }); }) await collectionFiles . deleteOne ({ filename : fileName }); res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); Zusammenfassung - Code des Backends \u00b6 Hier nochmal alle wichtigen Dateien unseres Backends: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); require ( 'dotenv' ). config (); const mongoose = require ( 'mongoose' ); const app = express (); const PORT = process . env . PORT || 3000 ; app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ) app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ) } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }) /* die folgende Verbindung brauchen wir gar nicht, wird jeweils bei Bedarf erzeugt (mongoose) */ mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }) . then ( () => console . log ( 'connected to BD' ) ). catch ( err => console . error ( err , 'conncetion error' ) ) const db = mongoose . connection ; middleware/upload.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 const multer = require ( 'multer' ); const { GridFsStorage } = require ( 'multer-gridfs-storage' ); require ( 'dotenv' ). config (); const storage = new GridFsStorage ({ url : process . env . DB_CONNECTION , options : { useNewUrlParser : true , useUnifiedTopology : true }, file : ( req , file ) => { const match = [ \"image/png\" , \"image/jpg\" , \"image/jpeg\" ]; if ( match . indexOf ( file . mimetype ) === - 1 ) { return ` ${ Date . now () } -jf- ${ file . originalname } ` ; } console . log ( 'store' ); return { bucketName : 'posts' , filename : ` ${ Date . now () } -jf- ${ file . originalname } ` , request : req } } }) console . log ( 'store' , storage ) module . exports = multer ({ storage }); routes/posts.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 const express = require ( 'express' ); const router = express . Router (); const Post = require ( '../models/posts' ) const upload = require ( '../middleware/upload' ) const mongoose = require ( 'mongoose' ) require ( 'dotenv' ). config () /* ----------------- POST ---------------------------- */ // POST one post router . post ( '/' , upload . single ( 'file' ), async ( req , res ) => { if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }) } else { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . file . filename }) console . log ( 'newPost' , newPost ) await newPost . save (); res . send ( newPost ) } }) /* ----------------- GET ---------------------------- */ const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const collectionFiles = connect . collection ( 'posts.files' ); const collectionChunks = connect . collection ( 'posts.chunks' ); function getOnePost ( id ) { return new Promise ( async ( resolve , reject ) => { try { const post = await Post . findOne ({ _id : id }); let fileName = post . image_id ; collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { // sort({n: 1}) --> die chunks nach Eigenschaft n aufsteigend sortieren collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { const fileData = []; for ( let chunk of chunks ) { // console.log('chunk._id', chunk._id) fileData . push ( chunk . data . toString ( 'base64' )); } let base64file = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); let getPost = new Post ({ \"title\" : post . title , \"location\" : post . location , \"image_id\" : base64file }); resolve ( getPost ) }) }) // toArray find filename } catch { reject ( new Error ( \"Post does not exist!\" )); } }) } function getAllPosts () { return new Promise ( async ( resolve , reject ) => { const sendAllPosts = []; const allPosts = await Post . find (); try { for ( const post of allPosts ) { console . log ( 'post' , post ) const onePost = await getOnePost ( post . _id ); sendAllPosts . push ( onePost ); } console . log ( 'sendAllPosts' , sendAllPosts ) resolve ( sendAllPosts ) } catch { reject ( new Error ( \"Posts do not exist!\" )); } }); } // GET one post via id router . get ( '/:id' , async ( req , res ) => { getOnePost ( req . params . id ) . then ( ( post ) => { console . log ( 'post' , post ); res . send ( post ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); }) }); // GET all posts router . get ( '/' , async ( req , res ) => { getAllPosts () . then ( ( posts ) => { res . send ( posts ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post do not exist!\" }); }) }); /* ----------------- DELETE ---------------------------- */ // DELETE one post via id router . delete ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) let fileName = post . image_id ; await Post . deleteOne ({ _id : req . params . id }); await collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { await collectionChunks . deleteMany ({ files_id : docs [ 0 ]. _id }); }) await collectionFiles . deleteOne ({ filename : fileName }); res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); module . exports = router ; .env DB_CONNECTION = mongodb://localhost:27017/posts PORT = 3000 Zusammenfassung - die MongoDB posts \u00b6 Hier einige Datens\u00e4tze f\u00fcr die Datenbank posts : Collection posts 1 2 3 4 5 6 7 { \"_id\" :{ \"$oid\" : \"6278e79c6664ce70884dd0b0\" }, \"title\" : \"WH Eingang\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"1652090780364-jf-htwbild4.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a0ff2305433d805b6b437\" }, \"title\" : \"HTW Geb\u00e4ude C\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"1652166642127-jf-htwbild5.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7cad8ae16b1ba5f62f76\" }, \"title\" : \"Mensastrand\" , \"location\" : \"Campus Wilhelminenhof Mensa\" , \"image_id\" : \"1652194477890-jf-htwbild1.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7cdf8ae16b1ba5f62f80\" }, \"title\" : \"Wiese Campus WH\" , \"location\" : \"Campus Wilhelminenhof Geb\u00e4ude C\" , \"image_id\" : \"1652194527176-jf-htwbild2.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7d0b8ae16b1ba5f62f84\" }, \"title\" : \"Ber\u00fchmt wegen FIW\" , \"location\" : \"Campus Wilhelminenhof Geb\u00e4ude C\" , \"image_id\" : \"1652194571822-jf-htwbild3.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7d398ae16b1ba5f62f8b\" }, \"title\" : \"Haupttor HTW\" , \"location\" : \"Wilhelminenhofstra\u00dfe HTW\" , \"image_id\" : \"1652194617191-jf-htwbild4.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7d608ae16b1ba5f62f8f\" }, \"title\" : \"Geb\u00e4ude C\" , \"location\" : \"HTW Berlin\" , \"image_id\" : \"1652194656102-jf-htwbild5.jpg\" , \"__v\" : 0 } Collection posts.files 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"_id\" :{ \"$oid\" : \"6278d47e96a41858d66f1621\" }, \"length\" : 984341 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T08:44:46.239Z\" }, \"filename\" : \"1652085886102-jf-htwbild1.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278d5f902370f2c675993e9\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T08:51:05.478Z\" }, \"filename\" : \"1652086265414-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278db738d2b5bc5968f453e\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T09:14:27.957Z\" }, \"filename\" : \"1652087667872-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278db918d2b5bc5968f4546\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T09:14:57.113Z\" }, \"filename\" : \"1652087697071-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278dd057c648b9e8e3bbb74\" }, \"length\" : 117492 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T09:21:09.873Z\" }, \"filename\" : \"1652088069823-jf-htwbild3.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278e74458477bf1223fa286\" }, \"length\" : 1038579 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T10:04:53.07Z\" }, \"filename\" : \"1652090692995-jf-htwbild4.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278e79c6664ce70884dd0ab\" }, \"length\" : 1038579 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T10:06:20.437Z\" }, \"filename\" : \"1652090780364-jf-htwbild4.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a0ff2305433d805b6b435\" }, \"length\" : 25449 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T07:10:42.191Z\" }, \"filename\" : \"1652166642127-jf-htwbild5.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7cad8ae16b1ba5f62f71\" }, \"length\" : 984341 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:54:37.954Z\" }, \"filename\" : \"1652194477890-jf-htwbild1.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7cdf8ae16b1ba5f62f78\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:55:27.23Z\" }, \"filename\" : \"1652194527176-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7d0b8ae16b1ba5f62f82\" }, \"length\" : 117492 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:56:11.84Z\" }, \"filename\" : \"1652194571822-jf-htwbild3.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7d398ae16b1ba5f62f86\" }, \"length\" : 1038579 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:56:57.214Z\" }, \"filename\" : \"1652194617191-jf-htwbild4.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7d608ae16b1ba5f62f8d\" }, \"length\" : 25449 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:57:36.11Z\" }, \"filename\" : \"1652194656102-jf-htwbild5.jpg\" , \"contentType\" : \"image/jpeg\" } Die Collection posts.chunks ist sehr gro\u00df, deshalb hier zum Download .","title":"Backend"},{"location":"backend/#backend-rest-server","text":"Ehe wir uns der IndexedDB-API zuwenden, erstellen wir zun\u00e4chst eine \"richtige\" Datenbank f\u00fcr unsere Posts. F\u00fcr diese Datenbank stellen wir die Implementierung einer Schnittstelle bereit, so dass wir die wesentlichen Datenbankanfragen dar\u00fcber ausf\u00fchren k\u00f6nnen. Diese wesentlichen Datenbankfragen werden mit CRUD abgek\u00fcrzt, f\u00fcr C reate, R ead, U pdate und D elete. Das bedeutet, wir implementieren Funktionalit\u00e4ten, mit denen wir einen neuen post in die Datenbank einf\u00fcgen ( create ), aus der Datenbank auslesen ( read ), in der Datenbank aktualisieren ( update ) und aus der Datenbank l\u00f6schen ( delete ) k\u00f6nnen. Die Schnittstelle, die wir implementieren, ist eine sogenannte REST-API . REST steht f\u00fcr Representational State Transfer und basiert auf einigen wenigen Prinzipien: Alles wird als eine Ressource betrachtet, z.B. post . Jede Ressource ist durch URIs ( Uniform Resource Identifiers ) eindeutig identifizierbar, z.B. http://localhost/posts . Es werden die Standard-HTTP-Methoden verwendet, also GET , POST , PUT , UPDATE . Ressourcen k\u00f6nnen in verschiedenen Formaten vorliegen, z.B. in HTML , XML , JSON , ... Die Kommunikation ist zustandslos . Jede einzelne HTTP-Anfrage wird komplett isoliert bearbeitet. Es gibt keinerlei Anfragehistorie. Das bedeutet, wir erstellen ein Backend (einen REST-Server), an den HTTP-Anfragen mit der eindeutig identifizierbaren Ressource gestellt werden. Das Backend erstellt daraus die entsprechende SQL-Query. Das Resultat der Datenbankanfrage wird im JSON - oder HTML - oder XML - oder in einem anderen Format bereitsgestellt. Prinzipiell gibt es also ein Mapping von HTTP-Anfragen auf SQL-Anfragen: CRUD SQL MongoDB HTTP create INSERT insertOne(), insertMany() POST read SELECT findOne(), find() GET update UPDATE updateOne(), updateMany() PUT (oder PATCH) delete DELETE deleteOne(), deleteMany() DELETE Zur Unterscheidung zwischen PUT und PATCH siehe z.B. hier oder hier . Wir wollen uns ein Backend erstellen, \u00fcber das wir unsere Daten verwalten. Dazu \u00fcberlegen wir uns zun\u00e4chst ein paar sogenannte Endpunkte (siehe Prinzipien von REST oben) und die Zugriffsmethoden, mit denen wir auf unsere Daten zugreifen wollen. Methode URL Bedeutung GET /posts hole alle Datens\u00e4tze GET /posts/11 hole den Datensatz mit der id=11 POST /posts f\u00fcge einen neuen Datensatz hinzu PUT /posts/11 \u00e4ndere den Datensatz mit der id=11 DELETE /posts/11 l\u00f6sche den Datensatz mit der id=11 Der Wert der id ist nat\u00fcrlich nur ein Beispiel. Es soll f\u00fcr alle id -Werte funktionieren, die in unserem Datensatz enthalten sind. Korrekterweise beschreiben wir die Endpunkte mit variabler id besser durch /posts/:id oder /posts/{id} .","title":"Backend - REST-Server"},{"location":"backend/#ein-nodejs-projekt-mit-express","text":"Wir starten damit, uns ein node.js -Projekt zu erstellen. Dazu erstellen wir uns zun\u00e4chst einen Ordner backend , wechseln in diesen Ordner und f\u00fchren dann npm init aus: mkdir backend cd backend npm init Sie werden ein paar Sachen gefragt. Im Prinzip k\u00f6nnen Sie immer Enter dr\u00fccken, au\u00dfer beim entry point . Dort k\u00f6nnen Sie gleich server.js eingeben. Sie k\u00f6nnen das aber auch noch sp\u00e4ter in der package.json \u00e4ndern. This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See ` npm help init ` for definitive documentation on these fields and exactly what they do . Use ` npm install <pkg> ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: ( backend ) version: ( 1 .0.0 ) description: Backend REST-API entry point: ( index.js ) server.js test command: git repository: keywords: rest api backend mongodb author: J. Freiheit license: ( ISC ) About to write to /Users/jornfreiheit/Sites/IKT22/05_Backend/00_skript/backend/package.json: { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" } , \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ] , \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" } Is this OK? ( yes ) Die package.json wurde erstellt. Nun ben\u00f6tigen wir noch das Modul Express . Express bietet uns eine unkomplizierte Middleware f\u00fcr die Weiterverwaltung von http -Anfragen an die Datenbank und zur\u00fcck. npm install express --save Die Option --save muss eigentlich nicht mehr angegeben werden, aber unter Express steht es noch so. Sie erhalten eine Meldung in der Form: % npm install express --save added 57 packages, and audited 58 packages in 887ms 7 packages are looking for funding run ` npm fund ` for details found 0 vulnerabilities In der package.json wurde die entsprechende Abh\u00e4ngigkeit eingetragen: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" } }","title":"Ein Node.js-Projekt mit Express"},{"location":"backend/#serverjs-erstellen-und-implementieren","text":"\u00d6ffnen Sie nun das backend -Projekt in Ihrer IDE und erstellen Sie sich dort eine Datei server.js mit folgendem Inhalt: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const express = require ( 'express' ); const routes = require ( './routes' ); const app = express (); const PORT = 3000 ; app . use ( express . json ()); app . use ( '/' , routes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }); Das bedeutet, wir importieren express (Zeile 1 ), erzeugen uns davon ein Objekt und speichern dieses in der Variablen app (Zeile 4 ). Wir legen in einer Konstanten PORT die Portnummer 3000 fest (Zeile 5 - die Portnummer k\u00f6nnen Sie w\u00e4hlen). Das backend ist somit unter http://localhost:3000 verf\u00fcgbar. Das eigentliche Starten des Webservers erfolgt in den Zeilen 10-16 durch Aufruf der listen() -Funktion von express . Die Syntax der listen() -Funktion ist generell wie folgt: app.listen ([ port [ , host [ , backlog ]]][ , callback ]) Wir \u00fcbergeben als ersten Parameter die PORT -Nummer ( 3000 ) und als zweiten Parameter eine (anonyme) Funktion als sogenannten callback . Callbacks sind hier n\u00e4her erl\u00e4utert. Die anonyme Funktion wird durch die listen() -Funktion aufgerufen. Sollte ein Fehler aufgetreten sein (z.B. wenn der Port bereits belegt ist), wird der anonymen Funktion ein error -Objekt \u00fcbergeben. Ist das der Fall, wird der Fehler auf der Konsole ausgegeben. Wird der anonymen Funktion kein Objekt \u00fcbergeben, wurde der Webserver korrekt gestartet und die entsprechende Meldung erscheint auf der Konsole. Beachten Sie auch die verwendete Syntax ${PORT} im sogenannte template literal . Beachten Sie, dass template literals nicht in einfachen ( ' ) oder doppelten ( \" ) Anf\u00fchrungsstrichen stehen, sondern in ` ( backticks ).","title":"server.js erstellen und implementieren"},{"location":"backend/#router","text":"Noch l\u00e4sst sich unser Programm aber nicht ausf\u00fchren. Wir ben\u00f6tigen im Projektordner noch eine Datei routes.js . Diese wird n\u00e4mlich in der server.js bereits in Zeile 2 eingebunden und in Zeile 8 verwendet. routes.js 1 2 3 4 5 6 7 8 9 10 const express = require ( 'express' ); const router = express . Router (); // eine GET-Anfrage router . get ( '/' , async ( req , res ) => { res . send ({ message : \"Hello FIW!\" }); }); module . exports = router ; Beim Router handelt es sich um eine Middleware (siehe hier ), die die Routen verwaltet und request -Objekte an die entsprechende Routen weiterleitet und response -Objekte empf\u00e4ngt. In unserer routes.js haben wir zun\u00e4chst eine GET -Anfrage implementiert (Zeile 5 ). Das request -Objekt hei\u00dft hier req . Das verwenden wir aber gar nicht. Das respones -Objekt hei\u00dft hier res und wird durch die Anfrage erzeugt. Wir senden in der response ein JavaScript-Objekt zur\u00fcck, das einen Schl\u00fcssel message enth\u00e4lt. In der server.js haben wir mit app.use(express.json()) (Zeile 7 ) angegeben, dass alle JavaScript-Objekte in der response nach JSON umgewandelt werden sollen. Wenn nun die URL localhost:3000 aufgerufen wird, dann wird ein request ausgel\u00f6st, den wir hier mit Hello FIW! als response beantworten (Zeilen 5-8 ). Wichtig ist, dass wir router mit module.exports exportieren, damit es von anderen Modulen importiert und genutzt werden kann. Siehe dazu z.B. hier . Meine Empfehlung ist, (noch) nicht das neue ESM6-Format zu nutzen! Noch \"l\u00e4uft\" unser Backend aber noch nicht. Wir m\u00fcssen es erst starten.","title":"Router"},{"location":"backend/#starten-des-projektes-und-installation-von-nodemon","text":"Das Projekt l\u00e4sst sich nun starten. Wir geben dazu im Terminal im backend -Ordner node server.js ein. Im Terminal erscheint server running on http://localhost:3000 und wenn Sie im Browser die URL http://localhost:3000/ eingeben, wird dort angezeigt. Sie k\u00f6nnen auch Postman \u00f6ffnen und http://localhost:3000 eintragen ( GET -Methode): Wann immer wir jetzt jedoch etwas an der Implementierung \u00e4ndern, m\u00fcssen wir im Terminal zun\u00e4chst den Webserver mit Strg-C // bzw. Control-C stoppen, um ihn dann wieder mit node server.js zu starten. Um das zu umgehen, gibt es das Paket nodemon . Da es nur sinnvoll w\u00e4hrend der Entwicklung eingesetzt werden kann (und sollte), installieren wir es als eine development dependency : npm install --save-dev nodemon Die package.json sieht daraufhin so aus: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Zur Verwendung von nodemon f\u00fcgen wir in die package.json unter \"scripts\" noch die Eigenschaft watch (frei gew\u00e4hlt) und den dazugeh\u00f6rigen Wert nodemon server.js ein: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Nun l\u00e4sst sich die Anwendung mithilfe von nodemon per npm run watch starten und muss auch nicht mehr gestoppt und neu gestartet werden, wenn \u00c4nderungen an der Implementierungen durchgef\u00fchrt wurden. Die Ausgabe im Terminal nach Eingabe von npm run watch ist ungef\u00e4hr so: > backend@1.0.0 watch > nodemon ./server.js [ nodemon ] 2 .0.16 [ nodemon ] to restart at any time, enter ` rs ` [ nodemon ] watching path ( s ) : *.* [ nodemon ] watching extensions: js,mjs,json [ nodemon ] starting ` node ./server.js ` server running on http://localhost:3000 Hier nur zum Verst\u00e4ndnis. Angenommen, wir \u00e4ndern bspw. in der server.js die Zeile 8 zu app . use ( '/api' , routes ); , dann w\u00fcrden alle Routen, die wir in routes.js definieren, unter localhost:3000/api verf\u00fcgbar sein. Wenn wir dann also z.B. in der routes.js die Zeile 5 zu router . get ( '/fiw' , async ( req , res ) => { \u00e4ndern, dann ist der GET-Endpunkt localhost:3000/api/fiw .","title":"Starten des Projektes und Installation von nodemon"},{"location":"backend/#mongoose-installieren","text":"MongoDB ist die am meisten verwendete NoSQL (not only SQL) Datenbank. Sie basiert nicht auf Relationen, Tabellen und ihren Beziehungen zueinander (ist also keine relationale Datenbank), sondern speichert Dokumente in JSON-\u00e4hnlichem Format. Die Community Edition der MongoDB ist Open Source und kostenlos verf\u00fcgbar. Sollten Sie mit Visual Studio Code arbeiten, sollten Sie sich am besten die MongoDB for VS Code -Ereiterung installieren. Zur Verwendung von MongoDB im Backend verwenden wir das Modul Mongoose . Wir installieren Mongoose mithilfe von npm install mongoose --save In die package.json wird das Paket und die entsprechende Abh\u00e4ngigkeit eingetragen: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"express\" : \"^4.18.0\" , \"mongoose\" : \"^6.3.1\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Mongoose stellt eine einfach zu verwendende Schnittstelle zwischen Node.js und MongoDB bereit. Die MongoDB ben\u00f6tigen wir aber trotzdem (wir k\u00f6nnten jedoch auch eine Cloud von MongoDB oder z.B. mlab.com verwenden). Bevor wir uns mit der MongoDB verbinden, erstellen wir zun\u00e4chst noch eine Datenbank.","title":"Mongoose installieren"},{"location":"backend/#mongodb-compass","text":"Um sich Ihre MongoDB-datenbanken anzuschauen, empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach.","title":"MongoDB Compass"},{"location":"backend/#dotenv-fur-sichere-zugangsdaten","text":"F\u00fcr die \"geheimen\" Zugangsdaten (die jetzt noch gar nicht \"geheim\" sind) verwenden wir das dotenv -Paket: npm install dotenv --save Im Projektordner erstellen wir und eine Datei .env (mit vorangestelltem Punkt!) und schreiben darin: .env 1 DB_CONNECTION = mongodb : //127.0.0.1:27017/posts Beachten Sie, dass der Wert nicht in Hochkomma steht und dass auch kein Semikolon folgt! Wir f\u00fcgen dotenv in die server.js ein und greifen mithilfe von process.env.DB_CONNECTION auf den Wert von DB_CONNECTION zu: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const express = require ( 'express' ); const routes = require ( './routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); const PORT = 3000 ; app . use ( express . json ()); app . use ( '/' , routes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `Server started and listening on port ${ PORT } ... ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); In Zeile 4 wird das dotenv -Paket importiert. Mithilfe der config() -Funktion wird die .env -Datei eingelesen. Auf die in der .env -Datei hinterlegten Schl\u00fcssel-Werte-Paare (mit = dazwischen) kann dann mittels process.env.<Schl\u00fcssel> zugegriffen werden (siehe Zeile 21 ). Beachten Sie, die .env -Datei in die .gitignore einzutragen. Die .env -Datei sollte nicht committed werden!","title":"Dotenv f\u00fcr sichere Zugangsdaten"},{"location":"backend/#ein-model-erstellen","text":"Mongoose ist Schema-basiert. Ein Schema kann man sich wie ein Datenmodell vorstellen. Tats\u00e4chlich wird es verwendet, um ein entsprechendes Mongoose-Model zu erstellen. Ein Schema wird unter Aufruf des Konstruktors ( new Schema() ) in Mongoose erstellt. Unter Verwendung des Schemas wird dann mithilfe der model() -Funktion das Datenmodell erzeugt. Wir werden im Folgenden zeigen, wie ein Schema f\u00fcr posts erstellt wird. Das Datenmodell hei\u00dft dann Post . Um sp\u00e4ter auch weitere Schemata, z.B. f\u00fcr user o.\u00e4. zu entwicklen und diese zu trennen, erstellen wir das Schema in einem eigenen Ordner models . Das bedeutet, wir erstellen im Projektordner ein Ordner models und darin eine Datei models/posts.js Die Datei posts.js bekommt folgenden Inhalt: models/posts.js const mongoose = require ( 'mongoose' ); const schema = new mongoose . Schema ({ title : String , location : String , image_id : String }); module . exports = mongoose . model ( 'Post' , schema ); Weiterf\u00fchrende Informationen zu Mongoose-Models finden Sie z.B. hier . Das Thema Schema wird z.B. hier n\u00e4her erl\u00e4utert.","title":"Ein Model erstellen"},{"location":"backend/#zugriffe-auf-die-datenbank","text":"Nun haben wir alles, was wir ben\u00f6tigen, um unsere Anfragen zu implementieren. Wir nutzen den express.Router , um die Routen zu definieren und k\u00f6nnen mithilfe des Mongoose-Models auf die MongoDB zugreifen. Wir werden nun sukzessive alle Anfragen in die routes.js einf\u00fcgen.","title":"Zugriffe auf die Datenbank"},{"location":"backend/#r-read-all","text":"Wir beginnen mit der Anfrage, alle Daten aus der Datenbank auszulesen. F\u00fcr die MongoDB erfolgt dies mit der Funktion find() . In routes.js \u00e4ndern wir unsere GET -Anfrage wie folgt: routes.js 1 2 3 4 5 6 7 8 9 10 11 12 const express = require ( 'express' ); const router = express . Router (); const Post = require ( './models/posts' ); // GET all posts router . get ( '/posts' , async ( req , res ) => { const allPosts = await Post . find (); console . log ( allPosts ); res . send ( allPosts ); }); module . exports = router ; Beachten Sie, dass wir dazu nun das Post -Model in die routes.js einbinden (Zeile 3 ). Die Route wird mit localhost:3000/posts definiert. Die anonyme Callback-Funktion enth\u00e4lt noch zwei Schl\u00fcsselw\u00f6rter: async und await . Die Funktion find() ist ein Promise (siehe dazu hier ). Die Funktion find() wird asynchron ausgef\u00fchrt und \"irgendwann\" ist entweder das Ergebnis dieser Funktion verf\u00fcgbar oder die Funktion gibt einen Fehler zur\u00fcck. Auf eines der beiden wird gewartet ( await ). Nur eine als async deklarierte Funktion darf einen await -Aufruf enthalten (siehe dazu z.B. hier ). Die Ausgabe der Werte auf die Konsole (Zeile 8 ) ist nat\u00fcrlich nicht erforderlich und Sie k\u00f6nnen sie auch l\u00f6schen, wenn Sie wollen. Wenn Sie nun in Postman GET http://localhost:3000/posts aufrufen, erscheinen alle Eintr\u00e4ge aus der Datenbank. Allerdings haben wir dort noch keine Eintr\u00e4ge. Wir bekommen deshalb ein leeres Array [] zur\u00fcck.","title":"R - read all"},{"location":"backend/#c-create","text":"Als n\u00e4chstes implementieren wir einen Endpunkt, an dem wir einen neuen Datensatz in die Datenbank anlegen k\u00f6nnen. Daf\u00fcr gibt es die http-Methode POST . Wir f\u00fchren also nicht mehr eine GET -, sondern eine POST -Anfrage durch. Bei dieser POST -Anfrage wird der neue Datensatz an den Webserver mitgeschickt. Dies erfolgt im body des request -Objektes. Das Schreiben des Datensatzes in die Datenbank erfolgt mithilfe der save() -Funktion von MongoDB. routes.js 12 13 14 15 16 17 18 19 20 21 // POST one post router . post ( '/posts' , async ( req , res ) => { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . body . image_id }) await newPost . save (); res . send ( newPost ); }); In den Zeilen 15-17 werden die Daten aus dem body des request -Objektes ausgelesen und mit diesen Daten ein neues Post -Objekt erzeugt. Dieses neue Post -Objekt ( newPost ) wird in Zeile 19 in die Datenbank gespeichert und in Zeile 20 als response zur\u00fcckgeschickt. Nun geben wir in Postman POST http://localhost:3000/posts ein und bef\u00fcllen den Body z.B. mit: 1 2 3 4 5 { \"title\" : \"H-Geb\u00e4ude\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"test\" } Achten Sie darauf, dass in der zweiten Men\u00fczeile rechts JSON ausgew\u00e4hlt ist (im Bild blau) - nicht Text . Wir klicken auf Send und es erscheint: Schauen Sie auch in MongoDB Compass nach, ob der Datensatz dort erscheint:","title":"C - create"},{"location":"backend/#r-read-one","text":"Wir erweitern die routes.js um einen Endpunkt, der uns f\u00fcr eine gegebene id den entsprechenden Datensatz zur\u00fcckliefert. Die _id werden von MongoDB automatisch vergeben und sind recht kryptisch, also z.B. \"626bdb36cd1af60df758d300\" . Wir k\u00f6nnen nat\u00fcrlich nach jedem beliebigen Wert f\u00fcr jeden Schl\u00fcssel in der Datenbank suchen. Wir nehmen hier beispielhaft die _id . Die id wird aus der URL des Endpunktes ausgelesen, d.h. wenn wir bspw. den Endpunkt GET http://localhost:3000/posts/626bdb36cd1af60df758d300 eingeben, dann soll der Datensatz mit der _id: 626bdb36cd1af60df758d300 im JSON-Format zur\u00fcckgegeben werden. Wir nutzen dazu parametrisierte Routen und lesen die id aus der Parameterliste aus. Paremtrisierte Routen werden per : und dann den Namen des Parameters (hier id ) erstellt. Um dann den Wert des Parametrs id aus der Parameterliste auszulesen, wird params verwendet. Im folgenden Code lassen wir req.params auf die Konsole ausgeben, um die Funktionsweise zu erl\u00e4utern. Diese Ausgabe kann nat\u00fcrlich gel\u00f6scht werden (Zeile 27 ). routes.js 23 24 25 26 27 28 29 30 31 32 33 34 35 // POST one post via id router . get ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }); console . log ( req . params ); res . send ( post ); } catch { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); } }); Zum Finden eines einzelnen Datensatzes wird in MongoDB die Funktion findOne() verwendet (siehe hier ). Wird der Datensatz gefunden, d.h. existiert die entsprechende _id , dann wird dieser in der response zur\u00fcckgesendet (Zeile 28 ). Existiert er nicht, wird der HTTP-Statuscode 404 gesendet (Zeile 30 ) und ein JSON mit der error -Nachricht Post does not exist! (Zeile 31 ). Nach Neustart des Servers geben wir in Postman z.B. GET http://localhost:3000/posts/626bdb36cd1af60df758d300 ein (bei Ihnen sind die _id -Werte andere!) und erhalten: Probieren Sie auch einmal GET http://localhost:3000/posts/0 aus, um die Fehlermeldung als JSON zu sehen.","title":"R - read one"},{"location":"backend/#u-update","text":"Um einen bereits existierenden Datensatz zu \u00e4ndern, kann entweder die HTTP-Anfrage PUT oder PATCH verwendet werden. Zur Unterscheidung zwischen PUT und PATCH siehe z.B. hier oder hier . Um einen Datensatz in der MongoDB zu \u00e4ndern, stehen prinzipiell mehrere Funktionen zur Verf\u00fcging: updateOne() : \u00e4ndert einzelne (oder alle) Teile eines Datensatzes und sendet die _id zur\u00fcck, falls ein neur Datensatz angelegt wurde, findOneAndUpdate() : \u00e4ndert einzelne (oder alle) Teile eines Datensatzes und sendet den kompletten Datensatz zur\u00fcck, replaceOne() : \u00e4ndert den kompletten Datensatz. In der folgenden Implementierung haben wir uns f\u00fcr die HTTP-Anfragemethode PATCH und f\u00fcr die MongoDB-Funktion updateOne() entschieden. Diese Funktion erwartet als ersten Parameter einen <filter> , d.h. die Werte, nach denen nach einem Datensatz gesucht werden soll. Im folgenden Beispiel ist der Filter die _id . Dazu wird erneute ein Parameter id f\u00fcr die URL definiert. Der zweite Parameter der updateOne() -Funktion sind die zu \u00e4ndernden Werte f\u00fcr diesen Datensatz. In der folgenden Implementierung werden diese zu \u00e4ndernden Werte als ein JSON dem body des request -Objektes \u00fcbergeben. Um zu erm\u00f6glichen, dass ein, zwei oder drei Schl\u00fcssel-Werte-Paare in diesem JSON enthalten sein k\u00f6nnen, pr\u00fcfen wir die Eintr\u00e4ge im body und setzen daraus ein neues member -Objekt zusammen, wenn es bereits in der Datenbank existiert (deshalb zun\u00e4chst findOne() ): router.js 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // PATCH (update) one post router . patch ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) if ( req . body . title ) { post . title = req . body . title } if ( req . body . location ) { post . location = req . body . location } if ( req . body . image_id ) { post . image_id = req . body . image_id } await Post . updateOne ({ _id : req . params . id }, post ); res . send ( post ) } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); Wir k\u00f6nnen diese Funktion in Postman ausprobieren, indem wir im body z.B. das JSON 1 2 3 { \"image_id\" : \"test_neu\" } mit unserem Request \u00fcbergeben und PATCH http://localhost:3000/posts/626bdb36cd1af60df758d300 w\u00e4hlen (bei Ihnen eine andere id !). Der Datensatz mit der _id=626bdb36cd1af60df758d300 wird dann aktualisiert. Schauen Sie auch in der Datenbank nach (z.B. in MongoDB Compass) und w\u00e4hlen auch ruhig nochmal GET http://localhost:3000/posts (z.B. in Postman).","title":"U - update"},{"location":"backend/#d-delete-one","text":"Jetzt implementieren wir noch den Endpunkt, um einen Datensatz zu l\u00f6schen. Dazu werden die HTTP-Anfragemethode DELETE und die MongoDB-Funktion deleteOne() verwendet. Im folgenden Beispiel wird der Datensatz erneut \u00fcber die _id ermittelt und daf\u00fcr erneut die parametrisierte URL ausgelesen: routes.js 87 88 89 90 91 92 93 94 95 96 // DELETE one post via id router . delete ( '/posts/:id' , async ( req , res ) => { try { await Post . deleteOne ({ _id : req . params . id }) res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); Wenn wir nun in Postman z.B. DELETE http://localhost:3000/members/626bdb36cd1af60df758d300 w\u00e4hlen (bei Ihnen eine andere id !), wird der Datensatz mit der _id=626bdb36cd1af60df758d300 aus der Datenbank gel\u00f6scht. Hier nochmal die vollst\u00e4ndige routes.js : routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 const express = require ( 'express' ); const router = express . Router (); const Post = require ( './models/posts' ); // GET all posts router . get ( '/posts' , async ( req , res ) => { const allPosts = await Post . find (); console . log ( allPosts ); res . send ( allPosts ); }); // POST one post router . post ( '/posts' , async ( req , res ) => { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . body . image_id }) await newPost . save (); res . send ( newPost ); }); // POST one post via id router . get ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }); console . log ( req . params ); res . send ( post ); } catch { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); } }); // PATCH (update) one post router . patch ( '/posts/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) if ( req . body . title ) { post . title = req . body . title } if ( req . body . location ) { post . location = req . body . location } if ( req . body . image_id ) { post . image_id = req . body . image_id } await Post . updateOne ({ _id : req . params . id }, post ); res . send ( post ) } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); // DELETE one post via id router . delete ( '/posts/:id' , async ( req , res ) => { try { await Post . deleteOne ({ _id : req . params . id }) res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); module . exports = router ;","title":"D - delete one"},{"location":"backend/#cross-origin-resource-sharing-cors","text":"Die Same Origin Policy (SOP) ist ein Sicherheitskonzept, das clientseitig Skriptsprachen (also z.B. JavaScript oder CSS) untersagt, Ressourcen aus verschiedenen Herkunften zu verwenden, also von verschiedenen Servern. Dadurch soll verhindert werden, dass fremde Skripte in die bestehende Client-Server-Kommunikation eingeschleust werden. Gleiche Herkunft (origin) bedeutet, dass das gleiche Protokoll (z.B. http oder https ), von der gleichen Domain (z.B. localhost oder htw-berlin ) sowie dem gleichen Port (z.B. 80 oder 4200 ) verwendet werden. Es m\u00fcssen alle drei Eigenschaften \u00fcbereinstimmen. Mit dem Aufkommen von Single Page Applications und dem darin ben\u00f6tigten AJAX kam jedoch der Bedarf auf, die SOP aufzuweichen. Es sollte m\u00f6glich sein, dass z.B. JavaScript sowohl client-seitig das DOM \u00e4ndert als auch einen Request an den Server (das Backend) sendet. Der Kompromiss, der daf\u00fcr gefunden wurde, nennt sich Cross-Origin Resource Sharing (CORS) . Damit ist es m\u00f6glich, f\u00fcr einige oder alle Anfragen zu definieren, dass sie im Sinne der SOP trotzdem erlaub sein sollen. Um CORS f\u00fcr Ihr Backend zu aktivieren, wechseln Sie im Terminal in Ihren backend -Ordner und geben dort npm install cors ein. \u00d6ffnen Sie dann die server.js und f\u00fcgen Sie die hervorgehobenen Zeilen ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 const express = require ( 'express' ); const cors = require ( 'cors' ); const routes = require ( './routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); const PORT = 3000 ; app . use ( express . json ()); // enable cors for all requests app . use ( cors ()); app . use ( '/' , routes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); Wenn Sie z.B. nur die get -Anfrage teilen wollen, dann w\u00e4hlen Sie nicht app.use(cors()); , sondern app . get ( \"/\" , cors (), ( req , res ) => { res . json ({ message : \"Hello FIW!\" }); }); Mehr zum CORS-Paket von node.js bzw. express finden Sie hier . Success Das bis hier erstellte Backend ist unter https://github.com/jfreiheit/IKT-PWA-Backend.git verf\u00fcgbar.","title":"Cross-Origin Resource Sharing (CORS)"},{"location":"backend/#erweiterung-um-das-speichern-von-bildern","text":"Bis jetzt haben wir nur Daten im JSON-Format zwischen Frontend und Backend ausgetauscht und auch nur solche Daten in der MongoDB gespeichert. Bilder (und auch andere Dateien) sind FormData-Objects im multipart/form-data -Format. Zur Behandlung solcher Daten verwenden wir ein Middleware f\u00fcr unser Backend, namens Multer . Hint Wenn Sie nur am Code f\u00fcr unser Backend interessiert sind, dann k\u00f6nnen Sie auch direkt zu Zusammenf\u00fchren der Funktionalit\u00e4ten springen. Im Folgenden werden die Entstehung aber n\u00e4her erl\u00e4utert und verschiedene Varianten diskutiert. MongoDB speichert Daten bis zu einer Gr\u00f6\u00dfe von 16Mb im Bin\u00e4rformat. Um auch gr\u00f6\u00dfere Dateien (Bilder, Videos, pdf, ...) speichern zu k\u00f6nnen, werden die Dateien in chunks zerlegt und k\u00f6nnen dann aus diesen St\u00fccken wieder zusammengesetzt werden. Daf\u00fcr gibt es in der MongoDB eine GridFS -Spezifikation (siehe auch hier oder hier ). Zur Verwendung von GridFS gibt es die beiden Pakte multer-gridfs-storage und gridfs-stream . Wir installieren im Backend-Projekt alle drei Pakete und zeigen im Folgenden deren Verwendung: npm install multer multer-gridfs-storage gridfs-stream Die package.json sollte nun ungef\u00e4hr so aussehen: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/jfreiheit/IKT-PWA-Backend.git\" }, \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"dotenv\" : \"^16.0.0\" , \"express\" : \"^4.18.0\" , \"gridfs-stream\" : \"^1.1.1\" , \"mongoose\" : \"^6.3.1\" , \"multer\" : \"^1.4.4\" , \"multer-gridfs-storage\" : \"^5.0.2\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Wir k\u00fcmmern uns nun zun\u00e4chst darum, Bilder in die MongoDB hochzuladen .","title":"Erweiterung um das Speichern von Bildern"},{"location":"backend/#upload-von-bildern","text":"F\u00fcr den Upload der Bilder erstellen wir zun\u00e4chst einen Ordner middleware und darin eine Datei upload.js . In dieser Datei wird unter Verwendung von Multer ein GridFsStorage eingerichtet. Die zu verwendende Collection benennen wir hier fileupload (siehe bucketName ). Sie k\u00f6nnen diesen Namen frei w\u00e4hlen. Beachten Sie dann aber im Folgenden \u00fcberall die Verwendung von fileupload (in der MongoDB entstehen die Collections fileupload.files und fileupload.chunks - siehe z.B. hier oder hier ). middleware/upload.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const multer = require ( \"multer\" ); const { GridFsStorage } = require ( \"multer-gridfs-storage\" ); const storage = new GridFsStorage ({ url : process . env . DB , options : { useNewUrlParser : true , useUnifiedTopology : true }, file : ( req , file ) => { const match = [ \"image/png\" , \"image/jpeg\" ]; if ( match . indexOf ( file . mimetype ) === - 1 ) { console . log ( 'file.mimetype === -1' ) return ` ${ Date . now () } -jf- ${ file . originalname } ` ; } console . log ( 'store' ); return { bucketName : 'posts' , filename : ` ${ Date . now () } -jf- ${ file . originalname } ` , }; }, }); module . exports = multer ({ storage }); Beachten Sie, dass wir beim Upload der Bilder f\u00fcr diese Bilder Dateinamen mithilfe von ${Date.now()}-jf-${file.originalname} erstellen bzw. festlegen. Damit diese Dateinamen eindeutig sind, wird mithilfe von Date.now() der aktuelle Zeitstempel verwendet. Der String -jf- in der Mitte kann nat\u00fcrlich auch durch Ihre Initialen ersetzt (oder weggelassen) werden. Au\u00dferdem wird auch noch der originale Dateiname verwendet. Insgesamt sollte sichergestellt werden, dass die Dateinamen eindeutig sind (deshalb auch Date.now() ). In Zeile 10 werden die Dateitypen festgelegt, die akzeptiert werden, hier png und jpeg . Diese Liste kann erweitert oder eingegrenzt werden. Diese Middleware nutzen wir nun f\u00fcr den POST -Request des Bildes und erstellen einen Ordner routes und darin eine Datei upload.routes.js mit folgendem Inhalt: routes/upload.route.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const express = require ( 'express' ); const upload = require ( '../middleware/upload' ); const router = express . Router (); router . post ( '/' , upload . single ( 'file' ), ( req , res ) => { // req.file is the `file` file if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }); } else { console . log ( 'req.file' , req . file ); const imgUrl = `http://localhost:4000/download/ ${ req . file . filename } ` ; return res . status ( 201 ). send ({ url : imgUrl }); } }) module . exports = router ; In Zeile 5 wird die multer-Middleware mit update.single('file') aufgerufen. Neben der Funktion .single(fieldname) stehen auch die Funktionen .array(fieldname[, maxCount]) und .fields(field) zur Verf\u00fcgung, um gleichzeitig mehrere Dateien hochzuladen (siehe multer ). Als Response wird die URL zur\u00fcckgegeben, unter der das Bild heruntergeladen werden kann ( http://localhost:4000/download/${req.file.filename} ).","title":"Upload von Bildern"},{"location":"backend/#routen-andern-und-einbinden","text":"In der urspr\u00fcnglichen Implementierung hatten wir die Datei routes.js noch im Projektordner gehabt. Wir benennen diese in posts.routes.js um und schieben sie ebenfalls in den routes -Ordner. Beachten Sie, dass Sie dadurch in der server.js auch den Import auf const routes = require('./routes/posts.routes'); \u00e4ndern m\u00fcssen. Da wir nun aber auch die upload -Route einbinden, \u00e4ndern wir gleich mehrere Sachen. Zun\u00e4chst wird der urspr\u00fcngliche routes zu postRoutes und die generelle Route daf\u00fcr wird /posts : server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); const PORT = 3000 ; app . use ( express . json ()); // enable cors for all requests app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/img' , uploadRoutes ); app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); In der posts.routes.js kann nun aus den URLs der Endpunkte jeweils das /posts entfernt werden: routes/posts.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 const express = require ( 'express' ); const router = express . Router (); const Post = require ( '../models/posts' ); // GET all posts router . get ( '/' , async ( req , res ) => { const allPosts = await Post . find (); console . log ( allPosts ); res . send ( allPosts ); }); // POST one post router . post ( '/' , async ( req , res ) => { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . body . image_id }) await newPost . save (); res . send ( newPost ); }); // POST one post via id router . get ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }); console . log ( req . params ); res . send ( post ); } catch { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); } }); // PATCH (update) one post router . patch ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) if ( req . body . title ) { post . title = req . body . title } if ( req . body . location ) { post . location = req . body . location } if ( req . body . image_id ) { post . image_id = req . body . image_id } await Post . updateOne ({ _id : req . params . id }, post ); res . send ( post ) } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); // DELETE one post via id router . delete ( '/:id' , async ( req , res ) => { try { await Post . deleteOne ({ _id : req . params . id }) res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); module . exports = router ;","title":"Routen \u00e4ndern und einbinden"},{"location":"backend/#upload-mithilfe-von-postman","text":"Das Hochladen der Bilder kann nun bereits getestet werden. Starten Sie das Backend. \u00d6ffnen Sie Postman und geben Sie als URL http://localhost:3000/upload ein und w\u00e4hlen als Anfragemethode POST . Klicken Sie auf Body und markieren dann form-data : Geben Sie unter KEY den Schl\u00fcssel file ein (das wird manchmal vergessen und dann bekommen Sie einen multer -Fehler unexpected field !) und w\u00e4hlen Sie aus dem Dropdown-Men\u00fc File . Unter VALUE erscheint der Button Select Files . Klicken Sie darauf und w\u00e4hlen ein png - oder ein jpeg -Bild (kann auch .jpg sein) aus, das Sie hochladen wollen. Klicken Sie dann auf Send . Es erscheint: Ich habe in diesem Beispiel die Datei fiw.jpg hochgeladen. Wenn Sie sich die MongoDB anschauen, dann finden Sie darin die beiden Collections posts.files und posts.chunks . In posts.files sind die Metadaten des hochgeladenen Bildes zu finden, z.B. { \"_id\" : { \"$oid\" : \"627399fc6820d87a03418810\" }, \"length\" : 86584 , \"chunkSize\" : 261120 , \"uploadDate\" : { \"$date\" : \"2022-05-05T09:33:48.949Z\" }, \"filename\" : \"1651743228869-jf-fiw.jpg\" , \"contentType\" : \"image/jpeg\" } Die dazugeh\u00f6rige _id finden Sie auch in posts.chunks (k\u00f6nnen Sie sich in der mongosh mit db.posts.chunks.find({ _id: \"627399fc6820d87a03418810\" }) anschauen). Darin ist das Bild im Binary-Format gespeichert.","title":"Upload mithilfe von Postman"},{"location":"backend/#download-von-bildern","text":"F\u00fcr den Download der gespeicherten Bilder gehen wir \u00e4hnlich vor, wie beim Upload, ben\u00f6tigen daf\u00fcr aber nicht mehr die multer-Middleware , daf\u00fcr aber gridfs-stream . Wir erstellen im Ordner routes die Datei download.routes.js mit folgendem Inhalt: routes/download.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 const express = require ( 'express' ); const mongoose = require ( 'mongoose' ); const Grid = require ( \"gridfs-stream\" ); const router = express . Router (); const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); let gfs , gfsb ; connect . once ( 'open' , () => { // initialize stream gfsb = new mongoose . mongo . GridFSBucket ( connect . db , { bucketName : \"posts\" }); gfs = Grid ( connect . db , mongoose . mongo ); }); router . get ( '/:filename' , async ( req , res ) => { try { const cursor = await gfs . collection ( 'posts' ). find ({ filename : req . params . filename }); cursor . forEach ( doc => { console . log ( 'doc' , doc ); gfsb . openDownloadStream ( doc . _id ). pipe ( res ); }) } catch ( error ) { console . log ( 'error' , error ); res . send ( \"not found\" ); } }); module . exports = router ; GridFSBucket ist eine Klasse aus der Node.js-MongoDB-API . Diese h\u00e4tten wir auch schon f\u00fcr das Upload verwenden k\u00f6nnen (siehe z.B. hier ). Da wir \u00fcber den Dateinamen auf die Datei zugreifen wollen, ben\u00f6tigen wir zun\u00e4chst die entsprechende _id der Datei in der posts.chunks -Collection. Dazu greifen wir mithilfe von find() auf die posts.files -Collection zu und ermitteln die _id . Die find() -Funktion gibt einen sogenannten Cursor auf das Array aller gefundenen Datens\u00e4tze zur\u00fcck. Mithilfe von forEach() durchlaufen wir dieses Array (enth\u00e4lt aber nur einen Datensatz) und ermitteln die _id . Mit der openDownloadStream() -Funktion der GridFSBucket() -Klasse \u00f6ffnen wir den Download-Stream des Bildes und geben ihn als response res zur\u00fcck. Wir binden die download -Route nun noch in unsere server.js ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const downloadRoute = require ( './routes/download.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/image' , uploadRoutes ); app . use ( '/download' , downloadRoute ); app . listen ( process . env . PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ process . env . PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); });","title":"Download von Bildern"},{"location":"backend/#download-mithilfe-von-postman","text":"Der Test des GET http://localhost:3000/download/:filename -Endpunktes ist einfach. Dazu verwenden wir einfach die URL, die durch den Upload als Response zur\u00fcckgegeben wurde (im obigen Beispiel also \"http://localhost:3000/download/1651743228869-jf-fiw.jpg\" ): Geben Sie in Postman also Ihre URL ein, w\u00e4hlen GET und klicken Send . Es erscheint das Bild: Da es sich um die GET-Methode handelt, k\u00f6nnen Sie die URL http://localhost:3000/download/1651743228869-jf-fiw.jpg nat\u00fcrlich auch in den Browser eingeben und das Bild erscheint.","title":"Download mithilfe von Postman"},{"location":"backend/#download-als-base64-string","text":"Im oberen Beispiel wurde das Bild beim Download gestreamt. Wir betrachten nun die M\u00f6glichkeit, dass es als base64-String gesendet wird. Base64 ist ein Verfahren zur Kodierung von 8-Bit-Bin\u00e4rdaten (z.B. Bilder) in eine Zeichenfolge, die nur aus lesbaren, Codepage-unabh\u00e4ngigen ASCII-Zeichen besteht. Der String ist f\u00fcr ein Bild sehr lang. Er l\u00e4sst sich aber leicht in eine Bildquelle umwandeln, damit das Bild dann im Frontend dargestellt werden kann. Wir werden in der download.routes.js beide M\u00f6glichkeiten lassen (also sowohl den Stream als auch den base64-String). Deshalb passen wir die Routen der Endpunkte an. Die /show/:filename -Route ist f\u00fcr den Stream und die /send/:filename -Route f\u00fcr den base64 -String. Wir pr\u00e4sentieren zun\u00e4chst den Code und erl\u00e4utern ihn dann. Die download.routes.js sieht dann so aus: routes/download.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 const express = require ( 'express' ); const mongoose = require ( 'mongoose' ); const Grid = require ( \"gridfs-stream\" ); const multer = require ( 'multer' ); const router = express . Router (); const { GridFsStorage } = require ( 'multer-gridfs-storage' ) const { MongoClient } = require ( 'mongodb' ); require ( 'dotenv' ). config (); const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const dbName = \"posts\" ; let gfs , gfsb ; connect . once ( 'open' , () => { // initialize stream gfsb = new mongoose . mongo . GridFSBucket ( connect . db , { bucketName : \"posts\" }); gfs = Grid ( connect . db , mongoose . mongo ); // gfs.collection('file'); }); router . get ( '/show/:filename' , async ( req , res ) => { try { const cursor = await gfs . collection ( 'posts' ). find ({ filename : req . params . filename }); cursor . forEach ( doc => { console . log ( 'doc' , doc ); const id = doc . _id . valueOf (); console . log ( 'doc._id' , id ); gfsb . openDownloadStream ( doc . _id ). pipe ( res ); }) } catch ( error ) { console . log ( 'error' , error ); res . send ( \"not found\" ); } }); router . get ( '/send/:filename' , async ( req , res ) => { let fileName = req . params . filename ; MongoClient . connect ( process . env . DB_CONNECTION , ( err , client ) => { if ( err ){ return res . send ({ title : 'Uploaded Error' , message : 'MongoClient Connection error' , error : err . errMsg }); } const db = client . db ( dbName ); const collection = db . collection ( 'posts.files' ); const collectionChunks = db . collection ( 'posts.chunks' ); collection . find ({ filename : fileName }). toArray ( ( err , docs ) => { if ( err ){ return res . send ({ title : 'File error' , message : 'Error finding file' , error : err . errMsg }); } if ( ! docs || docs . length === 0 ){ return res . send ({ title : 'Download Error' , message : 'No file found' }); } else { //Retrieving the chunks from the db console . log ( 'docs[0]._id' , docs [ 0 ]. _id ) collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { if ( err ){ return res . send ({ title : 'Download Error' , message : 'Error retrieving chunks' , error : err . errmsg }); } if ( ! chunks || chunks . length === 0 ){ //No data found return res . send ({ title : 'Download Error' , message : 'No data found' }); } //console.log('chunks', chunks) //Append Chunks let fileData = []; for ( let chunk of chunks ){ console . log ( 'chunk' , chunk ) //This is in Binary JSON or BSON format, which is stored //in fileData array in base64 endocoded string format fileData . push ( chunk . data . toString ( 'base64' )); } //Display the chunks using the data URI format let finalFile = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); // console.log('finalFile', finalFile) res . send ({ title : 'Image File' , message : 'Image loaded from MongoDB GridFS' , imgurl : finalFile }); }) // toArray } // else }) // toArray }) // connect }) // get module . exports = router ; Die Funktion sieht auf den ersten Blick sehr umfangreich aus. Die meisten Zeilen sind jedoch f\u00fcr die Fehlerbehandlung. Wenn wir die Fehlerbahndlung (und die Kommentare und die Konsolenausgaben) entfernen, dann bleibt nur noch das \u00fcbrig: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 router . get ( '/send/:filename' , async ( req , res ) => { let fileName = req . params . filename ; MongoClient . connect ( process . env . DB_CONNECTION , ( err , client ) => { const db = client . db ( dbName ); const collection = db . collection ( 'posts.files' ); const collectionChunks = db . collection ( 'posts.chunks' ); collection . find ({ filename : fileName }). toArray ( ( err , docs ) => { collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { let fileData = []; for ( let chunk of chunks ){ fileData . push ( chunk . data . toString ( 'base64' )); } let finalFile = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); res . send ({ title : 'Image File' , message : 'Image loaded from MongoDB GridFS' , imgurl : finalFile }); }) // toArray }) // toArray }) // connect }) // get Wir verwenden hier also direkt das mongodb -Paket, das ist der MongoDB-Treiber f\u00fcr Node.js. Wir stellen eine Verbindung mit der Datenbank posts her (Zeile 5 ) und erstellen uns drei Variablen, eine f\u00fcr die Datenbank, eine f\u00fcr die posts.files -Collection und eine f\u00fcr die posts.chunks -Collection (siehe GridFS ). Dann suchen wir in der posts.files -Collection nach dem Dateinamen und ermitteln die zugeh\u00f6rige _id (speichern als files_id , erhalten wir aus docs[0]._id - siehe Zeile 13 ). Nun suchen wir alle chunks mit dieser files_id und erhalten ein chunks -Array. Dieses Array enth\u00e4lt die data des jeweiligen chunk . Mithilfe der JavaScript-Funktion toString('base64) wandeln wir diese Daten in einen String um und speichern die String in das Array fileData . Dieses Array ist also ein Array aus Strings. Unter der Verwendung der join('') -Funktion von JavaScript werden alle diese String-Eintr\u00e4ge zu einem String verbunden. Vor diesen String setzen wir noch \"data:image/jpeg;base64,\" (siehe z.B. hier ). Wenn wir nun ein Bild downloaden wollen, geben wir in Postman z.B. http://localhost:3000/download/1652090780364-jf-htwbild4.jpg ein und erhalten den sehr langen base64-String des Bildes. Die gleiche Funktionalit\u00e4t haben Sie auch, wenn Sie einen Online-Encoder verwenden, z.B. base64-image.de .","title":"Download als base64-String"},{"location":"backend/#delete-von-bildern","text":"Das L\u00f6schen der Bilder ist ganz \u00e4hnlich zum Download. Erstellen Sie die Datei routes/delete.route.js : routes/delete.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 const express = require ( 'express' ); const mongoose = require ( 'mongoose' ); const Grid = require ( \"gridfs-stream\" ); const router = express . Router (); const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); let gfs ; connect . once ( 'open' , () => { gfs = Grid ( connect . db , mongoose . mongo ); gfs . collection ( 'posts' ); }); router . delete ( '/:filename' , async ( req , res ) => { try { await gfs . collection ( 'posts' ). deleteOne ({ filename : req . params . filename }); res . send ({ \"message\" : \"deleted\" }); } catch ( error ) { console . log ( 'error' , error ); res . send ( \"An error occured.\" ); } }); module . exports = router ; und binden diese in die server.js ein: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const downloadRoute = require ( './routes/download.routes' ); const deleteRoute = require ( './routes/delete.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/image' , uploadRoutes ); app . use ( '/download' , downloadRoute ); app . use ( '/delete' , deleteRoute ); app . listen ( process . env . PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ process . env . PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); });","title":"Delete von Bildern"},{"location":"backend/#delete-mithilfe-von-postman","text":"Zum Testen verwenden Sie den gleichen Dateinamen wie beim Download und w\u00e4hlen als Anfragemethode DELETE .","title":"Delete mithilfe von Postman"},{"location":"backend/#zusammenfuhren-der-funktionalitaten","text":"Wir haben nun recht viele Routen und Endpunkte in unserem Backend. Wir wollen aber gerne, dass es nur die f\u00fcnf genannten Endpunkte gibt: Methode URL Bedeutung GET /posts hole alle Datens\u00e4tze GET /posts/11 hole den Datensatz mit der id=11 POST /posts f\u00fcge einen neuen Datensatz hinzu PUT /posts/11 \u00e4ndere den Datensatz mit der id=11 DELETE /posts/11 l\u00f6sche den Datensatz mit der id=11 Das bedeutet, wir binden den Upload und Download von Bildern nun in unsere posts -Routen ein. Die Funktionen werden dabei \"etwas\" umfangreicher.","title":"Zusammenf\u00fchren der Funktionalit\u00e4ten"},{"location":"backend/#zum-verstandnis","text":"Wir verwenden Multer und GridFs storage . Multer ist eine Middleware f\u00fcr Node.js, um Daten im multipart/form-data -Format zu verwalten. Die grunds\u00e4tzliche Idee ist, dass im Request nicht nur ein body , sondern auch eine file -Eigenschaft enthalten ist (neben dem header ). Multer verwendet einen storage , um Bilder (oder andere Dateien) zu speichern. Einen solchen storage bietet GridFs storage . Dieser kann sogar Dateien gr\u00f6\u00dfer als 16 MB speichern und die Idee dabei ist, dass die Datei in zwei Collections gespeichert wird, in der files -Collection, welche die (Meta-)Informationen der Datei speichert und der chunks -Collection, die die eigentliche Datei (als Bin\u00e4rdaten) speichert. Eine Datei kann dabei in mehrere chunks unterteilt werden. Die folgende Abbildung zeigt das Prinzip von GridFS : F\u00fcr unser Datenmodell sieht die Auteilung der Daten somit wie folgt aus: in der posts -Collection speichern wir die _id des Posts, den title eines Posts, die location und die image_id . Die image_id enth\u00e4lt den Dateinamen filename des Bildes. in der posts.files -Collection speichern wir (GridFs) die _id der Datei, die length der Datei, die chunkSize , das uploadDate , den filename (siehe in posts die image_id ) und den contenType (z.B. image/jpeg ) in der posts.chunks -Collection speichern wir (GridFs) die _id des Chunks, die files_id (diese entspricht der _id der Datei in der posts.files -Collection), ein n (fortlaufende Nummerierung der Chunks einer Datei beginnend mit 0 ), die data der Datei (in diesem Chunk) Chunks kann es zu einer Datei mehrere geben. Alle data aller Chunks einer Datei bilden zusammen die Datei als Bin\u00e4r- (bzw. base64-) Daten. Die folgende Abbildung zeigt unser Datenmodell in der Datenbank posts : Um z.B. einen Datensatz (einen Post) anzulegen, speichern wir also die zugeh\u00f6rigen Daten in der posts -Collection (inkl. dem filename der Datei), speichern die Meta-Informationen der Datei in der posts.files -Collection und die zugeh\u00f6rigen Bin\u00e4rdaten der Datei in posts.chunks .","title":"Zum Verst\u00e4ndnis"},{"location":"backend/#post-kompletter-datensatz","text":"Die POST -Funktion f\u00fcr einen Datensatz ist nicht viel umfangreicher als zuvor: aus routes/posts.routes.js 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // POST one post router . post ( '/' , upload . single ( 'file' ), async ( req , res ) => { // req.file is the `file` file if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }); } else { console . log ( 'req.body' , req . body ); const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . file . filename }) await newPost . save (); return res . send ( newPost ); } }) Wichtig ist, dass posts.routes.js nun auch die upload.js einbindet: aus routes/posts.routes.js 4 const upload = require ( '../middleware/upload' ); Beachten Sie, dass die Daten nun nicht mehr als JSON \u00fcbergeben werden, sondern als form-data . Der Test mithilfe von Postman sieht deshalb nun so aus: Als Response bekommen Sie aber wieder ein JSON zur\u00fcck, z.B.: { \"title\" : \"HTW Geb\u00e4ude C\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"1652166642127-jf-htwbild5.jpg\" , \"_id\" : \"627a0ff2305433d805b6b437\" , \"__v\" : 0 } Das Bild ist nun in der Collection posts einerseits in posts.files mit den Daten und in posts.chunks mit den Daten gespeichert. Beachten Sie, dass das Bild so klein ist, dass es in nur einem chunk gespeichert werden kann. Gr\u00f6\u00dfere Dateien werden in mehrer chunks aufgeteilt. Alle diese chunks , die zu einem Bild geh\u00f6ren, haben dann dieselbe files_id (aber fortlaufende _id s). In der posts -Collection sieht der Datensatz dann wie folgt aus:","title":"POST - kompletter Datensatz"},{"location":"backend/#get-ein-kompletter-datensatz","text":"Jetzt den kompletten Datensatz mit einer bestimmten _id zu laden, ist etwas aufwendiger: Wir laden zun\u00e4chst aus der posts -Collection den Datensatz mit der _id . Aus diesem Datensatz lesen wir die image_id aus. Das ist der filename mit dem wir in der posts.files -Collection suchen. Aus der posts.files -Collection lesen wir den Datensatz mit dem filename aus und identifizieren dessen _id . Nach dieser _id suchen wir unter files_id in der posts.chunks -Collection und lesen alle zugeh\u00f6rigen chunks aus. Dazu schreiben wir uns zun\u00e4chst eine Funktion getOnePost(id) , die ein Promise zur\u00fcckgibt. aus routes/posts.routes.js 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const collectionFiles = connect . collection ( 'posts.files' ); const collectionChunks = connect . collection ( 'posts.chunks' ); function getOnePost ( id ) { return new Promise ( async ( resolve , reject ) => { try { const post = await Post . findOne ({ _id : id }); // console.log('post.image_id', post.image_id); let fileName = post . image_id ; collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { // console.log('docs', docs) collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { const fileData = []; for ( let chunk of chunks ) { // console.log('chunk._id', chunk._id) fileData . push ( chunk . data . toString ( 'base64' )); } let base64file = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); let getPost = new Post ({ \"title\" : post . title , \"location\" : post . location , \"image_id\" : base64file }); //console.log('getPost', getPost) resolve ( getPost ) }) }) // toArray find filename } catch { reject ( new Error ( \"Post does not exist!\" )); } }) } Die Konsolenausgaben k\u00f6nnen nat\u00fcrlich auch alle entfernt werden, aber es lohnt sich vielleicht auch zu sehen, was an den einzelnen Stellen passiert. In Zeile 30 erfolgt der Zugriff auf die posts -Collection und es wird der Datensatz mit der _id ermittelt, welche als Parameter der URL \u00fcbergeben wurde. Aus dem Ergebnis post wird dann der Dateiname des Bildes in Zeile 32 mithilfe von post.image_id ermittelt. In der post.files -Collection wird in Zeile 34 nach dem Datensatz mit dem entsprechenden filename gesucht. Die _id dieses Datensatzes ist der Wert von files_id in der Collection posts.chunks . Nach all diesen Eintr\u00e4gen wird in Zeile 37 gesucht. Aus allen chunks wird dann der base64 -String erzeugt und dem Post -Objekt \u00fcbergeben, welches als resolve der Promise zur\u00fcckgeschickt wird. Diese Funktion k\u00f6nnen wir nun f\u00fcr unseren get('/:id') -Endpunkt verwenden. Die Funktion sieht dann wie folgt aus: aus routes/posts.routes.js 102 103 104 105 106 107 108 109 110 111 112 113 114 115 // GET one post via id router . get ( '/:id' , async ( req , res ) => { getOnePost ( req . params . id ) . then ( ( post ) => { console . log ( 'post' , post ); res . send ( post ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); }) }); Wir \u00fcbergeben der getOnePost() -Funktion die als Parameter \u00fcbergebene id und senden den resolve -Wert der Promise als Response zur\u00fcck.","title":"GET - ein kompletter Datensatz"},{"location":"backend/#get-alle-datensatze","text":"Der Ansatz, um alle Datens\u00e4tze aus der MongoDB zu lesen, ist der gleiche, wie f\u00fcr einen Datensatz. Wir ermitteln sukzessive die _id alle Datens\u00e4tze in der posts -Collection. Dazu schreiben wir uns eine Funktion getAllPosts() . In dieser laden wir zun\u00e4chst alle posts und rufen dann f\u00fcr jeden einzelnen die getOnePost(id -Funktion auf: aus routes/posts.routes.js 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 function getAllPosts () { return new Promise ( async ( resolve , reject ) => { const sendAllPosts = []; const allPosts = await Post . find (); try { for ( const post of allPosts ) { console . log ( 'post' , post ) const onePost = await getOnePost ( post . _id ); sendAllPosts . push ( onePost ); } console . log ( 'sendAllPosts' , sendAllPosts ) resolve ( sendAllPosts ) } catch { reject ( new Error ( \"Posts do not exist!\" )); } }); } Die Verwendung dieser Funktion ist wie oben: aus routes/posts.routes.js 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // GET all posts router . get ( '/' , async ( req , res ) => { getAllPosts () . then ( ( posts ) => { res . send ( posts ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post do not exist!\" }); }) });","title":"GET - alle Datens\u00e4tze"},{"location":"backend/#delete-einen-datensatz","text":"Wird ein Post gel\u00f6scht, m\u00fcssen wir auch daf\u00fcr sorgen, dass das zugeh\u00f6rige Bild aus der posts.files und der posts.chunks gel\u00f6scht wird. Das L\u00f6schen ist also dreistufig: aus routes/posts.routes.js 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // DELETE one post via id router . delete ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) let fileName = post . image_id ; await Post . deleteOne ({ _id : req . params . id }); await collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { await collectionChunks . deleteMany ({ files_id : docs [ 0 ]. _id }); }) await collectionFiles . deleteOne ({ filename : fileName }); res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } });","title":"DELETE - einen Datensatz"},{"location":"backend/#zusammenfassung-code-des-backends","text":"Hier nochmal alle wichtigen Dateien unseres Backends: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); require ( 'dotenv' ). config (); const mongoose = require ( 'mongoose' ); const app = express (); const PORT = process . env . PORT || 3000 ; app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ) app . listen ( PORT , ( error ) => { if ( error ) { console . log ( error ) } else { console . log ( `server running on http://localhost: ${ PORT } ` ); } }) /* die folgende Verbindung brauchen wir gar nicht, wird jeweils bei Bedarf erzeugt (mongoose) */ mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }) . then ( () => console . log ( 'connected to BD' ) ). catch ( err => console . error ( err , 'conncetion error' ) ) const db = mongoose . connection ; middleware/upload.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 const multer = require ( 'multer' ); const { GridFsStorage } = require ( 'multer-gridfs-storage' ); require ( 'dotenv' ). config (); const storage = new GridFsStorage ({ url : process . env . DB_CONNECTION , options : { useNewUrlParser : true , useUnifiedTopology : true }, file : ( req , file ) => { const match = [ \"image/png\" , \"image/jpg\" , \"image/jpeg\" ]; if ( match . indexOf ( file . mimetype ) === - 1 ) { return ` ${ Date . now () } -jf- ${ file . originalname } ` ; } console . log ( 'store' ); return { bucketName : 'posts' , filename : ` ${ Date . now () } -jf- ${ file . originalname } ` , request : req } } }) console . log ( 'store' , storage ) module . exports = multer ({ storage }); routes/posts.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 const express = require ( 'express' ); const router = express . Router (); const Post = require ( '../models/posts' ) const upload = require ( '../middleware/upload' ) const mongoose = require ( 'mongoose' ) require ( 'dotenv' ). config () /* ----------------- POST ---------------------------- */ // POST one post router . post ( '/' , upload . single ( 'file' ), async ( req , res ) => { if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }) } else { const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . file . filename }) console . log ( 'newPost' , newPost ) await newPost . save (); res . send ( newPost ) } }) /* ----------------- GET ---------------------------- */ const connect = mongoose . createConnection ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const collectionFiles = connect . collection ( 'posts.files' ); const collectionChunks = connect . collection ( 'posts.chunks' ); function getOnePost ( id ) { return new Promise ( async ( resolve , reject ) => { try { const post = await Post . findOne ({ _id : id }); let fileName = post . image_id ; collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { // sort({n: 1}) --> die chunks nach Eigenschaft n aufsteigend sortieren collectionChunks . find ({ files_id : docs [ 0 ]. _id }). sort ({ n : 1 }). toArray ( ( err , chunks ) => { const fileData = []; for ( let chunk of chunks ) { // console.log('chunk._id', chunk._id) fileData . push ( chunk . data . toString ( 'base64' )); } let base64file = 'data:' + docs [ 0 ]. contentType + ';base64,' + fileData . join ( '' ); let getPost = new Post ({ \"title\" : post . title , \"location\" : post . location , \"image_id\" : base64file }); resolve ( getPost ) }) }) // toArray find filename } catch { reject ( new Error ( \"Post does not exist!\" )); } }) } function getAllPosts () { return new Promise ( async ( resolve , reject ) => { const sendAllPosts = []; const allPosts = await Post . find (); try { for ( const post of allPosts ) { console . log ( 'post' , post ) const onePost = await getOnePost ( post . _id ); sendAllPosts . push ( onePost ); } console . log ( 'sendAllPosts' , sendAllPosts ) resolve ( sendAllPosts ) } catch { reject ( new Error ( \"Posts do not exist!\" )); } }); } // GET one post via id router . get ( '/:id' , async ( req , res ) => { getOnePost ( req . params . id ) . then ( ( post ) => { console . log ( 'post' , post ); res . send ( post ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post does not exist!\" }); }) }); // GET all posts router . get ( '/' , async ( req , res ) => { getAllPosts () . then ( ( posts ) => { res . send ( posts ); }) . catch ( () => { res . status ( 404 ); res . send ({ error : \"Post do not exist!\" }); }) }); /* ----------------- DELETE ---------------------------- */ // DELETE one post via id router . delete ( '/:id' , async ( req , res ) => { try { const post = await Post . findOne ({ _id : req . params . id }) let fileName = post . image_id ; await Post . deleteOne ({ _id : req . params . id }); await collectionFiles . find ({ filename : fileName }). toArray ( async ( err , docs ) => { await collectionChunks . deleteMany ({ files_id : docs [ 0 ]. _id }); }) await collectionFiles . deleteOne ({ filename : fileName }); res . status ( 204 ). send () } catch { res . status ( 404 ) res . send ({ error : \"Post does not exist!\" }) } }); module . exports = router ; .env DB_CONNECTION = mongodb://localhost:27017/posts PORT = 3000","title":"Zusammenfassung - Code des Backends"},{"location":"backend/#zusammenfassung-die-mongodb-posts","text":"Hier einige Datens\u00e4tze f\u00fcr die Datenbank posts : Collection posts 1 2 3 4 5 6 7 { \"_id\" :{ \"$oid\" : \"6278e79c6664ce70884dd0b0\" }, \"title\" : \"WH Eingang\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"1652090780364-jf-htwbild4.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a0ff2305433d805b6b437\" }, \"title\" : \"HTW Geb\u00e4ude C\" , \"location\" : \"Campus Wilhelminenhof\" , \"image_id\" : \"1652166642127-jf-htwbild5.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7cad8ae16b1ba5f62f76\" }, \"title\" : \"Mensastrand\" , \"location\" : \"Campus Wilhelminenhof Mensa\" , \"image_id\" : \"1652194477890-jf-htwbild1.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7cdf8ae16b1ba5f62f80\" }, \"title\" : \"Wiese Campus WH\" , \"location\" : \"Campus Wilhelminenhof Geb\u00e4ude C\" , \"image_id\" : \"1652194527176-jf-htwbild2.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7d0b8ae16b1ba5f62f84\" }, \"title\" : \"Ber\u00fchmt wegen FIW\" , \"location\" : \"Campus Wilhelminenhof Geb\u00e4ude C\" , \"image_id\" : \"1652194571822-jf-htwbild3.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7d398ae16b1ba5f62f8b\" }, \"title\" : \"Haupttor HTW\" , \"location\" : \"Wilhelminenhofstra\u00dfe HTW\" , \"image_id\" : \"1652194617191-jf-htwbild4.jpg\" , \"__v\" : 0 } { \"_id\" :{ \"$oid\" : \"627a7d608ae16b1ba5f62f8f\" }, \"title\" : \"Geb\u00e4ude C\" , \"location\" : \"HTW Berlin\" , \"image_id\" : \"1652194656102-jf-htwbild5.jpg\" , \"__v\" : 0 } Collection posts.files 1 2 3 4 5 6 7 8 9 10 11 12 13 { \"_id\" :{ \"$oid\" : \"6278d47e96a41858d66f1621\" }, \"length\" : 984341 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T08:44:46.239Z\" }, \"filename\" : \"1652085886102-jf-htwbild1.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278d5f902370f2c675993e9\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T08:51:05.478Z\" }, \"filename\" : \"1652086265414-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278db738d2b5bc5968f453e\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T09:14:27.957Z\" }, \"filename\" : \"1652087667872-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278db918d2b5bc5968f4546\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T09:14:57.113Z\" }, \"filename\" : \"1652087697071-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278dd057c648b9e8e3bbb74\" }, \"length\" : 117492 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T09:21:09.873Z\" }, \"filename\" : \"1652088069823-jf-htwbild3.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278e74458477bf1223fa286\" }, \"length\" : 1038579 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T10:04:53.07Z\" }, \"filename\" : \"1652090692995-jf-htwbild4.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"6278e79c6664ce70884dd0ab\" }, \"length\" : 1038579 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-09T10:06:20.437Z\" }, \"filename\" : \"1652090780364-jf-htwbild4.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a0ff2305433d805b6b435\" }, \"length\" : 25449 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T07:10:42.191Z\" }, \"filename\" : \"1652166642127-jf-htwbild5.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7cad8ae16b1ba5f62f71\" }, \"length\" : 984341 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:54:37.954Z\" }, \"filename\" : \"1652194477890-jf-htwbild1.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7cdf8ae16b1ba5f62f78\" }, \"length\" : 1601800 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:55:27.23Z\" }, \"filename\" : \"1652194527176-jf-htwbild2.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7d0b8ae16b1ba5f62f82\" }, \"length\" : 117492 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:56:11.84Z\" }, \"filename\" : \"1652194571822-jf-htwbild3.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7d398ae16b1ba5f62f86\" }, \"length\" : 1038579 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:56:57.214Z\" }, \"filename\" : \"1652194617191-jf-htwbild4.jpg\" , \"contentType\" : \"image/jpeg\" } { \"_id\" :{ \"$oid\" : \"627a7d608ae16b1ba5f62f8d\" }, \"length\" : 25449 , \"chunkSize\" : 261120 , \"uploadDate\" :{ \"$date\" : \"2022-05-10T14:57:36.11Z\" }, \"filename\" : \"1652194656102-jf-htwbild5.jpg\" , \"contentType\" : \"image/jpeg\" } Die Collection posts.chunks ist sehr gro\u00df, deshalb hier zum Download .","title":"Zusammenfassung - die MongoDB posts"},{"location":"backgroundsync/","text":"Hintergrundsynchronisation \u00b6 Hint Aktueller Stand vor Hintergrundsynchronisation: Frontend Backend Collection post Collection post.files Collection post.chunks Hintergrundsynchronisation erlaubt die Synchronisation von Daten, selbst dann, wenn die Anwendung offline ist. Diese \"Synchronisation\" erfolgt nat\u00fcrlich \"asynchron\". Angenommen, Sie geben offline Daten in die Anwendung ein und wollen diese versenden, z.B. an das Backend, dann wird dieser Request so lange in Ihrer Anwendung gespeichert, bis Sie wieder online sind und erst dann ausgef\u00fchrt. Das Situation ist die Folgende: Es sollen Daten an das Backend gesendet werden, aber die Internetverbindung ist unterbrochen. Deshalb werden die Daten in die IndexedDB gespeichert und im Service Worker wird eine Sync Task registriert. Sobald die Verbindung wieder steht, wird ein Sync -Event im Service Worker ausgel\u00f6st und dieser sendet die Daten an das Backend ( POST-Request ). Dadurch, dass der Service Worker diesen POST-Request ausf\u00fchrt (und die Daten dabei mitsendet), kann die Hintergrundsynchronisation sogar dann stattfinden, wenn die Webanwendung bereits geschlossen ist! Deshalb sollten wir einfach immer beim Senden von Daten eine Sync Task registrieren, weil es sein kann, dass die Daten noch gar nicht vollst\u00e4ndig gesendet wurden, bevor wir den Browsertab schlie\u00dfen. Aktueller Stand Daten senden \u00b6 Wir schauen uns zun\u00e4chst nochmal an, wie wir derzeit die Daten, die wir \u00fcber das Eingabeformular eingeben, speichern. Wenn wir den Speichern -Button dr\u00fccken, wird das Submit -Ereignis des Formulars ausgel\u00f6st. Dies behandeln wir wie folgt: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) sendDataToBackend (); }); Wir verhindern zun\u00e4chst das Standardverhalten beim submit -Ereignis, n\u00e4mlich das Absenden der Daten und das Neuladen der Seite (Zeile 240 ). In Zeile 242 pr\u00fcfen wir, ob die file -variable belegt ist, d.h. ob wir bereits ein Foto aufgenommen haben und in Zeile 246 pr\u00fcfen wir, ob beide input -Elemente, also sowohl f\u00fcr title , als auch f\u00fcr location einen Wert enthalten. Die JavaScript- trim() -Funktionen entfernt \"Leerzeichen\" aller Art am Ende des Strings (auch Tabs, Zeilenumbr\u00fcche etc.). Sollte eines der beiden (oder beide) Eingabefelder leer sein, beenden wir die Funktion mit einem alert und bleiben in dem Formular. alert ist nat\u00fcrlich nicht so toll, ein toast w\u00e4re viel besser, aber wir haben in unserer index.html nur einen toast f\u00fcr das erfolgreiche Speichern vordefiniert. Wenn beide Eingabefelder bef\u00fcllt und ein Foto (in file ) gespeichert sind, schlie\u00dfen wir das Formulatfenster (Zeile 251 ) und senden die Daten an das Backend (Zeile 259 ). Die sendDataToBackend() -Funktion sieht wie folgt aus: /src/js/feed.js 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 function sendDataToBackend () { const formData = new FormData (); formData . append ( 'title' , titleValue ); formData . append ( 'location' , locationValue ); formData . append ( 'file' , file ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); const newPost = { title : data . title , location : data . location , image_id : imageURI } updateUI ([ newPost ]); }); } Es wird ein FormData -Objekt erstellt, da wir im body nicht nur Textfelder, sondern auch ein file -Objekt mitschicken. Mit der POST -Methode an das Backend wird dieses bef\u00fcllte FormData -Objekt gesendet. Da dieses Objekt in der file -Eigenschaft aber ein File -Objekt enth\u00e4lt, die updateUI() -Funktion an dem Schl\u00fcssel image_id aber den base64 -String des Bildes erwartet, \u00fcbergeben wir dieser Funktion ein modifiziertes Post -Objekt. Schauen wir uns auch nochmal die IndexedDB an: Wir sehen, dass in dem Store posts der IndexedDB die Datens\u00e4tze mit ihrer _id und in image_id mit ihrem base64 -String gespeichert sind. Die _id erh\u00e4lt der Datensatz aber erst durch die MongoDB, wo der Wert f\u00fcr _id automatisch erzeugt wird. Angenommen, wir wollen diese Daten nun zun\u00e4chst in der IndexedDB zwischenspeichern und erst, wenn die Verbindung zum Backend besteht, an das Backend weiterleiten, ben\u00f6tigen wir in der IndexedDB einen anderen Store, der anders aufgebaut ist, als der posts -Store. Bevor wir uns darum k\u00fcmmern, erweiteren wir die Submit -Behandlung jedoch erst um die Registrierung an die Sync Task . Sync Task registrieren \u00b6 Wenn wir das Formular absenden und die in dem Formular eingegebenen Daten speichern wollen, steuern wir dies nun \u00fcber eine Sync Task . Diese Sync Task sorgt daf\u00fcr, dass die Daten (irgendwann) tats\u00e4chlich gespeichert werden, auch wenn wir gerade offline sind oder w\u00e4hrend des Speicherns offline geschaltet werden. F\u00fcr eine solche Sync Task existiert die SyncManager-API . Wenn Sie auf diesen Link klicken, dann sehen Sie, dass die SyncManager-API nur 2 Methoden besitzt, n\u00e4mlich register() und getTags() und dass sie bis jetzt leider nur von Chrome und Edge unterst\u00fctzt wird. Allerdings auch in allen Android-Ger\u00e4ten (mit Chrome oder WebView) und somit trotzdem eine gro\u00dfe Reichweite besitzt. Wir erweitern die Anmeldung an den Listener f\u00fcr das submit -Event zun\u00e4chst wie folgt: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { sw . sync . register ( 'sync-new-post' ); }); } sendDataToBackend (); }); In diesem kleinen Code-St\u00fcckchen sind einige Dinge beachtenswert. Erstens, wird die SyncManager-API vom Service Worker verwendet, aber wir sind hier ja in feed.js , also in der Webanwendung. Wir k\u00f6nnen die Registrierung an die Sync Task nicht einfach in die sw.js schreiben, da das ausl\u00f6sende Ereignis der Registrierung (n\u00e4mlich das Absenden des Formulars) in der Webanwendung stattfindet und wir dieses Ereignis in feed.js behandeln. Wir ben\u00f6tigen in feed.js also einen Zugriff auf den Service Worker. Dazu fragen wir zun\u00e4chst, ob der Service Worker \u00fcberhaupt durch den Browser unterst\u00fctzt wird und auch, ob die SyncManager-API durch den Browser unterst\u00fctzt wird. Dies geschieht in Zeile 260 . Dort f\u00e4llt auf, dass der Service Worker eine Eigenschaft von navigator ist, die SyncManager-API eine Eigenschaft von window . Window ist das Fenster, das ein DOM Dokument (also eine Webanwendung) enth\u00e4lt. Eine Eigenschaft von window ist navigator (also window.navigator ). Das Navigator -Objekt liefert Informationen \u00fcber den Browser, in dem die Anwendung ausgef\u00fchrt wird. Die ( readonly )-Eigenschaft ready eines Service Workers ist eine Promise, welche resolved ist, sobald der Service Worker active ist. Siehe hier f\u00fcr ready . \u00dcber diese Promise erlangen wir Zugriff auf den Service Worker in unserer Webanwendung. Die sync -Eigenschaft ist in dem Interface ServiceWorkerRegistration definiert. Die register() -Funktion ist eine der beiden Methoden aus der SyncManager-API und registriert eine Sync Task . Jeder Sync Task wird ein tag zugewiesen (\u00e4hnlich einer id ). \u00dcber diesen tag kann sp\u00e4ter auf diese Sync Task zugegriffen werden. Wir haben dieser Sync Task den tag 'sync-new-post' gegeben. Die Sync Task ist nun registriert. Allerdings wei\u00df der Service Worker noch gar nicht, was er bei dieser Sync Task \u00fcberhaupt synchronisieren soll. Das definieren wir jetzt. Daten in die IndexedDB speichern \u00b6 Die Daten, die (sp\u00e4ter) synchronisert werden sollen, werden zun\u00e4chst in der IndexedDB gespeichert. Dort k\u00f6nnen Sie so lange bleiben, bis die Webanwendung (wieder) online ist, um dann an das Backend durch den Service Worker gesendet zu werden. Dazu erzeugen wir uns ein passendes JavaScript-Objekt post : /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file // file durch den Foto-Button belegt }; sw . sync . register ( 'sync-new-post' ); }); } }); Die id wurde hinzugef\u00fcgt, um einen eindeutigen Identifier f\u00fcr den post in der IndexedDB zu haben ( keyPath ). Damit der Wert auch eindeutig ist, wird der Zeitstempel zum String umgewandelt und verwendet (Zeile 260 ). Diesen post wollen wir nun in die IndexedDB speichern. Dazu steht uns aus der db.js die Funktion writeData() zur Verf\u00fcgung. Diese Funktion erwartet als ersten Parameter den Store , in dem wir den post speichern wollen. Derzeit haben wir einen Store in unserer IndexedDB definiert, den Store posts : /src/js/db.js 2 3 4 5 6 7 8 9 10 11 12 13 14 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store1 = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store1 . createIndex ( '_id' , '_id' ); }, }); Diesen Store (urspr\u00fcnglich hie\u00df die Variable noch store , wir haben hier bereits store1 daraus gemacht, k\u00f6nnte aber auch store bleiben) verwenden wir aber, um unsere Daten aus der Datenbank/dem Backend zu cachen . Wir verwenden ihn zum Schreiben und Lesen der Daten aus unserer Datenbank. F\u00fcr das Synchroniseren der neuen Daten ben\u00f6tigen wir deshalb einen weiteren Store . Dazu kopieren wir einfach die Store -Erstellung in der db.js und nennen den neuhinzugekommen Store sync-posts (wir nennen die id hier auch id und nicht _id ): /src/js/db.js 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store1 = db . createObjectStore ( 'posts' , { keyPath : '_id' , }); store1 . createIndex ( '_id' , '_id' ); // Create another store of objects const store2 = db . createObjectStore ( 'sync-posts' , { keyPath : 'id' , }); store2 . createIndex ( 'id' , 'id' ); }, }); Gleichzeitig habe ich auch noch ein bisschen den Code gek\u00fcrzt. Die Kommentare sind raus und das autoIncrement: true ist auch Standard, deshalb muss es nicht mit angegeben werden. Wenn wir die Anwendung nun ausf\u00fchren, sehen wir unter IndexedDB , dass ein weiterer Store hinzugekommen ist: Diesen Store verwenden wir nun, um die neuen post -Daten in die IndexedDB zu schreiben: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file }; writeData ( 'sync-posts' , post ) . then ( () => { sw . sync . register ( 'sync-new-post' ); }); }); } }); Die Registrierung der Sync Task ist nur dann sinnvoll, wenn die Daten auch tats\u00e4chlich in der IndexedDB gespeichert wurden. Deshalb erfolgt die Registrierung in dem resolved -Pfad der writeData -Promise. Jetzt k\u00f6nnen wir noch unseren toast verwenden, den wir in der index.html definiert haben. Hierbei handelt es sich um eine Material Design Lite -Komponente Snackbar : /index.html 98 99 100 101 < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > In der feed.js verketten wir die Promise f\u00fcr das Schreiben der Daten in die IndexedDB weiter und best\u00e4tigen dies mit einer Snackbar-Nachricht: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 2000 }; snackbarContainer . showSnackbar ( data ); }); }); } }); Beachten Sie, dass Sie das return in Zeile 271 einf\u00fcgen, damit die Promise verkettet werden kann. Nachdem Sie nun Daten in das Formular eingegeben und auf Speichern geklickt haben, erscheint f\u00fcr 2 Sekunden unten eine Best\u00e4tigungsnachricht: Ein Fallback \u00b6 Wir haben festgelegt, was passieren soll, wenn der Browser Service Worker und die SyncManager-API unterst\u00fctzt. Wir sollten jedoch ein Fallback einbauen f\u00fcr den Fall, dass das nicht der Fall ist. Viel bleibt uns f\u00fcr diesen Fall nicht \u00fcbrig, zu tun. Wir k\u00f6nnen nur versuchen, die Daten, die wir in das Formular eingegeben haben, sofort an das Backend zu senden. Wir f\u00fcgen dazu den Aufruf der sendDataToBackend() -Funktion im else -Fall f\u00fcr die Behandlung des submit -Ereignisses auf: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 2000 }; snackbarContainer . showSnackbar ( data ); }); }); } else { sendDataToBackend (); } }); Dieser Fallback l\u00e4sst sich ausprobieren, indem man daf\u00fcr sorgt, dass die Bedingung if('serviceWorker' in navigator && 'SyncManager' in window) false ist (z.B. && false ). Nun k\u00fcmmern wir uns darum, dass das sync -Ereignis im Service Worker behandelt wird. Das geschieht immer dann, wenn der Service Worker erkennt, dass die Internetverbindung wieder hergestellt wurde. Ereignisbehandlung des sync -Events \u00b6 Wenn der Service Worker erkennt, dass die Verbindung zum Internet wieder hergestellt ist, wird automatisch das sync -Event ausgel\u00f6st. Dieses Ereignis wird auch dann ausgel\u00f6st, wenn die Internetverbindung besteht und eine Sync Task registriert wurde. Wir wollen in diesem Fall die Daten aus der IndexedDB an das Backend senden. Dazu erweitern wir die sw.js um die Behandlung des sync -Ereignisses. Wir f\u00fcgen diese Ereignisbehandlung an das Ende der sw.js ein: sw.js 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); // diese Daten an das Backend senden (siehe Fallback) } }) ); } }) Wir f\u00fcgen dem Service Worker also einen EventListener hinzu, wie wir das bereits von den anderen Ereignisbehandlungen im Service Worker kennen. Das sync -Ereignis gibt auch die tags zur\u00fcck, unter denen Sync Tasks gespeichert wurden. In unserem Fall war der verwendete tag sync-new-post . Wir verwenden auch erneut event.waitUntil() , um sicherzustellen, dass die Ereignisbehandlung nicht eher verlassen wird, bis alle definierten Anweisungen darin vollst\u00e4ndig abgearbeitet wurden. Als erstes greifen wir dann lesend auf die IndexedDB unter Verwendung der readAllData() -Methode aus der db.js . Diese Methode gibt ein Array aller gespeicherten Datens\u00e4tze in der IndexedDB im Store sync-posts zur\u00fcck. Mit einer for -Schleife betrachten wir jeden einzelnen Datensatz. Wir \"wissen\", dass ein solcher Datensatz ein JavaScript-Objekt mit den Eigenschaften id , title , location und image_id ist. Wir erweitern diese Behandlung nun um den Code, den wir zuvor f\u00fcr die Funktion sendDataToBackend() verwendet haben. Wir senden die Daten an das Backend. Dazu k\u00f6nnen wir uns den Code von der Fallback-Implementierung kopieren und anpassen: sw.js 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); const formData = new FormData (); formData . append ( 'title' , data . title ); formData . append ( 'location' , data . location ); formData . append ( 'file' , data . image_id ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } }) F\u00fcr die Daten, die an das Backend gesendet werden, wird nun, im Gegensatz zum Fallback, auf data zugegriffen, da wir ja die Daten senden, die aus der IndexedDB ausgelesen werden. Wenn die Daten erfolgreich an das Backend \u00fcbertragen worden sind ( response.ok in Zeile 120 ), dann werden diese Daten mithilfe der deleteOneDate() -Funktion (aus db.js ) gel\u00f6scht, da sie in der IndexedDB nicht weiter ben\u00f6tigt werden. Der Store sync-posts ist ja \"nur\" dazu da, die Daten so lange zwischenzuspeichern, bis sie ins Backend (in die persistente Datenbank) gesendet sind. Sollte stattdessen ein Fehler auftreten, wird er mithilfe von catch() abgefangen und dort ausgegeben. Wenn wir nun neue Daten in das Formular eingeben und auf Speichern klicken, werden die Daten zum Backend gesendet - eventuell nicht gleich, sondern erst dann, wenn die Anwendung (und somit das Backend) wieder online ist. Das Ausprobieren der sp\u00e4teren Hintergrundsynchronisation erfolgt am Sichersten dadurch, dass Sie den Rechner komplett vom WLAN trennen. Das Offline-Schalten des Service Workers gen\u00fcgt dazu h\u00e4ufig nicht (bzw. wird beim Online-Schalten dann manchmal kein sync -Ereignis ausgel\u00f6st). Schalten Sie das WLAN an Ihrem Rechner aus. Geben Sie \u00fcber das Formular der Anwendung neue Daten ein und dr\u00fccken Sie auf den Speichern -Button. Schauen Sie in den Developer Tools unter IndexedDB in den Store sync-posts . Dort sollten die neuen Daten nun gespeichert sein. Schalten Sie das WLAN wieder ein. Auf der Konsole erscheint die fetch -Nachricht f\u00fcr POST \"http://localhost:3000/posts\" . In der persistenten Datenbank stehen die neuen Daten. Nach einem Reload der Anwendung werden diese Daten aus der Datenbank \u00fcber das Backend gelesen (ohne Bilder) und erscheinen als weitere Cards . Success Wir haben die Hintergrundsynchronisation implementiert! Das Senden der Daten an das Backend erfolgt \u00fcber das Registrieren einer Sync Task und dem (zwischen-)Speichern der zu sendenden Daten in der IndexedDB. Durch die Ereignisbehandlung des sync -Ereignisses werden diese Daten an das Backend (und dar\u00fcber in die Datenbank) geschrieben. Das sync -Ereignis wird ausgel\u00f6st, wenn der Service Worker online und eine Sync Task registriert ist. Wir k\u00f6nnen nun Daten eingeben und speichern, egal, ob wir online oder offline sind. Die Anwendung kann sogar geschlossen sein und trotzdem synchronisiert der Service Worker.","title":"Hintergrundsynchronisation"},{"location":"backgroundsync/#hintergrundsynchronisation","text":"Hint Aktueller Stand vor Hintergrundsynchronisation: Frontend Backend Collection post Collection post.files Collection post.chunks Hintergrundsynchronisation erlaubt die Synchronisation von Daten, selbst dann, wenn die Anwendung offline ist. Diese \"Synchronisation\" erfolgt nat\u00fcrlich \"asynchron\". Angenommen, Sie geben offline Daten in die Anwendung ein und wollen diese versenden, z.B. an das Backend, dann wird dieser Request so lange in Ihrer Anwendung gespeichert, bis Sie wieder online sind und erst dann ausgef\u00fchrt. Das Situation ist die Folgende: Es sollen Daten an das Backend gesendet werden, aber die Internetverbindung ist unterbrochen. Deshalb werden die Daten in die IndexedDB gespeichert und im Service Worker wird eine Sync Task registriert. Sobald die Verbindung wieder steht, wird ein Sync -Event im Service Worker ausgel\u00f6st und dieser sendet die Daten an das Backend ( POST-Request ). Dadurch, dass der Service Worker diesen POST-Request ausf\u00fchrt (und die Daten dabei mitsendet), kann die Hintergrundsynchronisation sogar dann stattfinden, wenn die Webanwendung bereits geschlossen ist! Deshalb sollten wir einfach immer beim Senden von Daten eine Sync Task registrieren, weil es sein kann, dass die Daten noch gar nicht vollst\u00e4ndig gesendet wurden, bevor wir den Browsertab schlie\u00dfen.","title":"Hintergrundsynchronisation"},{"location":"backgroundsync/#aktueller-stand-daten-senden","text":"Wir schauen uns zun\u00e4chst nochmal an, wie wir derzeit die Daten, die wir \u00fcber das Eingabeformular eingeben, speichern. Wenn wir den Speichern -Button dr\u00fccken, wird das Submit -Ereignis des Formulars ausgel\u00f6st. Dies behandeln wir wie folgt: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) sendDataToBackend (); }); Wir verhindern zun\u00e4chst das Standardverhalten beim submit -Ereignis, n\u00e4mlich das Absenden der Daten und das Neuladen der Seite (Zeile 240 ). In Zeile 242 pr\u00fcfen wir, ob die file -variable belegt ist, d.h. ob wir bereits ein Foto aufgenommen haben und in Zeile 246 pr\u00fcfen wir, ob beide input -Elemente, also sowohl f\u00fcr title , als auch f\u00fcr location einen Wert enthalten. Die JavaScript- trim() -Funktionen entfernt \"Leerzeichen\" aller Art am Ende des Strings (auch Tabs, Zeilenumbr\u00fcche etc.). Sollte eines der beiden (oder beide) Eingabefelder leer sein, beenden wir die Funktion mit einem alert und bleiben in dem Formular. alert ist nat\u00fcrlich nicht so toll, ein toast w\u00e4re viel besser, aber wir haben in unserer index.html nur einen toast f\u00fcr das erfolgreiche Speichern vordefiniert. Wenn beide Eingabefelder bef\u00fcllt und ein Foto (in file ) gespeichert sind, schlie\u00dfen wir das Formulatfenster (Zeile 251 ) und senden die Daten an das Backend (Zeile 259 ). Die sendDataToBackend() -Funktion sieht wie folgt aus: /src/js/feed.js 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 function sendDataToBackend () { const formData = new FormData (); formData . append ( 'title' , titleValue ); formData . append ( 'location' , locationValue ); formData . append ( 'file' , file ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); const newPost = { title : data . title , location : data . location , image_id : imageURI } updateUI ([ newPost ]); }); } Es wird ein FormData -Objekt erstellt, da wir im body nicht nur Textfelder, sondern auch ein file -Objekt mitschicken. Mit der POST -Methode an das Backend wird dieses bef\u00fcllte FormData -Objekt gesendet. Da dieses Objekt in der file -Eigenschaft aber ein File -Objekt enth\u00e4lt, die updateUI() -Funktion an dem Schl\u00fcssel image_id aber den base64 -String des Bildes erwartet, \u00fcbergeben wir dieser Funktion ein modifiziertes Post -Objekt. Schauen wir uns auch nochmal die IndexedDB an: Wir sehen, dass in dem Store posts der IndexedDB die Datens\u00e4tze mit ihrer _id und in image_id mit ihrem base64 -String gespeichert sind. Die _id erh\u00e4lt der Datensatz aber erst durch die MongoDB, wo der Wert f\u00fcr _id automatisch erzeugt wird. Angenommen, wir wollen diese Daten nun zun\u00e4chst in der IndexedDB zwischenspeichern und erst, wenn die Verbindung zum Backend besteht, an das Backend weiterleiten, ben\u00f6tigen wir in der IndexedDB einen anderen Store, der anders aufgebaut ist, als der posts -Store. Bevor wir uns darum k\u00fcmmern, erweiteren wir die Submit -Behandlung jedoch erst um die Registrierung an die Sync Task .","title":"Aktueller Stand Daten senden"},{"location":"backgroundsync/#sync-task-registrieren","text":"Wenn wir das Formular absenden und die in dem Formular eingegebenen Daten speichern wollen, steuern wir dies nun \u00fcber eine Sync Task . Diese Sync Task sorgt daf\u00fcr, dass die Daten (irgendwann) tats\u00e4chlich gespeichert werden, auch wenn wir gerade offline sind oder w\u00e4hrend des Speicherns offline geschaltet werden. F\u00fcr eine solche Sync Task existiert die SyncManager-API . Wenn Sie auf diesen Link klicken, dann sehen Sie, dass die SyncManager-API nur 2 Methoden besitzt, n\u00e4mlich register() und getTags() und dass sie bis jetzt leider nur von Chrome und Edge unterst\u00fctzt wird. Allerdings auch in allen Android-Ger\u00e4ten (mit Chrome oder WebView) und somit trotzdem eine gro\u00dfe Reichweite besitzt. Wir erweitern die Anmeldung an den Listener f\u00fcr das submit -Event zun\u00e4chst wie folgt: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { sw . sync . register ( 'sync-new-post' ); }); } sendDataToBackend (); }); In diesem kleinen Code-St\u00fcckchen sind einige Dinge beachtenswert. Erstens, wird die SyncManager-API vom Service Worker verwendet, aber wir sind hier ja in feed.js , also in der Webanwendung. Wir k\u00f6nnen die Registrierung an die Sync Task nicht einfach in die sw.js schreiben, da das ausl\u00f6sende Ereignis der Registrierung (n\u00e4mlich das Absenden des Formulars) in der Webanwendung stattfindet und wir dieses Ereignis in feed.js behandeln. Wir ben\u00f6tigen in feed.js also einen Zugriff auf den Service Worker. Dazu fragen wir zun\u00e4chst, ob der Service Worker \u00fcberhaupt durch den Browser unterst\u00fctzt wird und auch, ob die SyncManager-API durch den Browser unterst\u00fctzt wird. Dies geschieht in Zeile 260 . Dort f\u00e4llt auf, dass der Service Worker eine Eigenschaft von navigator ist, die SyncManager-API eine Eigenschaft von window . Window ist das Fenster, das ein DOM Dokument (also eine Webanwendung) enth\u00e4lt. Eine Eigenschaft von window ist navigator (also window.navigator ). Das Navigator -Objekt liefert Informationen \u00fcber den Browser, in dem die Anwendung ausgef\u00fchrt wird. Die ( readonly )-Eigenschaft ready eines Service Workers ist eine Promise, welche resolved ist, sobald der Service Worker active ist. Siehe hier f\u00fcr ready . \u00dcber diese Promise erlangen wir Zugriff auf den Service Worker in unserer Webanwendung. Die sync -Eigenschaft ist in dem Interface ServiceWorkerRegistration definiert. Die register() -Funktion ist eine der beiden Methoden aus der SyncManager-API und registriert eine Sync Task . Jeder Sync Task wird ein tag zugewiesen (\u00e4hnlich einer id ). \u00dcber diesen tag kann sp\u00e4ter auf diese Sync Task zugegriffen werden. Wir haben dieser Sync Task den tag 'sync-new-post' gegeben. Die Sync Task ist nun registriert. Allerdings wei\u00df der Service Worker noch gar nicht, was er bei dieser Sync Task \u00fcberhaupt synchronisieren soll. Das definieren wir jetzt.","title":"Sync Task registrieren"},{"location":"backgroundsync/#daten-in-die-indexeddb-speichern","text":"Die Daten, die (sp\u00e4ter) synchronisert werden sollen, werden zun\u00e4chst in der IndexedDB gespeichert. Dort k\u00f6nnen Sie so lange bleiben, bis die Webanwendung (wieder) online ist, um dann an das Backend durch den Service Worker gesendet zu werden. Dazu erzeugen wir uns ein passendes JavaScript-Objekt post : /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file // file durch den Foto-Button belegt }; sw . sync . register ( 'sync-new-post' ); }); } }); Die id wurde hinzugef\u00fcgt, um einen eindeutigen Identifier f\u00fcr den post in der IndexedDB zu haben ( keyPath ). Damit der Wert auch eindeutig ist, wird der Zeitstempel zum String umgewandelt und verwendet (Zeile 260 ). Diesen post wollen wir nun in die IndexedDB speichern. Dazu steht uns aus der db.js die Funktion writeData() zur Verf\u00fcgung. Diese Funktion erwartet als ersten Parameter den Store , in dem wir den post speichern wollen. Derzeit haben wir einen Store in unserer IndexedDB definiert, den Store posts : /src/js/db.js 2 3 4 5 6 7 8 9 10 11 12 13 14 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store1 = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store1 . createIndex ( '_id' , '_id' ); }, }); Diesen Store (urspr\u00fcnglich hie\u00df die Variable noch store , wir haben hier bereits store1 daraus gemacht, k\u00f6nnte aber auch store bleiben) verwenden wir aber, um unsere Daten aus der Datenbank/dem Backend zu cachen . Wir verwenden ihn zum Schreiben und Lesen der Daten aus unserer Datenbank. F\u00fcr das Synchroniseren der neuen Daten ben\u00f6tigen wir deshalb einen weiteren Store . Dazu kopieren wir einfach die Store -Erstellung in der db.js und nennen den neuhinzugekommen Store sync-posts (wir nennen die id hier auch id und nicht _id ): /src/js/db.js 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store1 = db . createObjectStore ( 'posts' , { keyPath : '_id' , }); store1 . createIndex ( '_id' , '_id' ); // Create another store of objects const store2 = db . createObjectStore ( 'sync-posts' , { keyPath : 'id' , }); store2 . createIndex ( 'id' , 'id' ); }, }); Gleichzeitig habe ich auch noch ein bisschen den Code gek\u00fcrzt. Die Kommentare sind raus und das autoIncrement: true ist auch Standard, deshalb muss es nicht mit angegeben werden. Wenn wir die Anwendung nun ausf\u00fchren, sehen wir unter IndexedDB , dass ein weiterer Store hinzugekommen ist: Diesen Store verwenden wir nun, um die neuen post -Daten in die IndexedDB zu schreiben: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file }; writeData ( 'sync-posts' , post ) . then ( () => { sw . sync . register ( 'sync-new-post' ); }); }); } }); Die Registrierung der Sync Task ist nur dann sinnvoll, wenn die Daten auch tats\u00e4chlich in der IndexedDB gespeichert wurden. Deshalb erfolgt die Registrierung in dem resolved -Pfad der writeData -Promise. Jetzt k\u00f6nnen wir noch unseren toast verwenden, den wir in der index.html definiert haben. Hierbei handelt es sich um eine Material Design Lite -Komponente Snackbar : /index.html 98 99 100 101 < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > In der feed.js verketten wir die Promise f\u00fcr das Schreiben der Daten in die IndexedDB weiter und best\u00e4tigen dies mit einer Snackbar-Nachricht: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 2000 }; snackbarContainer . showSnackbar ( data ); }); }); } }); Beachten Sie, dass Sie das return in Zeile 271 einf\u00fcgen, damit die Promise verkettet werden kann. Nachdem Sie nun Daten in das Formular eingegeben und auf Speichern geklickt haben, erscheint f\u00fcr 2 Sekunden unten eine Best\u00e4tigungsnachricht:","title":"Daten in die IndexedDB speichern"},{"location":"backgroundsync/#ein-fallback","text":"Wir haben festgelegt, was passieren soll, wenn der Browser Service Worker und die SyncManager-API unterst\u00fctzt. Wir sollten jedoch ein Fallback einbauen f\u00fcr den Fall, dass das nicht der Fall ist. Viel bleibt uns f\u00fcr diesen Fall nicht \u00fcbrig, zu tun. Wir k\u00f6nnen nur versuchen, die Daten, die wir in das Formular eingegeben haben, sofort an das Backend zu senden. Wir f\u00fcgen dazu den Aufruf der sendDataToBackend() -Funktion im else -Fall f\u00fcr die Behandlung des submit -Ereignisses auf: /src/js/feed.js 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; console . log ( 'titleInput' , titleValue ) console . log ( 'locationInput' , locationValue ) console . log ( 'file' , file ) if ( 'serviceWorker' in navigator && 'SyncManager' in window ) { navigator . serviceWorker . ready . then ( sw => { let post = { id : new Date (). toISOString (), title : titleValue , location : locationValue , image_id : file }; writeData ( 'sync-posts' , post ) . then ( () => { return sw . sync . register ( 'sync-new-post' ); }) . then ( () => { let snackbarContainer = new MaterialSnackbar ( document . querySelector ( '#confirmation-toast' )); let data = { message : 'Eingaben zum Synchronisieren gespeichert!' , timeout : 2000 }; snackbarContainer . showSnackbar ( data ); }); }); } else { sendDataToBackend (); } }); Dieser Fallback l\u00e4sst sich ausprobieren, indem man daf\u00fcr sorgt, dass die Bedingung if('serviceWorker' in navigator && 'SyncManager' in window) false ist (z.B. && false ). Nun k\u00fcmmern wir uns darum, dass das sync -Ereignis im Service Worker behandelt wird. Das geschieht immer dann, wenn der Service Worker erkennt, dass die Internetverbindung wieder hergestellt wurde.","title":"Ein Fallback"},{"location":"backgroundsync/#ereignisbehandlung-des-sync-events","text":"Wenn der Service Worker erkennt, dass die Verbindung zum Internet wieder hergestellt ist, wird automatisch das sync -Event ausgel\u00f6st. Dieses Ereignis wird auch dann ausgel\u00f6st, wenn die Internetverbindung besteht und eine Sync Task registriert wurde. Wir wollen in diesem Fall die Daten aus der IndexedDB an das Backend senden. Dazu erweitern wir die sw.js um die Behandlung des sync -Ereignisses. Wir f\u00fcgen diese Ereignisbehandlung an das Ende der sw.js ein: sw.js 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); // diese Daten an das Backend senden (siehe Fallback) } }) ); } }) Wir f\u00fcgen dem Service Worker also einen EventListener hinzu, wie wir das bereits von den anderen Ereignisbehandlungen im Service Worker kennen. Das sync -Ereignis gibt auch die tags zur\u00fcck, unter denen Sync Tasks gespeichert wurden. In unserem Fall war der verwendete tag sync-new-post . Wir verwenden auch erneut event.waitUntil() , um sicherzustellen, dass die Ereignisbehandlung nicht eher verlassen wird, bis alle definierten Anweisungen darin vollst\u00e4ndig abgearbeitet wurden. Als erstes greifen wir dann lesend auf die IndexedDB unter Verwendung der readAllData() -Methode aus der db.js . Diese Methode gibt ein Array aller gespeicherten Datens\u00e4tze in der IndexedDB im Store sync-posts zur\u00fcck. Mit einer for -Schleife betrachten wir jeden einzelnen Datensatz. Wir \"wissen\", dass ein solcher Datensatz ein JavaScript-Objekt mit den Eigenschaften id , title , location und image_id ist. Wir erweitern diese Behandlung nun um den Code, den wir zuvor f\u00fcr die Funktion sendDataToBackend() verwendet haben. Wir senden die Daten an das Backend. Dazu k\u00f6nnen wir uns den Code von der Fallback-Implementierung kopieren und anpassen: sw.js 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 self . addEventListener ( 'sync' , event => { console . log ( 'service worker --> background syncing ...' , event ); if ( event . tag === 'sync-new-post' ) { console . log ( 'service worker --> syncing new posts ...' ); event . waitUntil ( readAllData ( 'sync-posts' ) . then ( dataArray => { for ( let data of dataArray ) { console . log ( 'data from IndexedDB' , data ); const formData = new FormData (); formData . append ( 'title' , data . title ); formData . append ( 'location' , data . location ); formData . append ( 'file' , data . image_id ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); if ( response . ok ) { deleteOneData ( 'sync-posts' , data . id ) } }) . catch ( err => { console . log ( 'Error while sending data to backend ...' , err ); }) } }) ); } }) F\u00fcr die Daten, die an das Backend gesendet werden, wird nun, im Gegensatz zum Fallback, auf data zugegriffen, da wir ja die Daten senden, die aus der IndexedDB ausgelesen werden. Wenn die Daten erfolgreich an das Backend \u00fcbertragen worden sind ( response.ok in Zeile 120 ), dann werden diese Daten mithilfe der deleteOneDate() -Funktion (aus db.js ) gel\u00f6scht, da sie in der IndexedDB nicht weiter ben\u00f6tigt werden. Der Store sync-posts ist ja \"nur\" dazu da, die Daten so lange zwischenzuspeichern, bis sie ins Backend (in die persistente Datenbank) gesendet sind. Sollte stattdessen ein Fehler auftreten, wird er mithilfe von catch() abgefangen und dort ausgegeben. Wenn wir nun neue Daten in das Formular eingeben und auf Speichern klicken, werden die Daten zum Backend gesendet - eventuell nicht gleich, sondern erst dann, wenn die Anwendung (und somit das Backend) wieder online ist. Das Ausprobieren der sp\u00e4teren Hintergrundsynchronisation erfolgt am Sichersten dadurch, dass Sie den Rechner komplett vom WLAN trennen. Das Offline-Schalten des Service Workers gen\u00fcgt dazu h\u00e4ufig nicht (bzw. wird beim Online-Schalten dann manchmal kein sync -Ereignis ausgel\u00f6st). Schalten Sie das WLAN an Ihrem Rechner aus. Geben Sie \u00fcber das Formular der Anwendung neue Daten ein und dr\u00fccken Sie auf den Speichern -Button. Schauen Sie in den Developer Tools unter IndexedDB in den Store sync-posts . Dort sollten die neuen Daten nun gespeichert sein. Schalten Sie das WLAN wieder ein. Auf der Konsole erscheint die fetch -Nachricht f\u00fcr POST \"http://localhost:3000/posts\" . In der persistenten Datenbank stehen die neuen Daten. Nach einem Reload der Anwendung werden diese Daten aus der Datenbank \u00fcber das Backend gelesen (ohne Bilder) und erscheinen als weitere Cards . Success Wir haben die Hintergrundsynchronisation implementiert! Das Senden der Daten an das Backend erfolgt \u00fcber das Registrieren einer Sync Task und dem (zwischen-)Speichern der zu sendenden Daten in der IndexedDB. Durch die Ereignisbehandlung des sync -Ereignisses werden diese Daten an das Backend (und dar\u00fcber in die Datenbank) geschrieben. Das sync -Ereignis wird ausgel\u00f6st, wenn der Service Worker online und eine Sync Task registriert ist. Wir k\u00f6nnen nun Daten eingeben und speichern, egal, ob wir online oder offline sind. Die Anwendung kann sogar geschlossen sein und trotzdem synchronisiert der Service Worker.","title":"Ereignisbehandlung des sync-Events"},{"location":"caching/","text":"Caching mit Service Workern \u00b6 Caching ist ein Konzept, um Ressourcen zu speichern, um sie nicht wieder vom Server laden zu m\u00fcssen. Browser verf\u00fcgen \u00fcber eigene Caches (\"Pufferspeicher\") und darin k\u00f6nnen Browser Bilder, CSS-Dateien, JavaScript-Dateien und andere Mediadateien (z.B. pdf) speichern, um diese nicht erneut vom Webserver laden zu m\u00fcssen. Das Caching beschleunigt das wiederholte Laden von Webseiten. Caching mit service workern verfolgt das gleiche Prinzip. Auch hier werden Ressourcen in einen Cache geladen. Der Vorteil hierbei ist jedoch nicht das schnellere Laden beim Wiederholen, sondern die M\u00f6glichkeit zu er\u00f6ffnen, die Webanwendung auch (teilweise) offline auszuf\u00fchren. Mit dem Service-Worker-Caching bieten wir somit die F\u00e4higkeit des Offline-Modus unserer Anwendung. Die Verwendung eines Caches durch einen service worker erfolgt mithilfe der Cache API . Die Cache API \u00b6 Die Cache API verfolgt ein ganz simples Konzept. Mithilfe der Cache API werden einfach (Schl\u00fcssel-/Werte-)Paare von Requests und Responses gespeichert. Auf den Cache (also auf die Menge aller gespeicherten Request-/Response-Paare) k\u00f6nnen sowohl service worker als auch das JavaScript der Webanwendung zugreifen. Allerdings kann es ja sein, dass das \"normale\" JavaScript der Webanwendung (noch) nicht geladen werden kann, weil z.B. die Internetverbindung zu schwach ist oder nicht vorhanden, ein service worker kann aber trotzdem bereits Daten aus dem Cache liefern, ohne \u00fcberhaupt einen Request \u00fcber das Internet zu senden. Wichtig ist noch zu betonen, dass die Cache API (noch) nicht von besonders vielen Browsern unterst\u00fctzt wird. Das sieht man hier , wenn Sie nach ganz unten scrollen. Im Prinzip funktioniert es nur (vollst\u00e4ndig) mit Chrome, Firefox und Opera. Bereinigen des HTW-Insta-Projektes \u00b6 Bevor wir unseren Service-Worker-Cache implementieren, bereinigen wir zun\u00e4chst noch unser HTW-Insta-Projekt. Aus der public/src/js/app.js entfernen wir den gesamten Code, der sich auf Promises und die Fetch API bezog. Die app.js sieht nun (wieder) so aus: public/src/js/app.js if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } In der public/sw.js (also in unserem service worker ), l\u00f6schen wir die Ausgaben auf die Konsole f\u00fcr das fetch -Event. Stattdessen f\u00fcgen wir eine respondWith() -Funktion ein: public/sw.js self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { event . respondWith ( fetch ( event . request )); }) Die respondWith() -Funktion ist eine Funktion des fetch -Events (also FetchEvent.respondWith() ). Sie sorgt einerseits daf\u00fcr, den Browser von seiner Standardbehandlung des FetchEvents abzuhalten und stattdessen eine eigene Promise f\u00fcr die Behandlung des FetchEvents zu definieren. Die Standardsyntax ist: fetchEvent . respondWith ( // Promise that resolves to a Response. ); Hier ist ein Beispiel f\u00fcr die respondWith() -Funktion aus : 1 2 3 4 5 6 7 8 9 10 11 addEventListener ( 'fetch' , event => { // Prevent the default, and handle the request ourselves. event . respondWith ( async function () { // Try to get the response from a cache. const cachedResponse = await caches . match ( event . request ); // Return it if we found one. if ( cachedResponse ) return cachedResponse ; // If we didn't find a match in the cache, use the network. return fetch ( event . request ); }()); }); Darin wird f\u00fcr ein fetch -Event zun\u00e4chst gepr\u00fcft, ob der request im Cache vorhanden ist (Zeile 5 ). Wenn ja, dann bekommt die Variable cachedResponse den Wert der response aus dem Cache ( match liefert die response zum zugeh\u00f6rigen request ). Wenn das der Fall ist, dann liefert responseWith() genau diese response aus dem Cache zur\u00fcck. Wenn der request nicht im Cache gespeichert ist, dann wird einfach der event.request weitergeleitet, also nichts aus dem Cache genommen. In unserer derzeitigen Implementierung (highlighted Zeile 11 oben), wird noch nicht auf den Cache zugegriffen, sondern der request direkt an den Webserver weitergeleitet. Sollten Sie daf\u00fcr einen Fehler bekommen, weil das Promise als nicht korrekt behandelt gilt, dann k\u00f6nnen Sie diese Zeile zun\u00e4chst auch einfach auskommentieren. Eine etwas gr\u00f6\u00dfere \u00c4nderung f\u00fchren wir in der public/src/js/feed.js durch. Wir f\u00fcgen statisch einen Blog-Eintrag hinzu. Die Anwendung sieht dann so aus: Schauen Sie in die index.html . In das folgende <div id=\"shared-moments\"></div> f\u00fcgen wir eine Card der Form <div class=\"shared-moment-card mdl-card mdl-shadow--2dp\"></div> hinzu, welche das Foto und den Text enth\u00e4lt. Das passiert in einer Funktion createCard() : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); function openCreatePostModal () { createPostArea . style . display = 'block' ; } function closeCreatePostModal () { createPostArea . style . display = 'none' ; } shareImageButton . addEventListener ( 'click' , openCreatePostModal ); closeCreatePostModalButton . addEventListener ( 'click' , closeCreatePostModal ); function createCard () { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; cardTitle . style . backgroundImage = 'url(\"/src/images/htw-gebaeude-h.jpg\")' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = 'Vor der HTW-Mensa' ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = 'HTW Berlin' ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } fetch ( 'https://httpbin.org/get' ) . then ( function ( res ) { return res . json (); }) . then ( function ( data ) { createCard (); }); Zun\u00e4chst wird in Zeile 4 auf das div mit der id=\"shared-moments\" zugegriffen. In dieses div wird die Card eingef\u00fcgt. Alles CSS-Klassen mit mdl- am Anfang sind Klassen von Material Design Ligt . F\u00fcr die CSS-Klasse shared-moment-card definieren wir in public/src/css/feed.css noch: . shared-moment-card . mdl-card { margin : 10 px auto ; } so, dass die Card einen Abstand vom Rand bekommt. Interessant ist vielleicht noch die Zeile 36 componentHandler.upgradeElement(cardWrapper); . Mit dieser Funktion m\u00fcssen dynamisch erzeugte DOM-Elemente registriert werden, damit sie von Material Design Lite automatisch verwaltet werden. Siehe dazu Uses MDL on dynamic websites . IKT-PWA-03 bei GitHub \u00b6 Das Bild htw-gebaeude-h.jpg muss auch noch dem public/src/images -Ordner hinzugef\u00fcgt werden. Die aktuelle Ausgangssituation unseres Projektes finden Sie hier . Achten Sie bitte darauf, dass Sie (zumindest so lange wir uns mit dem Service-Worker-Cache besch\u00e4ftigen) das H\u00e4kchen bei Disable Cache in den Developer Tools unter Network gesetzt haben: Was soll in den Cache? \u00b6 Zun\u00e4chst \u00fcberlegen wir uns, was \u00fcberhaupt in den Cache soll und was nicht. Prinzipiell verfolgen wir mit dem Service-Worker-Cache die Idee, dass die Anwendung auch offline verwendbar bleiben soll. Wenn wir unsere aktuelle Anwendung betrachten, dann k\u00f6nnen wir unterscheiden zwischen \"statischen\" und \"dynamischen\" Inhalten. Statisch ist im Prinzip der Rahmen unserer Anwendung, also im prinzip alles, was wir hatten vor unserem ersten Blog-Eintrag. Dieser Rahmen gibt uns das Gef\u00fchl, dass die Anwendung \"l\u00e4uft\" - es fehlen nur die dynamischen Inhalte, also die Blog-Eintr\u00e4ge. Stattdessen k\u00f6nnte man aber eine Meldung ausgeben, dass diese Inhalte derzeit nicht verf\u00fcgbar sind. Das w\u00e4re alles jedenfalls besser als eine 404-Seite oder ein unendliches Warten oder das hier: Der Rahmen einer Webanwendung wird auch App-Shell genannt. Wir wollen diese App-Shell zun\u00e4chst in unseren Service-Worker-Cache speichern. Static caching/Precaching \u00b6 Wir wollen zun\u00e4chst die statischen Inhalte unserer Anwendung sin den Cache speichern. Dies geschieht beim Installieren (registrieren) des service workers. Das ist auch insofern praktisch, als dass der service worker ja nur dann neu registriert wird, wenn er ge\u00e4ndert wurde. Ansonsten bleibt einfach der \"alte\" existent. Ziel ist es also, zun\u00e4chst alles das in den Cache zu speichern, was unsere Webanwendung ausmacht: die index.html , alle *.css -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden, alle *.js -Dateien, die mittels <script src=\"...\"> in dieser index.html einegunden werden und alle *.png -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden. Den Service-Worker-Cache erstellen \u00b6 Wir haben bereits eingangs festgelegt, dass wir den Cache in dem Moment anlegen wollen, in dem der service worker installiert wird. Das bedeutet, wir erstellen den Cache in der Ereignisbehandlung des Lebenszyklus-Event install des service workers, also hier ( sw.js ): self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); // hier soll der Cache \"entstehen\" }) Den Service-Worker-Cache erstellen wir mithilfe der Anweisung caches.open(); . Hierbei handelt es sich um eine Funktion von CacheStorage . Die Funktion caches.open() erzeugt ein Cache -Objekt, wenn es noch nicht existiert. Die R\u00fcckgabe ( response der Promise ) ist also ein Cache -Objekt. Man k\u00f6nnte nun annehmen, man schreibt einfach das hier: 1 2 3 4 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); caches . open (); // nicht gut! }) Diese Idee ist aber nicht so gut, da wir immer im Hinterkopf behalten m\u00fcssen, dass in einem service worker alles asynchron abgearbeitet wird. Das bedeutet, dass wir in diesem Fall bei der Baehandlung des install -Events zwei Anweisungen einfach \"antriggern\": die Ausgabe auf die Konsole (Zeile 2 ) und das Erzeugen eines Cache -Objektes (Zeile 3 ). Wie lange jedes einzelne braucht und wann etwas fertig ist, wissen wir nicht. Das bedeutet z.B. dass die Ereignisbehandlung des install -Events fertig ist, noch bevor die Ausgabe auf die Konsole und/oder das Erzeugen des Cache -Objektes abgeschlossen ist/sind. Das wiederum w\u00fcrde bedeuten, dass wir asynchron evtl. bereits fetch -Anfragen ausl\u00f6sen, noch bevor der Cache bereit ist. Um dieses Problem zu verhindern, betten wir die Erzeugung des Cache -Objektes in eine event.waitUntil() -Funktion ein. Erst wenn diese Funktion abgeschlossen ist, ist auch die Ereignisbehandlung des install -Events abgeschlossen (siehe auch hier ). Das richtige Vorgehen ist also dieses: 1 2 3 4 5 6 7 8 9 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); }) ); }) caches.open() erzeugt also ein Promise , dessen response der erzeugte Cache ist. Wir konsumieren diesen Cache und geben zun\u00e4chst nur eine Ausgabe auf der Konsole aus. Der Parameter 'static' in caches.open() ist ein Name f\u00fcr den Cache. Die Namen sind frei w\u00e4hlbar und man kann verschiedene Namen vergeben. Das sind dann jeweils eine Art \"Unter\"-Caches (oder sub caches ) im Service-Worker-Cache. Eine Ressource in den Cache speichern \u00b6 Nun kann der Cache entsprechend mit request - response -Schl\u00fcssel-Werte-Paaren bef\u00fcllt werden. Die auf den Cache anwenbaren Funktionen sind hier dokumentiert. Es sind match(request, options) , matchAll(request, options) , add(request) , , addAll(request) , , put(request, response) , delete(request, options) und , keys(request, options) . Alle liefern nat\u00fcrlich ein Promise zur\u00fcck. Um die statischen Inhalte unserer Webanwendung in den Cache zu laden, verwenden wir die add(request) -Funktion. Diese Funktion macht folgendes: sie f\u00fchrt den request aus ( fetch(request) ) und speichert die response (also die angefragte Ressource) \u2192 dieses Speichern entspricht einem put(request, response) im Cache. Wenn wir also folgendes implementieren: 1 2 3 4 5 6 7 8 9 10 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) , dann wird beim Initialisieren des service workers die Ressource public/src/js/app.js beim Webserver angefragt und die response , also die app.js im Cache gespeichert. Wenn wir unsere Anwednung so ausf\u00fchren, dann sehen wir in den DeveloperTools im Reiter Application im Cache Storage den Cache static und darin die gespeicherte Ressource /src/js/app.js . Eine Ressource aus dem Cache lesen \u00b6 Jetzt haben wir einen Ressource in den Cache geladen, aber wir verwenden sie noch nicht, da wir in der bisherigen Behandlung des fetch -Events den Cache noch nicht nutzen. Zur Erinnerung: bei der Behandlung des fetch -Events wirkt der service worker wie ein Proxy. Er \"schaltet\" sich zwischen die Webanwendung und die Anfrage dieser an den Webserver. In unserer derzeitigen Implementierung des fetch -Events wird der request einfach an den Webserver durchgeschleust, ohne irgendetwas damit zu tun. Das wollen wir nun \u00e4ndern: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Wir reagieren auf das fetch -Ereignis zun\u00e4chst mit der respondWith() -Funktion, die wir bereits oben besprochen haben. Diese Funktion verhindert die Ausf\u00fchrung des Standardverhaltens beim fetch , n\u00e4mlich die Anfrage an den Webserver. Stattdessen fragen wir mithilfe der caches.match() -Funktion alle sub caches unseres Caches nach dem als Parameter \u00fcbergebenen request an. Im Cache sind die Eintr\u00e4ge als Schl\u00fcssel-Werte-Paare request - response abgespeichert. Findet sich der request im Cache, dann liefert die Promise ein response -Objekt zur\u00fcck. Wenn das so ist (Zeile 5 ), dann geben wir dieses response -Objekt an die Webanwendung zur\u00fcck (Zeile 6 ). Das ist dann also die aus dem Cache geladene Ressource. Wenn die match() -Funktion jedoch den Schl\u00fcssel request nicht im Cache gefunden hat (und somit auch keine response ), gibt sie zwar trotzdem ein Promise zur\u00fcck, aber dann ist die response null . Das bedeutet, dass die if -Abfrage in Zeile 5 ein false zur\u00fcckgibt und wir somit Zeile 8 ausf\u00fchren. Darin wird die Anfrage einfach an den Webserver weitergeleitet, die Ressource also vom Webserver geladen. Wir \u00fcberpr\u00fcfen die Funktionalit\u00e4t dieser fetch -Ereignisbehandlung: Unter dem Reiter Network in den DeveloperTools sehen wir, dass die app.js durch den Service Worker geladen wurde. Alle anderen Ressourcen wurden auch durch den Service Worker geladen, das liegt daran, dass wir im Service Worker die Anfrage an den Webserver durch den Service Worker durchschleusen. Wichtig ist aber, dass die app.js nicht vom Webserver geladen wurde. Das erkennen war daran, dass alle anderen Ressourcen mit ihren Gr\u00f6\u00dfenangaben in der Tabelle stehen und dass damit gesagt, wurde, wieviel Bytes vom Webserver geladen wurden. Die app.js taucht dabei aber nicht auf. Sie wurde durch den Service Worker aus dem Service-Worker-Cache ( Cache Storage ) geladen! Okay, das ist jetzt vielleicht noch nicht besonders eindrucksvoll, weil der Offline-Modus f\u00fcr unsere Webanwendung noch nicht funktioniert und wir bis jetzt nur die app.js in den Cache speichern und von dort bei einem fetch() laden. Dadurch sieht man noch nicht wirklich viel. Deshalb laden wir jetzt den statischen \"Rest\", insbesondere die index.html und die dazugeh\u00f6rigen *.css -Dateien. Zuvor jedoch noch eine kurze Anmerkung zu den Schl\u00fcssel-Werte-Paaren request und response im Cache: Schl\u00fcssel-Werte-Paare request und response \u00b6 Wir laden jetzt unsere index.html -Datei in den Cache: 1 2 3 4 5 6 7 8 9 10 11 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Wenn wir unsere Anwendung neu starten und den service worker erneut registrieren, dann sollte jetzt die index.html im Offline-Modus angezeigt werden (wenn auch ohne die CSS-Styles). Allerdings sieht die Anwendung nach dem Reload im Offline-Modus leider so aus wie auf der linken Seite der folgenden Abbildung gezeigt: Der Grund daf\u00fcr ist, dass wir die Anwendung mit localhost:8080 (oder 127.0.0.1:8080 ) aufrufen, der request also / ist. Im Cache gespeichert haben wir aber den request /index.html . Und tats\u00e4chlich, wenn wir localhost:8080/index.html (oder 127.0.0.1:8080/index.html ) aufrufen, dann wird der request /index.html im Cache gefunden und als response die index.html zur\u00fcckgegeben (rechte Seite in der Abbildung). Wichtig ist also, dass wir bedenken, dass alle requests , f\u00fcr die wir responses im Cache hinterlegen wollen, auch tats\u00e4chlich in den Cache hinzugef\u00fcgt werden. Unsere sw.js sollte also auch so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Dann erhalten wir auch das rechte Bild der Abbildung beim Aufruf von localhost:8080 (oder 127.0.0.1:8080 ) im Offline-Modus. Wir sollten also beachten, dass alle requests , die wir cachen wollen, auch tats\u00e4chlich in den Cache gespeichert werden. Alle statischen Ressourcen in den Cache laden \u00b6 Wir laden jetzt alle statischen Ressourcen in den Cache, d.h. alles, was notwendig ist, um unsere Webanwendung auch im Offline-Modus so aussehen zu lassen, als w\u00fcrde sie \"laufen\". Dazu geh\u00f6rt nat\u00fcrlich die index.html und dann noch alle Ressourcen, die in der index.html eingebunden werden, also einige *.js -Dateien, einige *.css -Dateien und das Bild, das oben in der Webanwendung erscheint. Man k\u00f6nnte das alles mit einzelnen cache.add() -Funktionen erledigen, so wie oben. Daf\u00fcr gibt es aber auch die cache.addAll() -Funktion, der ein Array aus lauter requests \u00fcbergeben wird. Die Implementierung der install -Ereignisbehandlung in unserer sw.js sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) Wenn wir nun unsere Anwendung neu starten und darauf achten, dass der neue Service Worker auch wirklich registriert wird und dann in den Offline-Modus schalten, dann sieht unsere Anwendung so aus: Wie auf der rechten Seite der Abbildung zu sehen ist, funktioniert auch das JavaScript, um zum Formular zu gelangen. Einige Sachen funktionieren im Offline-Modus nicht, weil wir sie nicht in den Cache geladen haben: die Hilfeseite ( /help/index.html und die dazugeh\u00f6rige help.css ) sowie den Blogeintrag, den wir bereits (statisch) vorgenommen haben (den binden wir gleich noch dynamisch ein). Eine andere Sache f\u00e4llt aber vielleicht auf: die Icons von Material Design Lite erscheinen nicht, d.h. das Men\u00fc links oben ist nur ein leeres Quadrat und auf dem roten runden Button fehlt das Plus, stattdessen steht dort add . Wenn wir diesem Problem nachgehen, dann sehen wir in den DeveloperTools unter dem Reiter Network , dass alle Ressourcen, die wir im Cache gespeichert haben, auch tats\u00e4chlich aus diesem Cache geladen werden: Zus\u00e4tzlich schlagen aber noch \"kryptische\" GET-Anfragen fehl (die roten ganz unten in der Abbildung). Hier werden offensichtlich noch Anfragen an den Webserver gestellt, von denen wir gar nichts wussten und die wir nicht im Cache vorhalten. Wo kommen diese Anfragen her? Wenn wir dort in den DeveloperTools bspw. auf die Ressource https://fonts.googleapis.com/icon?family=Material+Icons klicken, dann erscheint daneben der Inhalt der geladenen Ressource und wir finden darin einen weiteren request , den wir aber nicht in unserem Cache hinterlegt haben (weil wir es gar nicht wussten): Diese Anfragen schlagen im Offline-Modus (nat\u00fcrlich) fehl und deshalb fehlen uns die Material Design Icons. Gut w\u00e4re es, wenn solche dynamischen Anfragen ebenfalls im Cache landen w\u00fcrden. Mit diesem dynamischen Caching besch\u00e4ftigen wir uns deshalb jetzt: Dynamisches Caching \u00b6 Bis jetzt haben wir mit cache.add() bzw. cache.addAll() vorab festgelegt, was in den Cache geladen werden soll. Das wird statisches Caching oder pre-caching genannt. Jetzt k\u00fcmmern wir uns um sogenanntes dynamisches Caching . Manchmal m\u00f6chte man gar nicht schon gleich zu Beginn alles in den Cache laden, um die \"Installation\", das erstmalige Aufrufen der Seite nicht zu aufw\u00e4ndig und somit zu langsam zu gestalten. Manchmal kennt man aber auch gar nicht die Ressourcen, die man noch zum Cache hinzuf\u00fcgen m\u00f6chte, wie das obere Beispiel gezeigt hat, als wir die Material Icons nicht in den Cache geladen haben, weil wir diese Anfrage vorab gar nicht kannten. Die Behandlung des fetch-Events erweitern \u00b6 Wir schauen uns zun\u00e4chst nochmal die aktuelle Behandlung des fetch -Events im service worker an: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Zur Erinnerung: mit dieser behandlung schalten wir uns zwischen die Abfrage der Webseite an den Webserver. Diese Behandlung wirkt wie ein Proxy. Bei jeder Anfrage der Webseite an den Webserver wird diese Implementierung des fetch -Events aufgerufen. Wir erwidern den request mit einer response . Entweder kommt diese response aus dem Cache, n\u00e4mlich dann, wenn caches.match(event.request) eine response zur\u00fcckgibt. In diesem Fall wird die response zur\u00fcck an die Webseite geschickt und der Webserver wird gar nicht mehr weiter angefragt. Oder wir leiten die Anfrage tats\u00e4chlich an den Webserver weiter ( return fetch(event.request); ), n\u00e4mlich dann, wenn der event.request nicht als Schl\u00fcssel im Cache verf\u00fcgbar ist und dieser deshalb keine response zur\u00fcckgibt. An dieser Stelle f\u00fcgen wir nun unser dynamisches Caching ein. Der Webserver wird mit einer response antworten und wir werden diese response in unseren Cache laden. Dazu ben\u00f6tigen wir zwei Dinge: einen neuen, weiteren Cache, in dem wir den entsprechenden request und die response des Webservers speichern und die cache.put() -Anweisung. put() unterscheidet sich von add() dahingehend, dass add() nur einen Parameter ben\u00f6tigt, n\u00e4mlich den request und die response automatisch als ein Schl\u00fcssel-Werte-Paar ( request, response ) speichert, w\u00e4hrend put() beide Werte als Schl\u00fcssel-Werte-Paar speichert, d.h. zwei Parameter erwartet ( request , response ). Ein erster Implementierungsversuch sieht so aus: 7 8 9 10 11 12 13 14 15 } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res ); // hier die put-Anweisung }) }); } Die Zeilen 9-14 sind hinzugekommen. Die fetch() -Anweisung ist ein Promise , deshalb f\u00fcgen wir ein .then() an. Die response m\u00fcssen wir jetzt anders nennen, da es die Variable response ja bereits gibt und es jetzt um die response des Webservers geht, also nennen wir sie res (kann nat\u00fcrlich auch anders hei\u00dfen). Dann \u00f6ffnen wir einen neuen Cache, den wir dynamic nennen - kann auch anders hei\u00dfen. Wenn der Cache noch nicht existiert, wird er durch open() erstellt. open() ist wiederum ein Promise, so dass wir .then() ankn\u00fcpfen k\u00f6nnen und f\u00fcgen in den Cache mithilfe von put() das Schl\u00fcssel-Werte-Paar ( event.request.url, res ) ein. Das w\u00e4re schon fast korrekt, aber es fehlt noch, dass wir die Response res nat\u00fcrlich an die Webseite zur\u00fcckgeben wollen. Dazu f\u00fcgen wir einerseits return res; ein, m\u00fcssen aber auch daf\u00fcr sorgen, dass die res auch an den fetch() -Aufruf zur\u00fcckgegeben wird. Dehalb ben\u00f6tigen wir auch vor caches.open() noch ein return . Au\u00dferdem m\u00fcssen wir noch einen weiteren Aspekt beachten. Wenn eine Response verwendet wird, wird sie konsumiert , d.h. verbraucht. Das ist so f\u00fcr Responses, auch wenn es nicht so wirklich nachvollziehbar und verst\u00e4ndlich ist. Wir verwenden in unserem Code zwei Mal res , einmal um es in den Cache zu speichern und ein anderes Mal, um es an die Webseite zur\u00fcckzugeben. In einer der beiden Verwendungen w\u00fcrde unsere res verbraucht/konsumiert werden und das andere Mal w\u00e4re sie leer. Kein Ahnung, warum das so ist ;-) . Aber wir ben\u00f6tigen an einer der beiden Stellen ein res.clone() , um den Clone der Response zu verwenden und die Response nicht zu \"verbrauchen\". Wir speichern den Clone der Response in den Cache (wir k\u00f6nnten auch die res in den Cache speichern und res.clone() zur\u00fcckgeben). Die gesamte Implementierung sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wenn wir nun die Anwendung ausf\u00fchren ( npm start ), dann in den Offline -Modus gehen und ein Reload im Browser durchf\u00fchren, sehen wir, dass die Material-Icons nun auch im Offline-Modus vorhanden sind: Wenn wir uns in den DeveloperTools unter Application auf der linken Seite unter Cache den Cache Storage anschauen, dann sehen wir, dass dort nun 2 Caches sind, der static und der dynamic Cache. In dem dynmic Cache finden wir nun auch die Material Icons wieder und unter dem Network -Reiter gibt es auch keine \"Fehler\" mehr, sondern alle Ressourcen werden vom Service Worker aus dem Cache geladen: Als weiteres Zeichen, dass nun alle Inhalte dynamisch geladen werden, erkennen wir auch die \"Mensa-Card\" in unserer Anwendung im Offline-Modus. Diese hatten wir ja statisch nicht hinzugef\u00fcgt. Probieren Sie auch einmal die \"Hilfe-Seite\" der Anwendung aus. Im Offline-Modus ist sie noch nicht verf\u00fcgbar. Wenn wir aber wieder online gehen, die \"Hilfe-Seite\" aufrufen und dann wieder offline gehen, ist die Hilfe-Seite im Cache und wird angezeigt. chrome.webRequest-API \u00b6 Der Chromium-Browser hat eine eigene API f\u00fcr Requests und schaltet sich bei Anfragen selbst dazwischen, um den Traffic zu analysieren und eventuelle Anfragen zu blockieren. Auch diese Anfragen l\u00f6sen ein fetch -Event aus. Allerdings gibt es bei von Chromium ausgel\u00f6sten Requests in dem request keine url -Eigenschaft. Vielleicht haben Sie einen solchen Fehler auch in Ihren DeveloperTools entdeckt. Eine Chromium-Anfrage unterscheidet sich von einer \"normalen\" Anfrage der Webseite an den Webserver dadurch, dass in einer \"normalen\" Anfrage die angefragte Ressource unter \" htttp://... \", also unter einer URL verf\u00fcgbar ist. Um nun den fehlerhaften Zugriff auf die url -Eigenschaft von request bei einer Anfrage durch Chrome zu vermeiden, f\u00fcgen wir ganz am Anfang der Ereignisbehandlung des fetch -Events noch die Abfrage ein, ob der request das Wort \" http \" enth\u00e4lt. Wenn nicht, verlassen wir die Behandlung des Events einfach: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Versionierung von Caches \u00b6 Wir haben nun sowohl statisch als auch dynamisch Ressourcen unserer Webanwendung geladen. Wenn wir eine Weile auf unserer Anwendung navigieren, laden wir nach und nach alle Ressourcen in den Cache, die unsere Anwendung ausmachen. Irgendwann k\u00f6nnen wir sie komplett offline betreiben. Alle Ressourcen sind im Cache und keine Ressourcen werden mehr vom Webserver geladen. Was passiert aber, wenn wir etwas \u00e4ndern? Wenn wir den Service worker sw.js \u00e4ndern, dann k\u00f6nnen wir daf\u00fcr sorgen, dass er neu geladen wird. Der Service worker darf auch niemals in den Cache geladen werden, denn dann h\u00e4tten wir eine unendliche Schleife, die immer wieder Ressourcen in den Cache l\u00e4dt! Wenn wir irgendeine andere Datei, eine *.html -, *.css - oder *.js -Datei \u00e4ndern, dann wird diese nie mehr in ihrer aktuellen Version vom Webserver geladen, da sie ja bereits im Cache ist und deshalb immer (in ihrer alten Version) aus dem Cache geladen wird. Um dieses problem zu beheben, versionieren wir unsere Caches. Neue Cache-Versionen erstellen \u00b6 Eine neue \"Version\" eines Caches erstellen wir dadurch, dass wir einen neuen Cache mit anderem Namen erstellen. Unsere beiden Caches (der statische und der dynamische) werden jeweils im Service Worker ( sw.js ) benannt: aktueller Stand sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Mit wechselndem Namen wechseln wir auch die \"Version\" des Caches. Wenn wir die Implementierung des statischen Service Workers (mit dem dynamischen ist es gleich, wir zeigen es hier zun\u00e4chst nur f\u00fcr den statischen) in der Zeile 4 bespielsweise auf caches . open ( 'static-v1' ) \u00e4ndern, ensteht ein neuer zus\u00e4tzlicher Caches static-v1 . Mit solchen \"Versionierungen\" erreichen wir, dass der Service Worker neu ausgef\u00fchrt und somit wirksam wird. Ge\u00e4nderte Dateien gelangen so neu in diesen neuen Caches. Leider bleiben aber auch die alten Caches noch bestehen und die Funktion caches.match() sucht in allen Caches nach dem passenden Request. Die \u00c4nderungen w\u00e4ren dann also trotzdem noch nicht sichtbar. Wir m\u00fcssen jetzt noch daf\u00fcr sorgen, dass die \"alten\" Caches gel\u00f6scht werden. Um uns zu \u00fcberlegen, an welcher Stelle ein geeigneter Platz w\u00e4re, die alten Caches zu l\u00f6schen, hier nochmal eine kurze Wiederholung des Service-Worker-Lifecycles : install : Das install -Ereignis ist das erste Ereignis, das ein Service Worker ausl\u00f6st. Es wird genau einmal ausgel\u00f6st. Die Promise in installEvent.waitUntil() gibt Auskunft dar\u00fcber, ob das Installieren des Service Workers erfolgreich war oder nicht. So lange der Service Worker installiert wird, kann er keine fetch -Ereignisse empfangen und behandeln. activate : Sobald die Installation erfolgreich abgeschlossen ist, wird das activate -Ereignis ausgel\u00f6st. waiting : Wenn ein Service Worker activated ist, d.h. das activate -Event f\u00fcr diesen Service Worker ausgel\u00f6st wurde, kontrolliert er die Anfragen der Webseite (insb. wenn clients.claim() ausgef\u00fchrt wurde, was dazu f\u00fchrt, dass auch alle Unterseiten der Seite \"kontrolliert\" werden). Wird der Service Worker ge\u00e4ndert (aktualisiert) und erneut installiert, kann der ge\u00e4nderte Service Worker nicht sofort in den activated Zustand \u00fcbergehen, so lange ein anderer Service Worker active ist. Der aktualisierte Service Worker ist dann waiting . Das Bild zeigt einen aktualisierten Service Worker ( #877 ) waiting solange der Service Worker #875 noch activated ist. Erst, wenn skipWaiting geklickt wird ( self.skipWaiting() ), wird der aktualisierte Service Worker activated . Ein guter Punkt, existierende Caches zu l\u00f6schen, die man nicht mehr verwenden m\u00f6chte, ist, wenn ein (neuer/aktualisierter) Service Worker activated ist. Wir erweitern also die behandlung des activate -Ereignisses: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== 'static-v1' && key !== 'dynamic' ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) Die ersten beiden und die letzten beiden Zeilen hatten wir bereits. Zeilen 3-13 sind neu. Betrachten wir den Code genauer: Die Funktion waitUntil() (Zeile 4 ) gibt es sowohl f\u00fcr das install -Event als auch f\u00fcr das activate -Ereignis. Dieser Funktion wird ein Promise \u00fcbergeben. Wir \u00fcbergeben als Promise die Funktion caches.keys() (Zeile 5 ). caches.keys gibt alle Namen der Service-Worker-Caches als Schl\u00fcssel zur\u00fcck. In unserem Fall also static , static-v1 und dynamic . die Funktion Promise.all() wird, verwendet, wenn auf ein Array von Promises \"gewartet\" werden soll. Die Funktion ist also dann beendet, wenn alle Promises des Arrays beendet sind. Promise.all() wartet auf ein Array von Promises. Wir haben aber mit keyList \"nur\" ein Array von Strings (die Namen der Caches). Mithilfe der map() -Funktion wandeln wir dieses Array von Strings in ein Array von Promises um. die map -Funktion nimmt nun jeden einzelnen String aus dem Array keyList und \"macht\" damit etwas (Zeilen 7-10 ) es wird gepr\u00fcft, ob der key entweder dem dynamischen Cache entspricht ( 'dynamic' ) oder dem neuen statischen Cache ( 'static-v1' ). Wenn das nicht der Fall ist, dann wird der Cache mit dem Namen key gel\u00f6scht (Zeile 9 ). return caches.delete(key) gibt somit ein Promise zur\u00fcck (an die map -Funktion). Somit wird jeder Schl\u00fcssel aus der keyList in ein Promise umgewandelt (f\u00fcr static-v1 und dynamic wird null zur\u00fcckgegeben). wenn alle dieses Promises beendet sind, ist auch die Promise.all() -Funktion beendet und somit auch die event.waitUntil() -Funktion. Somit l\u00f6schen wir alle \"alten\" statischen Caches und behalten nur die Caches static-v1 und dynamic . Wenn wir also etwas in unseren *.html , *.css und/oder *.js -Dateien \u00e4ndern und das Ge\u00e4nderte wirksam werden lassen wollen, \u00e4ndern wir einfach die Namen der Caches im Service Worker und sobald der Service Worker aktiviert ist, existieren nur noch die neuen Caches und die alten sind gel\u00f6scht. Damit wir das an zentraler Stelle im sw.js machen, lagern wir die aktuellen Namen der Caches in Konstanten aus. Die vollst\u00e4ndige Implementierung unseres Service Workers sieht so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 const CURRENT_STATIC_CACHE = 'static-v2' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v2' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Zusammenfassung \u00b6 Die Zusammanfassung f\u00fcr das Caching kann man im folgenden Bild darstellen. Mithilfe des Caching haben wir es geschafft, dass unsere Anwendung im Offline-Modus nicht mehr so aussieht, wie links, sondern wie rechts. Toll! Noch einige n\u00fctzliche Links: Service Worker API The offline cookbook Google: Service Worker","title":"Caching"},{"location":"caching/#caching-mit-service-workern","text":"Caching ist ein Konzept, um Ressourcen zu speichern, um sie nicht wieder vom Server laden zu m\u00fcssen. Browser verf\u00fcgen \u00fcber eigene Caches (\"Pufferspeicher\") und darin k\u00f6nnen Browser Bilder, CSS-Dateien, JavaScript-Dateien und andere Mediadateien (z.B. pdf) speichern, um diese nicht erneut vom Webserver laden zu m\u00fcssen. Das Caching beschleunigt das wiederholte Laden von Webseiten. Caching mit service workern verfolgt das gleiche Prinzip. Auch hier werden Ressourcen in einen Cache geladen. Der Vorteil hierbei ist jedoch nicht das schnellere Laden beim Wiederholen, sondern die M\u00f6glichkeit zu er\u00f6ffnen, die Webanwendung auch (teilweise) offline auszuf\u00fchren. Mit dem Service-Worker-Caching bieten wir somit die F\u00e4higkeit des Offline-Modus unserer Anwendung. Die Verwendung eines Caches durch einen service worker erfolgt mithilfe der Cache API .","title":"Caching mit Service Workern"},{"location":"caching/#die-cache-api","text":"Die Cache API verfolgt ein ganz simples Konzept. Mithilfe der Cache API werden einfach (Schl\u00fcssel-/Werte-)Paare von Requests und Responses gespeichert. Auf den Cache (also auf die Menge aller gespeicherten Request-/Response-Paare) k\u00f6nnen sowohl service worker als auch das JavaScript der Webanwendung zugreifen. Allerdings kann es ja sein, dass das \"normale\" JavaScript der Webanwendung (noch) nicht geladen werden kann, weil z.B. die Internetverbindung zu schwach ist oder nicht vorhanden, ein service worker kann aber trotzdem bereits Daten aus dem Cache liefern, ohne \u00fcberhaupt einen Request \u00fcber das Internet zu senden. Wichtig ist noch zu betonen, dass die Cache API (noch) nicht von besonders vielen Browsern unterst\u00fctzt wird. Das sieht man hier , wenn Sie nach ganz unten scrollen. Im Prinzip funktioniert es nur (vollst\u00e4ndig) mit Chrome, Firefox und Opera.","title":"Die Cache API"},{"location":"caching/#bereinigen-des-htw-insta-projektes","text":"Bevor wir unseren Service-Worker-Cache implementieren, bereinigen wir zun\u00e4chst noch unser HTW-Insta-Projekt. Aus der public/src/js/app.js entfernen wir den gesamten Code, der sich auf Promises und die Fetch API bezog. Die app.js sieht nun (wieder) so aus: public/src/js/app.js if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } In der public/sw.js (also in unserem service worker ), l\u00f6schen wir die Ausgaben auf die Konsole f\u00fcr das fetch -Event. Stattdessen f\u00fcgen wir eine respondWith() -Funktion ein: public/sw.js self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { event . respondWith ( fetch ( event . request )); }) Die respondWith() -Funktion ist eine Funktion des fetch -Events (also FetchEvent.respondWith() ). Sie sorgt einerseits daf\u00fcr, den Browser von seiner Standardbehandlung des FetchEvents abzuhalten und stattdessen eine eigene Promise f\u00fcr die Behandlung des FetchEvents zu definieren. Die Standardsyntax ist: fetchEvent . respondWith ( // Promise that resolves to a Response. ); Hier ist ein Beispiel f\u00fcr die respondWith() -Funktion aus : 1 2 3 4 5 6 7 8 9 10 11 addEventListener ( 'fetch' , event => { // Prevent the default, and handle the request ourselves. event . respondWith ( async function () { // Try to get the response from a cache. const cachedResponse = await caches . match ( event . request ); // Return it if we found one. if ( cachedResponse ) return cachedResponse ; // If we didn't find a match in the cache, use the network. return fetch ( event . request ); }()); }); Darin wird f\u00fcr ein fetch -Event zun\u00e4chst gepr\u00fcft, ob der request im Cache vorhanden ist (Zeile 5 ). Wenn ja, dann bekommt die Variable cachedResponse den Wert der response aus dem Cache ( match liefert die response zum zugeh\u00f6rigen request ). Wenn das der Fall ist, dann liefert responseWith() genau diese response aus dem Cache zur\u00fcck. Wenn der request nicht im Cache gespeichert ist, dann wird einfach der event.request weitergeleitet, also nichts aus dem Cache genommen. In unserer derzeitigen Implementierung (highlighted Zeile 11 oben), wird noch nicht auf den Cache zugegriffen, sondern der request direkt an den Webserver weitergeleitet. Sollten Sie daf\u00fcr einen Fehler bekommen, weil das Promise als nicht korrekt behandelt gilt, dann k\u00f6nnen Sie diese Zeile zun\u00e4chst auch einfach auskommentieren. Eine etwas gr\u00f6\u00dfere \u00c4nderung f\u00fchren wir in der public/src/js/feed.js durch. Wir f\u00fcgen statisch einen Blog-Eintrag hinzu. Die Anwendung sieht dann so aus: Schauen Sie in die index.html . In das folgende <div id=\"shared-moments\"></div> f\u00fcgen wir eine Card der Form <div class=\"shared-moment-card mdl-card mdl-shadow--2dp\"></div> hinzu, welche das Foto und den Text enth\u00e4lt. Das passiert in einer Funktion createCard() : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); function openCreatePostModal () { createPostArea . style . display = 'block' ; } function closeCreatePostModal () { createPostArea . style . display = 'none' ; } shareImageButton . addEventListener ( 'click' , openCreatePostModal ); closeCreatePostModalButton . addEventListener ( 'click' , closeCreatePostModal ); function createCard () { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; cardTitle . style . backgroundImage = 'url(\"/src/images/htw-gebaeude-h.jpg\")' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = 'Vor der HTW-Mensa' ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = 'HTW Berlin' ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } fetch ( 'https://httpbin.org/get' ) . then ( function ( res ) { return res . json (); }) . then ( function ( data ) { createCard (); }); Zun\u00e4chst wird in Zeile 4 auf das div mit der id=\"shared-moments\" zugegriffen. In dieses div wird die Card eingef\u00fcgt. Alles CSS-Klassen mit mdl- am Anfang sind Klassen von Material Design Ligt . F\u00fcr die CSS-Klasse shared-moment-card definieren wir in public/src/css/feed.css noch: . shared-moment-card . mdl-card { margin : 10 px auto ; } so, dass die Card einen Abstand vom Rand bekommt. Interessant ist vielleicht noch die Zeile 36 componentHandler.upgradeElement(cardWrapper); . Mit dieser Funktion m\u00fcssen dynamisch erzeugte DOM-Elemente registriert werden, damit sie von Material Design Lite automatisch verwaltet werden. Siehe dazu Uses MDL on dynamic websites .","title":"Bereinigen des HTW-Insta-Projektes"},{"location":"caching/#ikt-pwa-03-bei-github","text":"Das Bild htw-gebaeude-h.jpg muss auch noch dem public/src/images -Ordner hinzugef\u00fcgt werden. Die aktuelle Ausgangssituation unseres Projektes finden Sie hier . Achten Sie bitte darauf, dass Sie (zumindest so lange wir uns mit dem Service-Worker-Cache besch\u00e4ftigen) das H\u00e4kchen bei Disable Cache in den Developer Tools unter Network gesetzt haben:","title":"IKT-PWA-03 bei GitHub"},{"location":"caching/#was-soll-in-den-cache","text":"Zun\u00e4chst \u00fcberlegen wir uns, was \u00fcberhaupt in den Cache soll und was nicht. Prinzipiell verfolgen wir mit dem Service-Worker-Cache die Idee, dass die Anwendung auch offline verwendbar bleiben soll. Wenn wir unsere aktuelle Anwendung betrachten, dann k\u00f6nnen wir unterscheiden zwischen \"statischen\" und \"dynamischen\" Inhalten. Statisch ist im Prinzip der Rahmen unserer Anwendung, also im prinzip alles, was wir hatten vor unserem ersten Blog-Eintrag. Dieser Rahmen gibt uns das Gef\u00fchl, dass die Anwendung \"l\u00e4uft\" - es fehlen nur die dynamischen Inhalte, also die Blog-Eintr\u00e4ge. Stattdessen k\u00f6nnte man aber eine Meldung ausgeben, dass diese Inhalte derzeit nicht verf\u00fcgbar sind. Das w\u00e4re alles jedenfalls besser als eine 404-Seite oder ein unendliches Warten oder das hier: Der Rahmen einer Webanwendung wird auch App-Shell genannt. Wir wollen diese App-Shell zun\u00e4chst in unseren Service-Worker-Cache speichern.","title":"Was soll in den Cache?"},{"location":"caching/#static-cachingprecaching","text":"Wir wollen zun\u00e4chst die statischen Inhalte unserer Anwendung sin den Cache speichern. Dies geschieht beim Installieren (registrieren) des service workers. Das ist auch insofern praktisch, als dass der service worker ja nur dann neu registriert wird, wenn er ge\u00e4ndert wurde. Ansonsten bleibt einfach der \"alte\" existent. Ziel ist es also, zun\u00e4chst alles das in den Cache zu speichern, was unsere Webanwendung ausmacht: die index.html , alle *.css -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden, alle *.js -Dateien, die mittels <script src=\"...\"> in dieser index.html einegunden werden und alle *.png -Dateien, die mittels <link href=\"...\"> in dieser index.html einegunden werden.","title":"Static caching/Precaching"},{"location":"caching/#den-service-worker-cache-erstellen","text":"Wir haben bereits eingangs festgelegt, dass wir den Cache in dem Moment anlegen wollen, in dem der service worker installiert wird. Das bedeutet, wir erstellen den Cache in der Ereignisbehandlung des Lebenszyklus-Event install des service workers, also hier ( sw.js ): self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); // hier soll der Cache \"entstehen\" }) Den Service-Worker-Cache erstellen wir mithilfe der Anweisung caches.open(); . Hierbei handelt es sich um eine Funktion von CacheStorage . Die Funktion caches.open() erzeugt ein Cache -Objekt, wenn es noch nicht existiert. Die R\u00fcckgabe ( response der Promise ) ist also ein Cache -Objekt. Man k\u00f6nnte nun annehmen, man schreibt einfach das hier: 1 2 3 4 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); caches . open (); // nicht gut! }) Diese Idee ist aber nicht so gut, da wir immer im Hinterkopf behalten m\u00fcssen, dass in einem service worker alles asynchron abgearbeitet wird. Das bedeutet, dass wir in diesem Fall bei der Baehandlung des install -Events zwei Anweisungen einfach \"antriggern\": die Ausgabe auf die Konsole (Zeile 2 ) und das Erzeugen eines Cache -Objektes (Zeile 3 ). Wie lange jedes einzelne braucht und wann etwas fertig ist, wissen wir nicht. Das bedeutet z.B. dass die Ereignisbehandlung des install -Events fertig ist, noch bevor die Ausgabe auf die Konsole und/oder das Erzeugen des Cache -Objektes abgeschlossen ist/sind. Das wiederum w\u00fcrde bedeuten, dass wir asynchron evtl. bereits fetch -Anfragen ausl\u00f6sen, noch bevor der Cache bereit ist. Um dieses Problem zu verhindern, betten wir die Erzeugung des Cache -Objektes in eine event.waitUntil() -Funktion ein. Erst wenn diese Funktion abgeschlossen ist, ist auch die Ereignisbehandlung des install -Events abgeschlossen (siehe auch hier ). Das richtige Vorgehen ist also dieses: 1 2 3 4 5 6 7 8 9 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); }) ); }) caches.open() erzeugt also ein Promise , dessen response der erzeugte Cache ist. Wir konsumieren diesen Cache und geben zun\u00e4chst nur eine Ausgabe auf der Konsole aus. Der Parameter 'static' in caches.open() ist ein Name f\u00fcr den Cache. Die Namen sind frei w\u00e4hlbar und man kann verschiedene Namen vergeben. Das sind dann jeweils eine Art \"Unter\"-Caches (oder sub caches ) im Service-Worker-Cache.","title":"Den Service-Worker-Cache erstellen"},{"location":"caching/#eine-ressource-in-den-cache-speichern","text":"Nun kann der Cache entsprechend mit request - response -Schl\u00fcssel-Werte-Paaren bef\u00fcllt werden. Die auf den Cache anwenbaren Funktionen sind hier dokumentiert. Es sind match(request, options) , matchAll(request, options) , add(request) , , addAll(request) , , put(request, response) , delete(request, options) und , keys(request, options) . Alle liefern nat\u00fcrlich ein Promise zur\u00fcck. Um die statischen Inhalte unserer Webanwendung in den Cache zu laden, verwenden wir die add(request) -Funktion. Diese Funktion macht folgendes: sie f\u00fchrt den request aus ( fetch(request) ) und speichert die response (also die angefragte Ressource) \u2192 dieses Speichern entspricht einem put(request, response) im Cache. Wenn wir also folgendes implementieren: 1 2 3 4 5 6 7 8 9 10 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) , dann wird beim Initialisieren des service workers die Ressource public/src/js/app.js beim Webserver angefragt und die response , also die app.js im Cache gespeichert. Wenn wir unsere Anwednung so ausf\u00fchren, dann sehen wir in den DeveloperTools im Reiter Application im Cache Storage den Cache static und darin die gespeicherte Ressource /src/js/app.js .","title":"Eine Ressource in den Cache speichern"},{"location":"caching/#eine-ressource-aus-dem-cache-lesen","text":"Jetzt haben wir einen Ressource in den Cache geladen, aber wir verwenden sie noch nicht, da wir in der bisherigen Behandlung des fetch -Events den Cache noch nicht nutzen. Zur Erinnerung: bei der Behandlung des fetch -Events wirkt der service worker wie ein Proxy. Er \"schaltet\" sich zwischen die Webanwendung und die Anfrage dieser an den Webserver. In unserer derzeitigen Implementierung des fetch -Events wird der request einfach an den Webserver durchgeschleust, ohne irgendetwas damit zu tun. Das wollen wir nun \u00e4ndern: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Wir reagieren auf das fetch -Ereignis zun\u00e4chst mit der respondWith() -Funktion, die wir bereits oben besprochen haben. Diese Funktion verhindert die Ausf\u00fchrung des Standardverhaltens beim fetch , n\u00e4mlich die Anfrage an den Webserver. Stattdessen fragen wir mithilfe der caches.match() -Funktion alle sub caches unseres Caches nach dem als Parameter \u00fcbergebenen request an. Im Cache sind die Eintr\u00e4ge als Schl\u00fcssel-Werte-Paare request - response abgespeichert. Findet sich der request im Cache, dann liefert die Promise ein response -Objekt zur\u00fcck. Wenn das so ist (Zeile 5 ), dann geben wir dieses response -Objekt an die Webanwendung zur\u00fcck (Zeile 6 ). Das ist dann also die aus dem Cache geladene Ressource. Wenn die match() -Funktion jedoch den Schl\u00fcssel request nicht im Cache gefunden hat (und somit auch keine response ), gibt sie zwar trotzdem ein Promise zur\u00fcck, aber dann ist die response null . Das bedeutet, dass die if -Abfrage in Zeile 5 ein false zur\u00fcckgibt und wir somit Zeile 8 ausf\u00fchren. Darin wird die Anfrage einfach an den Webserver weitergeleitet, die Ressource also vom Webserver geladen. Wir \u00fcberpr\u00fcfen die Funktionalit\u00e4t dieser fetch -Ereignisbehandlung: Unter dem Reiter Network in den DeveloperTools sehen wir, dass die app.js durch den Service Worker geladen wurde. Alle anderen Ressourcen wurden auch durch den Service Worker geladen, das liegt daran, dass wir im Service Worker die Anfrage an den Webserver durch den Service Worker durchschleusen. Wichtig ist aber, dass die app.js nicht vom Webserver geladen wurde. Das erkennen war daran, dass alle anderen Ressourcen mit ihren Gr\u00f6\u00dfenangaben in der Tabelle stehen und dass damit gesagt, wurde, wieviel Bytes vom Webserver geladen wurden. Die app.js taucht dabei aber nicht auf. Sie wurde durch den Service Worker aus dem Service-Worker-Cache ( Cache Storage ) geladen! Okay, das ist jetzt vielleicht noch nicht besonders eindrucksvoll, weil der Offline-Modus f\u00fcr unsere Webanwendung noch nicht funktioniert und wir bis jetzt nur die app.js in den Cache speichern und von dort bei einem fetch() laden. Dadurch sieht man noch nicht wirklich viel. Deshalb laden wir jetzt den statischen \"Rest\", insbesondere die index.html und die dazugeh\u00f6rigen *.css -Dateien. Zuvor jedoch noch eine kurze Anmerkung zu den Schl\u00fcssel-Werte-Paaren request und response im Cache:","title":"Eine Ressource aus dem Cache lesen"},{"location":"caching/#schlussel-werte-paare-request-und-response","text":"Wir laden jetzt unsere index.html -Datei in den Cache: 1 2 3 4 5 6 7 8 9 10 11 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Wenn wir unsere Anwendung neu starten und den service worker erneut registrieren, dann sollte jetzt die index.html im Offline-Modus angezeigt werden (wenn auch ohne die CSS-Styles). Allerdings sieht die Anwendung nach dem Reload im Offline-Modus leider so aus wie auf der linken Seite der folgenden Abbildung gezeigt: Der Grund daf\u00fcr ist, dass wir die Anwendung mit localhost:8080 (oder 127.0.0.1:8080 ) aufrufen, der request also / ist. Im Cache gespeichert haben wir aber den request /index.html . Und tats\u00e4chlich, wenn wir localhost:8080/index.html (oder 127.0.0.1:8080/index.html ) aufrufen, dann wird der request /index.html im Cache gefunden und als response die index.html zur\u00fcckgegeben (rechte Seite in der Abbildung). Wichtig ist also, dass wir bedenken, dass alle requests , f\u00fcr die wir responses im Cache hinterlegen wollen, auch tats\u00e4chlich in den Cache hinzugef\u00fcgt werden. Unsere sw.js sollte also auch so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . add ( '/' ); cache . add ( '/index.html' ); cache . add ( '/src/js/app.js' ); // relativ vom public-Ordner }) ); }) Dann erhalten wir auch das rechte Bild der Abbildung beim Aufruf von localhost:8080 (oder 127.0.0.1:8080 ) im Offline-Modus. Wir sollten also beachten, dass alle requests , die wir cachen wollen, auch tats\u00e4chlich in den Cache gespeichert werden.","title":"Schl\u00fcssel-Werte-Paare request und response"},{"location":"caching/#alle-statischen-ressourcen-in-den-cache-laden","text":"Wir laden jetzt alle statischen Ressourcen in den Cache, d.h. alles, was notwendig ist, um unsere Webanwendung auch im Offline-Modus so aussehen zu lassen, als w\u00fcrde sie \"laufen\". Dazu geh\u00f6rt nat\u00fcrlich die index.html und dann noch alle Ressourcen, die in der index.html eingebunden werden, also einige *.js -Dateien, einige *.css -Dateien und das Bild, das oben in der Webanwendung erscheint. Man k\u00f6nnte das alles mit einzelnen cache.add() -Funktionen erledigen, so wie oben. Daf\u00fcr gibt es aber auch die cache.addAll() -Funktion, der ein Array aus lauter requests \u00fcbergeben wird. Die Implementierung der install -Ereignisbehandlung in unserer sw.js sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) Wenn wir nun unsere Anwendung neu starten und darauf achten, dass der neue Service Worker auch wirklich registriert wird und dann in den Offline-Modus schalten, dann sieht unsere Anwendung so aus: Wie auf der rechten Seite der Abbildung zu sehen ist, funktioniert auch das JavaScript, um zum Formular zu gelangen. Einige Sachen funktionieren im Offline-Modus nicht, weil wir sie nicht in den Cache geladen haben: die Hilfeseite ( /help/index.html und die dazugeh\u00f6rige help.css ) sowie den Blogeintrag, den wir bereits (statisch) vorgenommen haben (den binden wir gleich noch dynamisch ein). Eine andere Sache f\u00e4llt aber vielleicht auf: die Icons von Material Design Lite erscheinen nicht, d.h. das Men\u00fc links oben ist nur ein leeres Quadrat und auf dem roten runden Button fehlt das Plus, stattdessen steht dort add . Wenn wir diesem Problem nachgehen, dann sehen wir in den DeveloperTools unter dem Reiter Network , dass alle Ressourcen, die wir im Cache gespeichert haben, auch tats\u00e4chlich aus diesem Cache geladen werden: Zus\u00e4tzlich schlagen aber noch \"kryptische\" GET-Anfragen fehl (die roten ganz unten in der Abbildung). Hier werden offensichtlich noch Anfragen an den Webserver gestellt, von denen wir gar nichts wussten und die wir nicht im Cache vorhalten. Wo kommen diese Anfragen her? Wenn wir dort in den DeveloperTools bspw. auf die Ressource https://fonts.googleapis.com/icon?family=Material+Icons klicken, dann erscheint daneben der Inhalt der geladenen Ressource und wir finden darin einen weiteren request , den wir aber nicht in unserem Cache hinterlegt haben (weil wir es gar nicht wussten): Diese Anfragen schlagen im Offline-Modus (nat\u00fcrlich) fehl und deshalb fehlen uns die Material Design Icons. Gut w\u00e4re es, wenn solche dynamischen Anfragen ebenfalls im Cache landen w\u00fcrden. Mit diesem dynamischen Caching besch\u00e4ftigen wir uns deshalb jetzt:","title":"Alle statischen Ressourcen in den Cache laden"},{"location":"caching/#dynamisches-caching","text":"Bis jetzt haben wir mit cache.add() bzw. cache.addAll() vorab festgelegt, was in den Cache geladen werden soll. Das wird statisches Caching oder pre-caching genannt. Jetzt k\u00fcmmern wir uns um sogenanntes dynamisches Caching . Manchmal m\u00f6chte man gar nicht schon gleich zu Beginn alles in den Cache laden, um die \"Installation\", das erstmalige Aufrufen der Seite nicht zu aufw\u00e4ndig und somit zu langsam zu gestalten. Manchmal kennt man aber auch gar nicht die Ressourcen, die man noch zum Cache hinzuf\u00fcgen m\u00f6chte, wie das obere Beispiel gezeigt hat, als wir die Material Icons nicht in den Cache geladen haben, weil wir diese Anfrage vorab gar nicht kannten.","title":"Dynamisches Caching"},{"location":"caching/#die-behandlung-des-fetch-events-erweitern","text":"Wir schauen uns zun\u00e4chst nochmal die aktuelle Behandlung des fetch -Events im service worker an: 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ); } }) ); }) Zur Erinnerung: mit dieser behandlung schalten wir uns zwischen die Abfrage der Webseite an den Webserver. Diese Behandlung wirkt wie ein Proxy. Bei jeder Anfrage der Webseite an den Webserver wird diese Implementierung des fetch -Events aufgerufen. Wir erwidern den request mit einer response . Entweder kommt diese response aus dem Cache, n\u00e4mlich dann, wenn caches.match(event.request) eine response zur\u00fcckgibt. In diesem Fall wird die response zur\u00fcck an die Webseite geschickt und der Webserver wird gar nicht mehr weiter angefragt. Oder wir leiten die Anfrage tats\u00e4chlich an den Webserver weiter ( return fetch(event.request); ), n\u00e4mlich dann, wenn der event.request nicht als Schl\u00fcssel im Cache verf\u00fcgbar ist und dieser deshalb keine response zur\u00fcckgibt. An dieser Stelle f\u00fcgen wir nun unser dynamisches Caching ein. Der Webserver wird mit einer response antworten und wir werden diese response in unseren Cache laden. Dazu ben\u00f6tigen wir zwei Dinge: einen neuen, weiteren Cache, in dem wir den entsprechenden request und die response des Webservers speichern und die cache.put() -Anweisung. put() unterscheidet sich von add() dahingehend, dass add() nur einen Parameter ben\u00f6tigt, n\u00e4mlich den request und die response automatisch als ein Schl\u00fcssel-Werte-Paar ( request, response ) speichert, w\u00e4hrend put() beide Werte als Schl\u00fcssel-Werte-Paar speichert, d.h. zwei Parameter erwartet ( request , response ). Ein erster Implementierungsversuch sieht so aus: 7 8 9 10 11 12 13 14 15 } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res ); // hier die put-Anweisung }) }); } Die Zeilen 9-14 sind hinzugekommen. Die fetch() -Anweisung ist ein Promise , deshalb f\u00fcgen wir ein .then() an. Die response m\u00fcssen wir jetzt anders nennen, da es die Variable response ja bereits gibt und es jetzt um die response des Webservers geht, also nennen wir sie res (kann nat\u00fcrlich auch anders hei\u00dfen). Dann \u00f6ffnen wir einen neuen Cache, den wir dynamic nennen - kann auch anders hei\u00dfen. Wenn der Cache noch nicht existiert, wird er durch open() erstellt. open() ist wiederum ein Promise, so dass wir .then() ankn\u00fcpfen k\u00f6nnen und f\u00fcgen in den Cache mithilfe von put() das Schl\u00fcssel-Werte-Paar ( event.request.url, res ) ein. Das w\u00e4re schon fast korrekt, aber es fehlt noch, dass wir die Response res nat\u00fcrlich an die Webseite zur\u00fcckgeben wollen. Dazu f\u00fcgen wir einerseits return res; ein, m\u00fcssen aber auch daf\u00fcr sorgen, dass die res auch an den fetch() -Aufruf zur\u00fcckgegeben wird. Dehalb ben\u00f6tigen wir auch vor caches.open() noch ein return . Au\u00dferdem m\u00fcssen wir noch einen weiteren Aspekt beachten. Wenn eine Response verwendet wird, wird sie konsumiert , d.h. verbraucht. Das ist so f\u00fcr Responses, auch wenn es nicht so wirklich nachvollziehbar und verst\u00e4ndlich ist. Wir verwenden in unserem Code zwei Mal res , einmal um es in den Cache zu speichern und ein anderes Mal, um es an die Webseite zur\u00fcckzugeben. In einer der beiden Verwendungen w\u00fcrde unsere res verbraucht/konsumiert werden und das andere Mal w\u00e4re sie leer. Kein Ahnung, warum das so ist ;-) . Aber wir ben\u00f6tigen an einer der beiden Stellen ein res.clone() , um den Clone der Response zu verwenden und die Response nicht zu \"verbrauchen\". Wir speichern den Clone der Response in den Cache (wir k\u00f6nnten auch die res in den Cache speichern und res.clone() zur\u00fcckgeben). Die gesamte Implementierung sieht dann so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 self . addEventListener ( 'fetch' , event => { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wenn wir nun die Anwendung ausf\u00fchren ( npm start ), dann in den Offline -Modus gehen und ein Reload im Browser durchf\u00fchren, sehen wir, dass die Material-Icons nun auch im Offline-Modus vorhanden sind: Wenn wir uns in den DeveloperTools unter Application auf der linken Seite unter Cache den Cache Storage anschauen, dann sehen wir, dass dort nun 2 Caches sind, der static und der dynamic Cache. In dem dynmic Cache finden wir nun auch die Material Icons wieder und unter dem Network -Reiter gibt es auch keine \"Fehler\" mehr, sondern alle Ressourcen werden vom Service Worker aus dem Cache geladen: Als weiteres Zeichen, dass nun alle Inhalte dynamisch geladen werden, erkennen wir auch die \"Mensa-Card\" in unserer Anwendung im Offline-Modus. Diese hatten wir ja statisch nicht hinzugef\u00fcgt. Probieren Sie auch einmal die \"Hilfe-Seite\" der Anwendung aus. Im Offline-Modus ist sie noch nicht verf\u00fcgbar. Wenn wir aber wieder online gehen, die \"Hilfe-Seite\" aufrufen und dann wieder offline gehen, ist die Hilfe-Seite im Cache und wird angezeigt.","title":"Die Behandlung des fetch-Events erweitern"},{"location":"caching/#chromewebrequest-api","text":"Der Chromium-Browser hat eine eigene API f\u00fcr Requests und schaltet sich bei Anfragen selbst dazwischen, um den Traffic zu analysieren und eventuelle Anfragen zu blockieren. Auch diese Anfragen l\u00f6sen ein fetch -Event aus. Allerdings gibt es bei von Chromium ausgel\u00f6sten Requests in dem request keine url -Eigenschaft. Vielleicht haben Sie einen solchen Fehler auch in Ihren DeveloperTools entdeckt. Eine Chromium-Anfrage unterscheidet sich von einer \"normalen\" Anfrage der Webseite an den Webserver dadurch, dass in einer \"normalen\" Anfrage die angefragte Ressource unter \" htttp://... \", also unter einer URL verf\u00fcgbar ist. Um nun den fehlerhaften Zugriff auf die url -Eigenschaft von request bei einer Anfrage durch Chrome zu vermeiden, f\u00fcgen wir ganz am Anfang der Ereignisbehandlung des fetch -Events noch die Abfrage ein, ob der request das Wort \" http \" enth\u00e4lt. Wenn nicht, verlassen wir die Behandlung des Events einfach: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); })","title":"chrome.webRequest-API"},{"location":"caching/#versionierung-von-caches","text":"Wir haben nun sowohl statisch als auch dynamisch Ressourcen unserer Webanwendung geladen. Wenn wir eine Weile auf unserer Anwendung navigieren, laden wir nach und nach alle Ressourcen in den Cache, die unsere Anwendung ausmachen. Irgendwann k\u00f6nnen wir sie komplett offline betreiben. Alle Ressourcen sind im Cache und keine Ressourcen werden mehr vom Webserver geladen. Was passiert aber, wenn wir etwas \u00e4ndern? Wenn wir den Service worker sw.js \u00e4ndern, dann k\u00f6nnen wir daf\u00fcr sorgen, dass er neu geladen wird. Der Service worker darf auch niemals in den Cache geladen werden, denn dann h\u00e4tten wir eine unendliche Schleife, die immer wieder Ressourcen in den Cache l\u00e4dt! Wenn wir irgendeine andere Datei, eine *.html -, *.css - oder *.js -Datei \u00e4ndern, dann wird diese nie mehr in ihrer aktuellen Version vom Webserver geladen, da sie ja bereits im Cache ist und deshalb immer (in ihrer alten Version) aus dem Cache geladen wird. Um dieses problem zu beheben, versionieren wir unsere Caches.","title":"Versionierung von Caches"},{"location":"caching/#neue-cache-versionen-erstellen","text":"Eine neue \"Version\" eines Caches erstellen wir dadurch, dass wir einen neuen Cache mit anderem Namen erstellen. Unsere beiden Caches (der statische und der dynamische) werden jeweils im Service Worker ( sw.js ) benannt: aktueller Stand sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( 'static' ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( 'dynamic' ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Mit wechselndem Namen wechseln wir auch die \"Version\" des Caches. Wenn wir die Implementierung des statischen Service Workers (mit dem dynamischen ist es gleich, wir zeigen es hier zun\u00e4chst nur f\u00fcr den statischen) in der Zeile 4 bespielsweise auf caches . open ( 'static-v1' ) \u00e4ndern, ensteht ein neuer zus\u00e4tzlicher Caches static-v1 . Mit solchen \"Versionierungen\" erreichen wir, dass der Service Worker neu ausgef\u00fchrt und somit wirksam wird. Ge\u00e4nderte Dateien gelangen so neu in diesen neuen Caches. Leider bleiben aber auch die alten Caches noch bestehen und die Funktion caches.match() sucht in allen Caches nach dem passenden Request. Die \u00c4nderungen w\u00e4ren dann also trotzdem noch nicht sichtbar. Wir m\u00fcssen jetzt noch daf\u00fcr sorgen, dass die \"alten\" Caches gel\u00f6scht werden. Um uns zu \u00fcberlegen, an welcher Stelle ein geeigneter Platz w\u00e4re, die alten Caches zu l\u00f6schen, hier nochmal eine kurze Wiederholung des Service-Worker-Lifecycles : install : Das install -Ereignis ist das erste Ereignis, das ein Service Worker ausl\u00f6st. Es wird genau einmal ausgel\u00f6st. Die Promise in installEvent.waitUntil() gibt Auskunft dar\u00fcber, ob das Installieren des Service Workers erfolgreich war oder nicht. So lange der Service Worker installiert wird, kann er keine fetch -Ereignisse empfangen und behandeln. activate : Sobald die Installation erfolgreich abgeschlossen ist, wird das activate -Ereignis ausgel\u00f6st. waiting : Wenn ein Service Worker activated ist, d.h. das activate -Event f\u00fcr diesen Service Worker ausgel\u00f6st wurde, kontrolliert er die Anfragen der Webseite (insb. wenn clients.claim() ausgef\u00fchrt wurde, was dazu f\u00fchrt, dass auch alle Unterseiten der Seite \"kontrolliert\" werden). Wird der Service Worker ge\u00e4ndert (aktualisiert) und erneut installiert, kann der ge\u00e4nderte Service Worker nicht sofort in den activated Zustand \u00fcbergehen, so lange ein anderer Service Worker active ist. Der aktualisierte Service Worker ist dann waiting . Das Bild zeigt einen aktualisierten Service Worker ( #877 ) waiting solange der Service Worker #875 noch activated ist. Erst, wenn skipWaiting geklickt wird ( self.skipWaiting() ), wird der aktualisierte Service Worker activated . Ein guter Punkt, existierende Caches zu l\u00f6schen, die man nicht mehr verwenden m\u00f6chte, ist, wenn ein (neuer/aktualisierter) Service Worker activated ist. Wir erweitern also die behandlung des activate -Ereignisses: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== 'static-v1' && key !== 'dynamic' ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) Die ersten beiden und die letzten beiden Zeilen hatten wir bereits. Zeilen 3-13 sind neu. Betrachten wir den Code genauer: Die Funktion waitUntil() (Zeile 4 ) gibt es sowohl f\u00fcr das install -Event als auch f\u00fcr das activate -Ereignis. Dieser Funktion wird ein Promise \u00fcbergeben. Wir \u00fcbergeben als Promise die Funktion caches.keys() (Zeile 5 ). caches.keys gibt alle Namen der Service-Worker-Caches als Schl\u00fcssel zur\u00fcck. In unserem Fall also static , static-v1 und dynamic . die Funktion Promise.all() wird, verwendet, wenn auf ein Array von Promises \"gewartet\" werden soll. Die Funktion ist also dann beendet, wenn alle Promises des Arrays beendet sind. Promise.all() wartet auf ein Array von Promises. Wir haben aber mit keyList \"nur\" ein Array von Strings (die Namen der Caches). Mithilfe der map() -Funktion wandeln wir dieses Array von Strings in ein Array von Promises um. die map -Funktion nimmt nun jeden einzelnen String aus dem Array keyList und \"macht\" damit etwas (Zeilen 7-10 ) es wird gepr\u00fcft, ob der key entweder dem dynamischen Cache entspricht ( 'dynamic' ) oder dem neuen statischen Cache ( 'static-v1' ). Wenn das nicht der Fall ist, dann wird der Cache mit dem Namen key gel\u00f6scht (Zeile 9 ). return caches.delete(key) gibt somit ein Promise zur\u00fcck (an die map -Funktion). Somit wird jeder Schl\u00fcssel aus der keyList in ein Promise umgewandelt (f\u00fcr static-v1 und dynamic wird null zur\u00fcckgegeben). wenn alle dieses Promises beendet sind, ist auch die Promise.all() -Funktion beendet und somit auch die event.waitUntil() -Funktion. Somit l\u00f6schen wir alle \"alten\" statischen Caches und behalten nur die Caches static-v1 und dynamic . Wenn wir also etwas in unseren *.html , *.css und/oder *.js -Dateien \u00e4ndern und das Ge\u00e4nderte wirksam werden lassen wollen, \u00e4ndern wir einfach die Namen der Caches im Service Worker und sobald der Service Worker aktiviert ist, existieren nur noch die neuen Caches und die alten sind gel\u00f6scht. Damit wir das an zentraler Stelle im sw.js machen, lagern wir die aktuellen Namen der Caches in Konstanten aus. Die vollst\u00e4ndige Implementierung unseres Service Workers sieht so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 const CURRENT_STATIC_CACHE = 'static-v2' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v2' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); })","title":"Neue Cache-Versionen erstellen"},{"location":"caching/#zusammenfassung","text":"Die Zusammanfassung f\u00fcr das Caching kann man im folgenden Bild darstellen. Mithilfe des Caching haben wir es geschafft, dass unsere Anwendung im Offline-Modus nicht mehr so aussieht, wie links, sondern wie rechts. Toll! Noch einige n\u00fctzliche Links: Service Worker API The offline cookbook Google: Service Worker","title":"Zusammenfassung"},{"location":"einfuehrung/","text":"Einf\u00fchrung \u00b6 In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt. Webanwendungen vs. native Apps \u00b6 Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang Links und Videos \u00b6 Hier zwei kurze Einf\u00fchrungsvideos zu PWAs: Progressive Web Apps in 100 Seconds Progressive Web Apps - PWA Roadshow Hier einige intressante Links zu PWAs: Learn PWA Progressive Web-Apps: Was versprechen die progressiven Apps? Online Verzeichnis PWAs PWAs vs. SPAs \u00b6 Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048.love2dev.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-) PWA Checklist \u00b6 Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier . Erstes kleines Beispiel \u00b6 Wir erstellen uns in einem Ordner eine index.html mit index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > </ body > </ html > Einen gro\u00dfen Teil unserer Untersuchungen in diesem Modul nehmen Web APIs ein. Wir werden einige von Ihnen n\u00e4her beleuchten. Das zentrale Konzept von PWAs sind ServiceWorker . Wir erstellen uns in unserem Ordner eine Datei service-worker.js und binden diese in unsere index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die service-worker.js schreiben wir zun\u00e4chst nur service-worker.js console . log ( 'service worker registriert' ); Wir starten die Anwendung (z.B. mit npx serve ) und schalten die Entwicklertools ein. Auf der Konsole erscheint service worker registriert . Wir wechseln nach Application --> Service Worker und sehen den aktiven service-worker.js . Wenn wir die Anwendung im Browser erneut laden, erscheint die Ausgabe nicht erneut. Wir \u00e4ndern den Service worker, z.B. auf console.log('neuer service worker registriert ) und laden die Anwendung erneut. Die Ausgabe erscheint. Wechseln sie erneut nach Application --> Service Worker . Der Service worker l\u00e4uft auch dann noch, wenn die Anwendung geschlossen ist! Installierbar \u00b6 Wenn wir unter Lighthouse einen Report generieren, dann sieht es zwar prinzipiell schon ganz gut aus, es handelt sich aber auch noch nicht um eine PWA, da sie (noch) nicht installierbar ist. Wir werden n\u00e4chste Woche damit beginnen, unsere App installierbar zu machen. Hier \"verraten\" wir aber bereits, dass wir dazu eine manifest.json ben\u00f6tigen. Diese erstellen wir und binden sie in die index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < link rel = \"manifest\" href = \"manifest.json\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die manifest.json tragen wir ein: manifest.json 1 2 3 4 5 6 7 8 9 10 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } Wir kommen zu den einzelnen Eigenschaften n\u00e4chste Woche noch ausf\u00fchrlich. Die manifest.json ist jedoch noch nicht vollst\u00e4ndig, da das icons -Array noch bef\u00fcllt werden muss. In dieses Array tragen wir alle Bilder ein, die als Icons auf dem Startbildschirm verwendet werden sollen, je nach Aufl\u00f6sung des Ger\u00e4tes, auf dem die Anwendung gestartet werden soll. Die Generierung dieser Icons wird uns zum Gl\u00fcck abgenommen. Wir erstellen die Icons auf Basis eines Icons, das in recht gro\u00dfer Aufl\u00f6sung vorliegt. F\u00fcgen Sie dazu das fiwlogo in Ihren Projektordner ein. Wir nutzen den pwa-asset-generator . Im Terminal geben wir in unserem Projektordner ein: npx pwa-asset-generator fiwlogo.png icons Dabei ist fiwlogo.png das Icon, auf dessen Basis alle weiteren Icons erzeugt werden sollen und diese sollen in den Ordner icons erstellt werden. Die Ausgabe ist ungef\u00e4hr wie folgt: 11:49:08 getSplashScreenMetaData Initialising puppeteer to load latest splash screen metadata \ud83e\udd16 11:49:08 getAppleSplashScreenData Navigating to Apple Human Interface Guidelines website - https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/ 11:49:10 getAppleSplashScreenData Waiting for the data table to be loaded 11:49:10 getAppleSplashScreenData Retrieved splash screen data 11:49:10 getSplashScreenMetaData Loaded metadata for iOS platform \ud83d\ude4c 11:49:11 generateImages Looks like folder icons doesn't exist. Created one for you \ud83e\udd14 11:49:11 saveImages Initialising puppeteer to take screenshots \ud83e\udd16 11:49:11 getShellHtml Generating shell html with provided image source 11:49:11 getShellHtml Providing shell html as page content 11:49:12 saveImages Saved image apple-splash-2388-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2732-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1536-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-1536 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2388 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-2732 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2224 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2224-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1620-2160 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2436-1125 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1242-2688 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2532-1170 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2160-1620 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1125-2436 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1284-2778 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1242-2208 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1792-828 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1170-2532 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-192 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-512 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2778-1284 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2208-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1136-640 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2688-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-750-1334 \ud83d\ude4c 11:49:13 saveImages Saved image apple-icon-180 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-640-1136 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1334-750 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-828-1792 \ud83d\ude4c 11:49:13 cli Web App Manifest file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the icons content for your manifest.json file. You can copy/paste it manually \ud83d\ude4c [ { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } ] 11:49:13 cli Index html file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the iOS meta tags content for your index.html file. You can copy/paste it manually \ud83d\ude4c <link rel=\"apple-touch-icon\" href=\"icons/apple-icon-180.png\"> <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-2732.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2732-2048.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2388.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2388-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1536-2048.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-1536.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2224.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2224-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1620-2160.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2160-1620.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1284-2778.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2778-1284.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1170-2532.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2532-1170.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1125-2436.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2436-1125.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2688.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2688-1242.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-828-1792.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1792-828.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2208.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2208-1242.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-750-1334.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1334-750.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-640-1136.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1136-640.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> Wir h\u00e4tten auch die manifest.json mit angeben k\u00f6nnen (Flag m ) und auch die index.html (Flag -i ), aber wir kopieren die Ausgaben h\u00e4ndisch in die jeweiligen Dateien. Das JSON { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } kopieren wir in das icons -Array der manifest.json : manifest.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [ { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" } ], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } und die iOS meta tags in die index.html : index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" /> < link rel = \"manifest\" href = \"manifest.json\" > < link rel = \"apple-touch-icon\" href = \"icons/apple-icon-180.png\" > < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-2732.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2732-2048.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2388.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2388-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1536-2048.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-1536.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2224.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2224-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1620-2160.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2160-1620.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1284-2778.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2778-1284.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1170-2532.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2532-1170.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1125-2436.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2436-1125.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2688.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2688-1242.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-828-1792.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1792-828.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2208.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2208-1242.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-750-1334.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1334-750.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-640-1136.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1136-640.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den aktuellen Trends der IKT </ h1 > < script > if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( 'service-worker.js' ); } </ script > </ body > </ html > Prinzipiell w\u00e4re jetzt alles da, damit unsere Anwendung installiert werden kann. Jedoch gibt es derzeit keine M\u00f6glichkeit, dass die Anwendung auch offline verwendbar ist. Dazu ben\u00f6tigt es eine M\u00f6glichkeit des Cachings von Daten. Ohne jetzt schon wirklich zu wissen, was wir tun, passen wir die service-worker.js wie folgt an: service-worker.js importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Wir haben also bereits mehrer Sachen identifiziert, mit denen wir uns besch\u00e4ftigen wollen: Manifest , Service worker und Caching und das sind auch genau die Themen der kommenden Wochen. Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"Einf\u00fchrung"},{"location":"einfuehrung/#einfuhrung","text":"In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt.","title":"Einf\u00fchrung"},{"location":"einfuehrung/#webanwendungen-vs-native-apps","text":"Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang","title":"Webanwendungen vs. native Apps"},{"location":"einfuehrung/#links-und-videos","text":"Hier zwei kurze Einf\u00fchrungsvideos zu PWAs: Progressive Web Apps in 100 Seconds Progressive Web Apps - PWA Roadshow Hier einige intressante Links zu PWAs: Learn PWA Progressive Web-Apps: Was versprechen die progressiven Apps? Online Verzeichnis PWAs","title":"Links und Videos"},{"location":"einfuehrung/#pwas-vs-spas","text":"Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren.","title":"PWAs vs. SPAs"},{"location":"einfuehrung/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048.love2dev.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-)","title":"Lighthouse"},{"location":"einfuehrung/#pwa-checklist","text":"Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier .","title":"PWA Checklist"},{"location":"einfuehrung/#erstes-kleines-beispiel","text":"Wir erstellen uns in einem Ordner eine index.html mit index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > </ body > </ html > Einen gro\u00dfen Teil unserer Untersuchungen in diesem Modul nehmen Web APIs ein. Wir werden einige von Ihnen n\u00e4her beleuchten. Das zentrale Konzept von PWAs sind ServiceWorker . Wir erstellen uns in unserem Ordner eine Datei service-worker.js und binden diese in unsere index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die service-worker.js schreiben wir zun\u00e4chst nur service-worker.js console . log ( 'service worker registriert' ); Wir starten die Anwendung (z.B. mit npx serve ) und schalten die Entwicklertools ein. Auf der Konsole erscheint service worker registriert . Wir wechseln nach Application --> Service Worker und sehen den aktiven service-worker.js . Wenn wir die Anwendung im Browser erneut laden, erscheint die Ausgabe nicht erneut. Wir \u00e4ndern den Service worker, z.B. auf console.log('neuer service worker registriert ) und laden die Anwendung erneut. Die Ausgabe erscheint. Wechseln sie erneut nach Application --> Service Worker . Der Service worker l\u00e4uft auch dann noch, wenn die Anwendung geschlossen ist!","title":"Erstes kleines Beispiel"},{"location":"einfuehrung/#installierbar","text":"Wenn wir unter Lighthouse einen Report generieren, dann sieht es zwar prinzipiell schon ganz gut aus, es handelt sich aber auch noch nicht um eine PWA, da sie (noch) nicht installierbar ist. Wir werden n\u00e4chste Woche damit beginnen, unsere App installierbar zu machen. Hier \"verraten\" wir aber bereits, dass wir dazu eine manifest.json ben\u00f6tigen. Diese erstellen wir und binden sie in die index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < link rel = \"manifest\" href = \"manifest.json\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die manifest.json tragen wir ein: manifest.json 1 2 3 4 5 6 7 8 9 10 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } Wir kommen zu den einzelnen Eigenschaften n\u00e4chste Woche noch ausf\u00fchrlich. Die manifest.json ist jedoch noch nicht vollst\u00e4ndig, da das icons -Array noch bef\u00fcllt werden muss. In dieses Array tragen wir alle Bilder ein, die als Icons auf dem Startbildschirm verwendet werden sollen, je nach Aufl\u00f6sung des Ger\u00e4tes, auf dem die Anwendung gestartet werden soll. Die Generierung dieser Icons wird uns zum Gl\u00fcck abgenommen. Wir erstellen die Icons auf Basis eines Icons, das in recht gro\u00dfer Aufl\u00f6sung vorliegt. F\u00fcgen Sie dazu das fiwlogo in Ihren Projektordner ein. Wir nutzen den pwa-asset-generator . Im Terminal geben wir in unserem Projektordner ein: npx pwa-asset-generator fiwlogo.png icons Dabei ist fiwlogo.png das Icon, auf dessen Basis alle weiteren Icons erzeugt werden sollen und diese sollen in den Ordner icons erstellt werden. Die Ausgabe ist ungef\u00e4hr wie folgt: 11:49:08 getSplashScreenMetaData Initialising puppeteer to load latest splash screen metadata \ud83e\udd16 11:49:08 getAppleSplashScreenData Navigating to Apple Human Interface Guidelines website - https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/ 11:49:10 getAppleSplashScreenData Waiting for the data table to be loaded 11:49:10 getAppleSplashScreenData Retrieved splash screen data 11:49:10 getSplashScreenMetaData Loaded metadata for iOS platform \ud83d\ude4c 11:49:11 generateImages Looks like folder icons doesn't exist. Created one for you \ud83e\udd14 11:49:11 saveImages Initialising puppeteer to take screenshots \ud83e\udd16 11:49:11 getShellHtml Generating shell html with provided image source 11:49:11 getShellHtml Providing shell html as page content 11:49:12 saveImages Saved image apple-splash-2388-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2732-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1536-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-1536 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2388 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-2732 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2224 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2224-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1620-2160 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2436-1125 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1242-2688 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2532-1170 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2160-1620 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1125-2436 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1284-2778 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1242-2208 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1792-828 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1170-2532 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-192 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-512 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2778-1284 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2208-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1136-640 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2688-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-750-1334 \ud83d\ude4c 11:49:13 saveImages Saved image apple-icon-180 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-640-1136 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1334-750 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-828-1792 \ud83d\ude4c 11:49:13 cli Web App Manifest file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the icons content for your manifest.json file. You can copy/paste it manually \ud83d\ude4c [ { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } ] 11:49:13 cli Index html file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the iOS meta tags content for your index.html file. You can copy/paste it manually \ud83d\ude4c <link rel=\"apple-touch-icon\" href=\"icons/apple-icon-180.png\"> <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-2732.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2732-2048.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2388.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2388-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1536-2048.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-1536.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2224.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2224-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1620-2160.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2160-1620.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1284-2778.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2778-1284.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1170-2532.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2532-1170.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1125-2436.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2436-1125.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2688.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2688-1242.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-828-1792.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1792-828.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2208.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2208-1242.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-750-1334.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1334-750.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-640-1136.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1136-640.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> Wir h\u00e4tten auch die manifest.json mit angeben k\u00f6nnen (Flag m ) und auch die index.html (Flag -i ), aber wir kopieren die Ausgaben h\u00e4ndisch in die jeweiligen Dateien. Das JSON { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } kopieren wir in das icons -Array der manifest.json : manifest.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [ { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" } ], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } und die iOS meta tags in die index.html : index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" /> < link rel = \"manifest\" href = \"manifest.json\" > < link rel = \"apple-touch-icon\" href = \"icons/apple-icon-180.png\" > < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-2732.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2732-2048.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2388.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2388-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1536-2048.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-1536.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2224.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2224-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1620-2160.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2160-1620.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1284-2778.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2778-1284.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1170-2532.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2532-1170.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1125-2436.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2436-1125.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2688.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2688-1242.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-828-1792.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1792-828.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2208.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2208-1242.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-750-1334.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1334-750.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-640-1136.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1136-640.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den aktuellen Trends der IKT </ h1 > < script > if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( 'service-worker.js' ); } </ script > </ body > </ html > Prinzipiell w\u00e4re jetzt alles da, damit unsere Anwendung installiert werden kann. Jedoch gibt es derzeit keine M\u00f6glichkeit, dass die Anwendung auch offline verwendbar ist. Dazu ben\u00f6tigt es eine M\u00f6glichkeit des Cachings von Daten. Ohne jetzt schon wirklich zu wissen, was wir tun, passen wir die service-worker.js wie folgt an: service-worker.js importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Wir haben also bereits mehrer Sachen identifiziert, mit denen wir uns besch\u00e4ftigen wollen: Manifest , Service worker und Caching und das sind auch genau die Themen der kommenden Wochen. Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"Installierbar"},{"location":"geolocation/","text":"Geolocation-API \u00b6 Hint Aktueller Stand vor Geolocation-API: Frontend Backend Collection post Collection post.files Collection post.chunks Die Geolocation-API wird von allen Browsern unterst\u00fctzt (sogar Internet Explorer). Es gibt viele Dokumentationen dar\u00fcber, z.B. hier , hier und hier . Die Verwendung ist recht einfach. In der index.html haben wir uns bereits einen Button erstellt, f\u00fcr den wir \"nur noch\" das click -Ereignis behandeln m\u00fcssen. public/index.html 83 84 85 86 < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > Zun\u00e4chst vereinfachen wir uns in der feed.js wieder den Zugriff auf den Button und den Spinner (Loader) und erstellen noch eine globale Variable fetchedLocation : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let file = null ; let titleValue = '' ; let locationValue = '' ; let imageURI = '' ; let locationButton = document . querySelector ( '#location-btn' ); let locationLoader = document . querySelector ( '#location-loader' ); let fetchedLocation ; und wir setzen den Loader in der feed.css auf unsichtbar: public/src/js/feed.css 23 24 25 # create-post # pick-image , # create-post # location-loader { display : none ; } create-post #pick-image stand dort schon, wir haben nur noch den Selektor #create-post #location-loader hinzugef\u00fcgt. Wir f\u00fcgen in der feed.js die Behandlung des click -Ereignisses f\u00fcr den Location -Button hinzu und auch noch, wie f\u00fcr die Kamera, eine initializeLocation() -Funktion, in der gepr\u00fcft wird, ob die Geolocation -API \u00fcberhaupt im Browser verf\u00fcgbar ist: public/src/js/feed.js 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 locationButton . addEventListener ( 'click' , event => { if ( ! ( 'geolocation' in navigator )) { return ; } locationButton . style . display = 'none' ; locationLoader . style . display = 'block' ; navigator . geolocation . getCurrentPosition ( position => { locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; fetchedLocation = { latitude : position . coords . latitude , longitude : position . coords . longitude }; console . log ( 'current position: ' , fetchedLocation ); locationInput . value = 'In Berlin' ; document . querySelector ( '#manual-location' ). classList . add ( 'is-focused' ); }, err => { console . log ( err ); locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; alert ( 'Couldn\\'t fetch location, please enter manually!' ); fetchedLocation = null ; }, { timeout : 5000 }); }); function initializeLocation () { if ( ! ( 'geolocation' in navigator )) { locationButton . style . display = 'none' ; } } In der initializeLocation() -Funktion wird gepr\u00fcft, ob der Browser die Geolocation -API unterst\u00fctzt. Wenn nicht, wird der Location -Button versteckt. Wir haben trotzdem, sicherheitshalber, die Abfrage nochmal in die Behandlung des click -Ereignisses f\u00fcr diesen Button eingef\u00fcgt (Zeilen 22-24 ), obwohl dies nicht wirklich notwendig ist, da der Button nicht angeklickt werden kann, wenn die Geolocation -API nicht unterst\u00fctzt wird, da er nicht angezeigt wird. Wenn auf den Button geklickt wurde, setzen wir den Button selbst auf unsichtbar (Zeile 26 ) und den Spinner (Loader) auf sichtbar (Zeile 27 ). Zeile 29 zeigt den eigentlichen Zugriff auf die aktuelle Position. Dort wird die Funktion getCurrentPosition() der Geolocation -API aufgerufen. Wir \u00fcbergeben drei Parameter: der erste Parameter ist die (Callback-)Funktion, die die aktuelle Position zur\u00fcckgibt. Wenn diese Funktion ausgef\u00fchrt wird, setzen wir den Button wieder auf sichtbar (Zeile 30 ) und den Loader auf unsichtbar (Zeile 31 ). Die aktuelle Position position enth\u00e4lt die Eigenschaft coords , die die latitude und longitude als Werte enth\u00e4lt (siehe GeolocationPosition und GeolocationCoordinates ). Diese Position geben wir auf der Konsole aus (Zeile 33 ). Wir bef\u00fcllen das locationInput -Eingabefeld noch mit einem Dummy-Wert und fokussieren auf das Eingabefeld (Zeilen 34-35 ). der zweite Parameter ist eine Funktion, die ausgef\u00fchrt wird, wenn ein Fehler auftritt. M\u00f6gliche Fehler sind, dass im Browser der Zugriff auf die Position deaktiviert wurde, dass die Nutzerin den Zugriff auf die aktuelle Position blockiert hat oder dass die Position nicht \"schnell genug\" ermittelt werden konnte. Im Fehlerfall geben wir den Fehler auf der Konsole aus und schalten den Button wieder ein und den Loader wieder aus (Zeilen 37-39 ). der dritte Parameter ist ein JavaScript-Objekt mit options . Wir w\u00e4hlen hier nur eine einzige Option, n\u00e4mlich wie lange nach der aktuellen Position gesucht werden soll. In der Einstellung erfolgt der timeout nach 5 sek . Wir passen nun in der feed.js noch die beiden Funktionen openCreatePostModal() und closeCreatePostModal() an: public/src/js/feed.js 80 81 82 83 84 85 86 87 88 89 90 91 92 93 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); initializeLocation (); } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; } Wenn Sie die Anwendung nun starten, werden Sie gefragt, ob Sie die Abfrage nach Ihrem Standort zulassen oder blockieren wollen. Die meisten von Ihnen werden aber die Ortungsdienste ausgeschaltet haben. Dann ist auch die Abfrage zun\u00e4chst egal. Im Mac kann man diese (kurzzeitig, dann wieder ausschalten) \u00fcber Systemeinstellungen --> Sicherheit & Datenschutz --> Reiter Datenschutz --> Ortungsdienste f\u00fcr Google Chrome aktivieren. Wenn Sie die Positionsbestimmung zulassen, dann wird nach dem Klicken auf den Location -Button die aktuelle Position auf der Konsole eingegeben und im Formular erscheint unter Ort In Berlin . Wir machen nichts weiter mit der aktuellen Position. Es gibt viele M\u00f6glichkeiten, die jetzt noch ausprobiert werden k\u00f6nnten. Dazu geh\u00f6ren besipeilsweise: Wir k\u00f6nnten mithilfe der Google-Geolocation-API die Adresse ermitteln, die Google f\u00fcr eine gegebene Position ( longitude und latitude ) zur\u00fcckgibt. Dazu br\u00e4uchten wir aber auch einen API-Key von Google. Wir k\u00f6nnten das Gleiche mit der Nominatim-API f\u00fcr Open Street Map machen. Sie k\u00f6nnen den Service hier einmal ausprobieren , indem Sie Ihre latitude und longitude aus der Konsolenausgabe eingeben. Wir k\u00f6nnten OpenLayers verwenden, um die Position auf einer Karte anzuzeigen. Wir k\u00f6nnten die Datenbank erweitern und f\u00fcr alle Posts auch noch die Koordinaten der Position abspeichern und dann alle Posts auf einer Karte (mithilfe von OpenLayers + OpenStreetMap) visualisieren. Beispiel nominatim.org \u00b6 Die oben genannten Verwendungsbeispiele sind alle relativ einfach, da die jeweiligen APIs wirklich gut sind. Wir zeigen hier exemplarisch die Verwendung der Nominatim-API , mit deren Hilfe wir f\u00fcr gegebene Breiten- und L\u00e4ngengrade ein Adress-Objekt zur\u00fcckbekommen. Genauer gesagt, handelt es sich um ein Open Street Map (OSM) -Objekt. Einen groben \u00dcberblick \u00fcber die Endpunkte der Nominatim-API erhalten Sie hier . Uns interessiert dabei insbesondere der /reverse-Endpunkt , der ein OSM-Objekt f\u00fcr eine gegebene Lokation zur\u00fcckgibt. Prinzipiell sieht die Anfrage wie folgt aus: https://nominatim.openstreetmap.org/reverse?format = <value> & lat = <value> & lon = <value> & <params> Als R\u00fcckgabe- format kann einer der folgenden Werte verwendet werden: [xml|json|jsonv2|geojson|geocodejson] . Der Standard ist xml . Wir sollten am besten jsonv2 verwenden. F\u00fcr lat und long setzen wir die latitude und longitude ein, die wir in fetchedLocation speichern. F\u00fcr m\u00f6gliche weitere Parameter <params> , wie z.B. zoom , extratags oder namedetails , schauen Sie hier . Wenn wir z.B. folgende Anfrage stellen: GET https://nominatim.openstreetmap.org/reverse?format = jsonv2 & lat = 52 .457310 & lon = 13 .526877 erhalten wir als Response folgendes JSON: { \"place_id\" : 106322469 , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"osm_type\" : \"way\" , \"osm_id\" : 25346348 , \"lat\" : \"52.45699635\" , \"lon\" : \"13.526577702867113\" , \"place_rank\" : 30 , \"category\" : \"building\" , \"type\" : \"university\" , \"importance\" : 0 , \"addresstype\" : \"building\" , \"name\" : \"Geb\u00e4ude C\" , \"display_name\" : \"Geb\u00e4ude C, Johannes-Kraaz-Stra\u00dfe, Obersch\u00f6neweide, Treptow-K\u00f6penick, Berlin, 12459, Deutschland\" , \"address\" : { \"building\" : \"Geb\u00e4ude C\" , \"road\" : \"Johannes-Kraaz-Stra\u00dfe\" , \"suburb\" : \"Obersch\u00f6neweide\" , \"borough\" : \"Treptow-K\u00f6penick\" , \"city\" : \"Berlin\" , \"state\" : \"Berlin\" , \"postcode\" : \"12459\" , \"country\" : \"Deutschland\" , \"country_code\" : \"de\" }, \"boundingbox\" : [ \"52.4561412\" , \"52.4577257\" , \"13.5255179\" , \"13.5274139\" ] } Wir k\u00f6nnten nun einen ausgew\u00e4hlten Wert in unser Formular \u00fcbernehmen, z.B. display_name oder suburb oder city . Wir zeigen im Folgenden die \u00dcbernahme von display_name in das Eingabeformular: public/src/js/feed.js 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 locationButton . addEventListener ( 'click' , event => { if ( ! ( 'geolocation' in navigator )) { return ; } locationButton . style . display = 'none' ; locationLoader . style . display = 'block' ; navigator . geolocation . getCurrentPosition ( position => { locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; fetchedLocation = { latitude : position . coords . latitude , longitude : position . coords . longitude }; console . log ( 'current position: ' , fetchedLocation ); let nominatimURL = 'https://nominatim.openstreetmap.org/reverse' ; nominatimURL += '?format=jsonv2' ; // format=[xml|json|jsonv2|geojson|geocodejson] nominatimURL += '&lat=' + fetchedLocation . latitude ; nominatimURL += '&lon=' + fetchedLocation . longitude ; fetch ( nominatimURL ) . then (( res ) => { console . log ( 'nominatim res ...' , res ); return res . json (); }) . then (( data ) => { console . log ( 'nominatim res.json() ...' , data ); locationInput . value = data . display_name ; }) . catch ( ( err ) => { console . error ( 'err' , err ) locationInput . value = 'In Berlin' ; }); document . querySelector ( '#manual-location' ). classList . add ( 'is-focused' ); }, err => { console . log ( err ); locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; alert ( 'Couldn\\'t fetch location, please enter manually!' ); fetchedLocation = null ; }, { timeout : 5000 }); }); In den Zeilen 35-38 setzen wir die URL zusammen, unter der wir nominatim.org anfragen. In Zeile 40 erfolgt die Anfrage mithilfe der fetch -API. Wir erhalten ein Response -Objekt zur\u00fcck, das wir mithilfe von res.json() so extrahieren, dass es dem oben gezeigten JSON entspricht. Beispiel OpenLayers.org \u00b6 OpenLayers stellt eine Bibliothek von JavaScript- und CSS-Funktionalit\u00e4ten bereit, um Landkarten in die Webanwendung einzubinden. Wir zeigen die Anwendung hier an einer sehr einfachen Einf\u00fchrung, die im Prinzip dem Einf\u00fchrungsbeispiel von OpenLayers entspricht. Einbinden in die index.html \u00b6 Zun\u00e4chst kann die CSS- und JavaScript-Bibliothek \u00fcber ein CDN eingebunden werden: Auszug index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.14.1/css/ol.css\" type = \"text/css\" > < script src = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.14.1/build/ol.js\" ></ script > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"manifest.webmanifest\" > <!-- und hier der Rest --> Dann integrieren wir ein <div> -Element, in dem sp\u00e4ter die Landkarte erscheint: Auszug index.html 84 85 86 87 88 89 90 91 92 93 94 95 96 < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > < div id = \"map\" class = \"map\" ></ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > Anpassen der feed.css \u00b6 Zun\u00e4chst m\u00fcssen wir in der feed.js einen Selektor \u00e4ndern. Wir haben die map innerhalb des div mit der id=\"create-post\" angelegt. In der feed.js befindet sich folgender Eintrag: feed.js 16 17 18 19 20 21 # create-post video , # create-post canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } Wir sprechen also alle HTML-Elemente video und canvas an, die sich im div mit der id=\"create-post\" befinden. Allerdings wird unsere map auch ein canvas -Element enthalten, welches ebenfalls mit angesprochen (und auf display: none gesetzt) werden w\u00fcrde. Wir spezialisieren diese Selektoren nun, indem wir jeweils die id s des video - und des canvas -Elementes verwenden, die sich um die Aufnahme des Fotos k\u00fcmmern: feed.js 16 17 18 19 20 21 # create-post # player , # create-post # canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } Nun k\u00f6nnen wir die Eigenschaften hinzuf\u00fcgen, die f\u00fcr die map relevant sind: feed.js 62 63 64 65 66 # create-post . map { height : 40 % ; width : 100 % ; display : none ; } Sie k\u00f6nnen f\u00fcr H\u00f6he und Breite auch andere relative oder auch absolute Werte setzen. Zun\u00e4chst ist das div mit der CSS-Klasse map aber auf nicht sichtbar gesetzt. Anpassen der feed.js \u00b6 In der feed.js erweitern wir die fetch() -Anfrage an nominatim.org . Diese sieht bis jetzt so aus: public/src/js/feed.js 40 41 42 43 44 45 46 47 48 49 50 51 52 fetch ( nominatimURL ) . then (( res ) => { console . log ( 'nominatim res ...' , res ); return res . json (); }) . then (( data ) => { console . log ( 'nominatim res.json() ...' , data ); locationInput . value = data . display_name ; }) . catch ( ( err ) => { console . error ( 'err' , err ) locationInput . value = 'In Berlin' ; }); Siehe die feed.js aus Beispiel nominatim.org oben. Unter Verwendung der Variablen fetchedLocation , die die longitude und latitude unseres Standortes enth\u00e4lt, f\u00fcgen wir nun die Erstellung einer Map mithilfe von OpenLayers hinzu: public/src/js/feed.js 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 fetch ( nominatimURL ) . then (( res ) => { console . log ( 'nominatim res ...' , res ); return res . json (); }) . then (( data ) => { console . log ( 'nominatim res.json() ...' , data ); locationInput . value = data . display_name ; return data ; }) . then ( d => { locationButton . style . display = 'none' ; locationLoader . style . display = 'none' ; mapDiv . style . display = 'block' ; const map = new ol . Map ({ target : 'map' , layers : [ new ol . layer . Tile ({ source : new ol . source . OSM () }) ], view : new ol . View ({ center : ol . proj . fromLonLat ([ fetchedLocation . longitude , fetchedLocation . latitude ]), zoom : 12 }) }); const layer = new ol . layer . Vector ({ source : new ol . source . Vector ({ features : [ new ol . Feature ({ geometry : new ol . geom . Point ( ol . proj . fromLonLat ([ fetchedLocation . longitude , fetchedLocation . latitude ])) }) ] }) }); map . addLayer ( layer ); console . log ( 'map' , map ) }) . catch ( ( err ) => { console . error ( 'err' , err ) locationInput . value = 'In Berlin' ; }); Mit new ol.Map() wird eine neue Map erstellt (Zeile 55 ). Dieses Map -Objekt wird mit target: 'map' dem div mit der id=\"map\" zugewiesen (Zeile 56 ). Das layers -Array enth\u00e4lt alle Schichten, die zur Map hinzugef\u00fcgt werden (Zeile 57 ). In unserem Fall wird eine Schicht hinzugef\u00fcgt, n\u00e4mlich eine Kachel ( Tile )-Schicht, die die Landkarte enth\u00e4lt. Diese wird in unserem Fall von der Quelle OSM (also Open Street Map ) geholt. Beachten Sie Ihre Konsole. Sie werden Eintr\u00e4ge in der folgenden Art darin finden: Das sind die Bilder, aus denen die Landkarte zusammengesetzt wird. Die eigentliche Ansicht wird mit view definiert. Wir erstellen ein einfaches View -Objekt, das durch den center -Punkt ( [fetchedLocation.longitude, fetchedLocation.latitude] ) und ein zoom -Level beschrieben wird (hier zoom:12 ). Je h\u00f6her das zoom -Level, je h\u00f6her wird hineingezoomt. Zoom-Level 0 zeigt die Welt. (Zeilen 62-65 ) Die Zeilen 55-65 gen\u00fcgen bereits, um die Karte anzuzeigen. Wir haben aber hier auch noch einen Marker f\u00fcr den aktuellen Standort hinzugef\u00fcgt. Dazu wird eine weitere Layer definiert und der Map mithilfe von map.addLayer() hinzugef\u00fcgt. Dies geschieht hier in den Zeilen 68-78 . Bei dem Marker handelt es sich hier um einen Point , der wiederum auf [fetchedLocation.longitude, fetchedLocation.latitude] gesetzt wird. Beachten Sie, dass die Reihenfolge sowohl in der View als auch beim Feature zun\u00e4chst longitude und dann latitude ist! Success Wir haben erfolgreich den Zugriff auf die Kamera (MediaDevices-API) und die Geolocation-API ausprobiert und in unsere Anwendung eingebunden. Die MediaDevices-API bietet neben der video -Eigenschaft auch noch die audio -Eigenschaft, um das Mikrofon zu verwenden. Neben der Geolocation-API haben wir auch zwei weitere Services bzw. Bibliotheken verwendet, n\u00e4mlich nomination.org und OpenLayers. Der Umgang mit den Karten kann beliebig erweitert werden. Beispielsweise k\u00f6nnten auch alle Blogs auf einer Landkarte angezeigt werden, je nachdem, wo sie erstellt wurden. Sie k\u00f6nnten anklickbar sein und dann detailliert angezeigt werden. Das ist alles relativ leicht m\u00f6glich. Ihrer Phantasie und Ihren M\u00f6glichkeiten sind hier keine Grenzen gesetzt. Wir k\u00f6nnten hier auch noch auf die Sensoren der Mobilger\u00e4te eingehen (z.B. Beschleunigungssensor). Das machen wir aber in diesem Semester nicht.","title":"Geolocation"},{"location":"geolocation/#geolocation-api","text":"Hint Aktueller Stand vor Geolocation-API: Frontend Backend Collection post Collection post.files Collection post.chunks Die Geolocation-API wird von allen Browsern unterst\u00fctzt (sogar Internet Explorer). Es gibt viele Dokumentationen dar\u00fcber, z.B. hier , hier und hier . Die Verwendung ist recht einfach. In der index.html haben wir uns bereits einen Button erstellt, f\u00fcr den wir \"nur noch\" das click -Ereignis behandeln m\u00fcssen. public/index.html 83 84 85 86 < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > Zun\u00e4chst vereinfachen wir uns in der feed.js wieder den Zugriff auf den Button und den Spinner (Loader) und erstellen noch eine globale Variable fetchedLocation : public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let file = null ; let titleValue = '' ; let locationValue = '' ; let imageURI = '' ; let locationButton = document . querySelector ( '#location-btn' ); let locationLoader = document . querySelector ( '#location-loader' ); let fetchedLocation ; und wir setzen den Loader in der feed.css auf unsichtbar: public/src/js/feed.css 23 24 25 # create-post # pick-image , # create-post # location-loader { display : none ; } create-post #pick-image stand dort schon, wir haben nur noch den Selektor #create-post #location-loader hinzugef\u00fcgt. Wir f\u00fcgen in der feed.js die Behandlung des click -Ereignisses f\u00fcr den Location -Button hinzu und auch noch, wie f\u00fcr die Kamera, eine initializeLocation() -Funktion, in der gepr\u00fcft wird, ob die Geolocation -API \u00fcberhaupt im Browser verf\u00fcgbar ist: public/src/js/feed.js 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 locationButton . addEventListener ( 'click' , event => { if ( ! ( 'geolocation' in navigator )) { return ; } locationButton . style . display = 'none' ; locationLoader . style . display = 'block' ; navigator . geolocation . getCurrentPosition ( position => { locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; fetchedLocation = { latitude : position . coords . latitude , longitude : position . coords . longitude }; console . log ( 'current position: ' , fetchedLocation ); locationInput . value = 'In Berlin' ; document . querySelector ( '#manual-location' ). classList . add ( 'is-focused' ); }, err => { console . log ( err ); locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; alert ( 'Couldn\\'t fetch location, please enter manually!' ); fetchedLocation = null ; }, { timeout : 5000 }); }); function initializeLocation () { if ( ! ( 'geolocation' in navigator )) { locationButton . style . display = 'none' ; } } In der initializeLocation() -Funktion wird gepr\u00fcft, ob der Browser die Geolocation -API unterst\u00fctzt. Wenn nicht, wird der Location -Button versteckt. Wir haben trotzdem, sicherheitshalber, die Abfrage nochmal in die Behandlung des click -Ereignisses f\u00fcr diesen Button eingef\u00fcgt (Zeilen 22-24 ), obwohl dies nicht wirklich notwendig ist, da der Button nicht angeklickt werden kann, wenn die Geolocation -API nicht unterst\u00fctzt wird, da er nicht angezeigt wird. Wenn auf den Button geklickt wurde, setzen wir den Button selbst auf unsichtbar (Zeile 26 ) und den Spinner (Loader) auf sichtbar (Zeile 27 ). Zeile 29 zeigt den eigentlichen Zugriff auf die aktuelle Position. Dort wird die Funktion getCurrentPosition() der Geolocation -API aufgerufen. Wir \u00fcbergeben drei Parameter: der erste Parameter ist die (Callback-)Funktion, die die aktuelle Position zur\u00fcckgibt. Wenn diese Funktion ausgef\u00fchrt wird, setzen wir den Button wieder auf sichtbar (Zeile 30 ) und den Loader auf unsichtbar (Zeile 31 ). Die aktuelle Position position enth\u00e4lt die Eigenschaft coords , die die latitude und longitude als Werte enth\u00e4lt (siehe GeolocationPosition und GeolocationCoordinates ). Diese Position geben wir auf der Konsole aus (Zeile 33 ). Wir bef\u00fcllen das locationInput -Eingabefeld noch mit einem Dummy-Wert und fokussieren auf das Eingabefeld (Zeilen 34-35 ). der zweite Parameter ist eine Funktion, die ausgef\u00fchrt wird, wenn ein Fehler auftritt. M\u00f6gliche Fehler sind, dass im Browser der Zugriff auf die Position deaktiviert wurde, dass die Nutzerin den Zugriff auf die aktuelle Position blockiert hat oder dass die Position nicht \"schnell genug\" ermittelt werden konnte. Im Fehlerfall geben wir den Fehler auf der Konsole aus und schalten den Button wieder ein und den Loader wieder aus (Zeilen 37-39 ). der dritte Parameter ist ein JavaScript-Objekt mit options . Wir w\u00e4hlen hier nur eine einzige Option, n\u00e4mlich wie lange nach der aktuellen Position gesucht werden soll. In der Einstellung erfolgt der timeout nach 5 sek . Wir passen nun in der feed.js noch die beiden Funktionen openCreatePostModal() und closeCreatePostModal() an: public/src/js/feed.js 80 81 82 83 84 85 86 87 88 89 90 91 92 93 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); initializeLocation (); } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; } Wenn Sie die Anwendung nun starten, werden Sie gefragt, ob Sie die Abfrage nach Ihrem Standort zulassen oder blockieren wollen. Die meisten von Ihnen werden aber die Ortungsdienste ausgeschaltet haben. Dann ist auch die Abfrage zun\u00e4chst egal. Im Mac kann man diese (kurzzeitig, dann wieder ausschalten) \u00fcber Systemeinstellungen --> Sicherheit & Datenschutz --> Reiter Datenschutz --> Ortungsdienste f\u00fcr Google Chrome aktivieren. Wenn Sie die Positionsbestimmung zulassen, dann wird nach dem Klicken auf den Location -Button die aktuelle Position auf der Konsole eingegeben und im Formular erscheint unter Ort In Berlin . Wir machen nichts weiter mit der aktuellen Position. Es gibt viele M\u00f6glichkeiten, die jetzt noch ausprobiert werden k\u00f6nnten. Dazu geh\u00f6ren besipeilsweise: Wir k\u00f6nnten mithilfe der Google-Geolocation-API die Adresse ermitteln, die Google f\u00fcr eine gegebene Position ( longitude und latitude ) zur\u00fcckgibt. Dazu br\u00e4uchten wir aber auch einen API-Key von Google. Wir k\u00f6nnten das Gleiche mit der Nominatim-API f\u00fcr Open Street Map machen. Sie k\u00f6nnen den Service hier einmal ausprobieren , indem Sie Ihre latitude und longitude aus der Konsolenausgabe eingeben. Wir k\u00f6nnten OpenLayers verwenden, um die Position auf einer Karte anzuzeigen. Wir k\u00f6nnten die Datenbank erweitern und f\u00fcr alle Posts auch noch die Koordinaten der Position abspeichern und dann alle Posts auf einer Karte (mithilfe von OpenLayers + OpenStreetMap) visualisieren.","title":"Geolocation-API"},{"location":"geolocation/#beispiel-nominatimorg","text":"Die oben genannten Verwendungsbeispiele sind alle relativ einfach, da die jeweiligen APIs wirklich gut sind. Wir zeigen hier exemplarisch die Verwendung der Nominatim-API , mit deren Hilfe wir f\u00fcr gegebene Breiten- und L\u00e4ngengrade ein Adress-Objekt zur\u00fcckbekommen. Genauer gesagt, handelt es sich um ein Open Street Map (OSM) -Objekt. Einen groben \u00dcberblick \u00fcber die Endpunkte der Nominatim-API erhalten Sie hier . Uns interessiert dabei insbesondere der /reverse-Endpunkt , der ein OSM-Objekt f\u00fcr eine gegebene Lokation zur\u00fcckgibt. Prinzipiell sieht die Anfrage wie folgt aus: https://nominatim.openstreetmap.org/reverse?format = <value> & lat = <value> & lon = <value> & <params> Als R\u00fcckgabe- format kann einer der folgenden Werte verwendet werden: [xml|json|jsonv2|geojson|geocodejson] . Der Standard ist xml . Wir sollten am besten jsonv2 verwenden. F\u00fcr lat und long setzen wir die latitude und longitude ein, die wir in fetchedLocation speichern. F\u00fcr m\u00f6gliche weitere Parameter <params> , wie z.B. zoom , extratags oder namedetails , schauen Sie hier . Wenn wir z.B. folgende Anfrage stellen: GET https://nominatim.openstreetmap.org/reverse?format = jsonv2 & lat = 52 .457310 & lon = 13 .526877 erhalten wir als Response folgendes JSON: { \"place_id\" : 106322469 , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"osm_type\" : \"way\" , \"osm_id\" : 25346348 , \"lat\" : \"52.45699635\" , \"lon\" : \"13.526577702867113\" , \"place_rank\" : 30 , \"category\" : \"building\" , \"type\" : \"university\" , \"importance\" : 0 , \"addresstype\" : \"building\" , \"name\" : \"Geb\u00e4ude C\" , \"display_name\" : \"Geb\u00e4ude C, Johannes-Kraaz-Stra\u00dfe, Obersch\u00f6neweide, Treptow-K\u00f6penick, Berlin, 12459, Deutschland\" , \"address\" : { \"building\" : \"Geb\u00e4ude C\" , \"road\" : \"Johannes-Kraaz-Stra\u00dfe\" , \"suburb\" : \"Obersch\u00f6neweide\" , \"borough\" : \"Treptow-K\u00f6penick\" , \"city\" : \"Berlin\" , \"state\" : \"Berlin\" , \"postcode\" : \"12459\" , \"country\" : \"Deutschland\" , \"country_code\" : \"de\" }, \"boundingbox\" : [ \"52.4561412\" , \"52.4577257\" , \"13.5255179\" , \"13.5274139\" ] } Wir k\u00f6nnten nun einen ausgew\u00e4hlten Wert in unser Formular \u00fcbernehmen, z.B. display_name oder suburb oder city . Wir zeigen im Folgenden die \u00dcbernahme von display_name in das Eingabeformular: public/src/js/feed.js 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 locationButton . addEventListener ( 'click' , event => { if ( ! ( 'geolocation' in navigator )) { return ; } locationButton . style . display = 'none' ; locationLoader . style . display = 'block' ; navigator . geolocation . getCurrentPosition ( position => { locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; fetchedLocation = { latitude : position . coords . latitude , longitude : position . coords . longitude }; console . log ( 'current position: ' , fetchedLocation ); let nominatimURL = 'https://nominatim.openstreetmap.org/reverse' ; nominatimURL += '?format=jsonv2' ; // format=[xml|json|jsonv2|geojson|geocodejson] nominatimURL += '&lat=' + fetchedLocation . latitude ; nominatimURL += '&lon=' + fetchedLocation . longitude ; fetch ( nominatimURL ) . then (( res ) => { console . log ( 'nominatim res ...' , res ); return res . json (); }) . then (( data ) => { console . log ( 'nominatim res.json() ...' , data ); locationInput . value = data . display_name ; }) . catch ( ( err ) => { console . error ( 'err' , err ) locationInput . value = 'In Berlin' ; }); document . querySelector ( '#manual-location' ). classList . add ( 'is-focused' ); }, err => { console . log ( err ); locationButton . style . display = 'inline' ; locationLoader . style . display = 'none' ; alert ( 'Couldn\\'t fetch location, please enter manually!' ); fetchedLocation = null ; }, { timeout : 5000 }); }); In den Zeilen 35-38 setzen wir die URL zusammen, unter der wir nominatim.org anfragen. In Zeile 40 erfolgt die Anfrage mithilfe der fetch -API. Wir erhalten ein Response -Objekt zur\u00fcck, das wir mithilfe von res.json() so extrahieren, dass es dem oben gezeigten JSON entspricht.","title":"Beispiel nominatim.org"},{"location":"geolocation/#beispiel-openlayersorg","text":"OpenLayers stellt eine Bibliothek von JavaScript- und CSS-Funktionalit\u00e4ten bereit, um Landkarten in die Webanwendung einzubinden. Wir zeigen die Anwendung hier an einer sehr einfachen Einf\u00fchrung, die im Prinzip dem Einf\u00fchrungsbeispiel von OpenLayers entspricht.","title":"Beispiel OpenLayers.org"},{"location":"geolocation/#einbinden-in-die-indexhtml","text":"Zun\u00e4chst kann die CSS- und JavaScript-Bibliothek \u00fcber ein CDN eingebunden werden: Auszug index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.14.1/css/ol.css\" type = \"text/css\" > < script src = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.14.1/build/ol.js\" ></ script > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"manifest.webmanifest\" > <!-- und hier der Rest --> Dann integrieren wir ein <div> -Element, in dem sp\u00e4ter die Landkarte erscheint: Auszug index.html 84 85 86 87 88 89 90 91 92 93 94 95 96 < div class = \"input-section\" > < button class = \"mdl-button mdl-js-button mdl-button--colored\" type = \"button\" id = \"location-btn\" > Location </ button > < div class = \"mdl-spinner mdl-js-spinner is-active\" id = \"location-loader\" ></ div > </ div > < div id = \"map\" class = \"map\" ></ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div >","title":"Einbinden in die index.html"},{"location":"geolocation/#anpassen-der-feedcss","text":"Zun\u00e4chst m\u00fcssen wir in der feed.js einen Selektor \u00e4ndern. Wir haben die map innerhalb des div mit der id=\"create-post\" angelegt. In der feed.js befindet sich folgender Eintrag: feed.js 16 17 18 19 20 21 # create-post video , # create-post canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } Wir sprechen also alle HTML-Elemente video und canvas an, die sich im div mit der id=\"create-post\" befinden. Allerdings wird unsere map auch ein canvas -Element enthalten, welches ebenfalls mit angesprochen (und auf display: none gesetzt) werden w\u00fcrde. Wir spezialisieren diese Selektoren nun, indem wir jeweils die id s des video - und des canvas -Elementes verwenden, die sich um die Aufnahme des Fotos k\u00fcmmern: feed.js 16 17 18 19 20 21 # create-post # player , # create-post # canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } Nun k\u00f6nnen wir die Eigenschaften hinzuf\u00fcgen, die f\u00fcr die map relevant sind: feed.js 62 63 64 65 66 # create-post . map { height : 40 % ; width : 100 % ; display : none ; } Sie k\u00f6nnen f\u00fcr H\u00f6he und Breite auch andere relative oder auch absolute Werte setzen. Zun\u00e4chst ist das div mit der CSS-Klasse map aber auf nicht sichtbar gesetzt.","title":"Anpassen der feed.css"},{"location":"geolocation/#anpassen-der-feedjs","text":"In der feed.js erweitern wir die fetch() -Anfrage an nominatim.org . Diese sieht bis jetzt so aus: public/src/js/feed.js 40 41 42 43 44 45 46 47 48 49 50 51 52 fetch ( nominatimURL ) . then (( res ) => { console . log ( 'nominatim res ...' , res ); return res . json (); }) . then (( data ) => { console . log ( 'nominatim res.json() ...' , data ); locationInput . value = data . display_name ; }) . catch ( ( err ) => { console . error ( 'err' , err ) locationInput . value = 'In Berlin' ; }); Siehe die feed.js aus Beispiel nominatim.org oben. Unter Verwendung der Variablen fetchedLocation , die die longitude und latitude unseres Standortes enth\u00e4lt, f\u00fcgen wir nun die Erstellung einer Map mithilfe von OpenLayers hinzu: public/src/js/feed.js 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 fetch ( nominatimURL ) . then (( res ) => { console . log ( 'nominatim res ...' , res ); return res . json (); }) . then (( data ) => { console . log ( 'nominatim res.json() ...' , data ); locationInput . value = data . display_name ; return data ; }) . then ( d => { locationButton . style . display = 'none' ; locationLoader . style . display = 'none' ; mapDiv . style . display = 'block' ; const map = new ol . Map ({ target : 'map' , layers : [ new ol . layer . Tile ({ source : new ol . source . OSM () }) ], view : new ol . View ({ center : ol . proj . fromLonLat ([ fetchedLocation . longitude , fetchedLocation . latitude ]), zoom : 12 }) }); const layer = new ol . layer . Vector ({ source : new ol . source . Vector ({ features : [ new ol . Feature ({ geometry : new ol . geom . Point ( ol . proj . fromLonLat ([ fetchedLocation . longitude , fetchedLocation . latitude ])) }) ] }) }); map . addLayer ( layer ); console . log ( 'map' , map ) }) . catch ( ( err ) => { console . error ( 'err' , err ) locationInput . value = 'In Berlin' ; }); Mit new ol.Map() wird eine neue Map erstellt (Zeile 55 ). Dieses Map -Objekt wird mit target: 'map' dem div mit der id=\"map\" zugewiesen (Zeile 56 ). Das layers -Array enth\u00e4lt alle Schichten, die zur Map hinzugef\u00fcgt werden (Zeile 57 ). In unserem Fall wird eine Schicht hinzugef\u00fcgt, n\u00e4mlich eine Kachel ( Tile )-Schicht, die die Landkarte enth\u00e4lt. Diese wird in unserem Fall von der Quelle OSM (also Open Street Map ) geholt. Beachten Sie Ihre Konsole. Sie werden Eintr\u00e4ge in der folgenden Art darin finden: Das sind die Bilder, aus denen die Landkarte zusammengesetzt wird. Die eigentliche Ansicht wird mit view definiert. Wir erstellen ein einfaches View -Objekt, das durch den center -Punkt ( [fetchedLocation.longitude, fetchedLocation.latitude] ) und ein zoom -Level beschrieben wird (hier zoom:12 ). Je h\u00f6her das zoom -Level, je h\u00f6her wird hineingezoomt. Zoom-Level 0 zeigt die Welt. (Zeilen 62-65 ) Die Zeilen 55-65 gen\u00fcgen bereits, um die Karte anzuzeigen. Wir haben aber hier auch noch einen Marker f\u00fcr den aktuellen Standort hinzugef\u00fcgt. Dazu wird eine weitere Layer definiert und der Map mithilfe von map.addLayer() hinzugef\u00fcgt. Dies geschieht hier in den Zeilen 68-78 . Bei dem Marker handelt es sich hier um einen Point , der wiederum auf [fetchedLocation.longitude, fetchedLocation.latitude] gesetzt wird. Beachten Sie, dass die Reihenfolge sowohl in der View als auch beim Feature zun\u00e4chst longitude und dann latitude ist! Success Wir haben erfolgreich den Zugriff auf die Kamera (MediaDevices-API) und die Geolocation-API ausprobiert und in unsere Anwendung eingebunden. Die MediaDevices-API bietet neben der video -Eigenschaft auch noch die audio -Eigenschaft, um das Mikrofon zu verwenden. Neben der Geolocation-API haben wir auch zwei weitere Services bzw. Bibliotheken verwendet, n\u00e4mlich nomination.org und OpenLayers. Der Umgang mit den Karten kann beliebig erweitert werden. Beispielsweise k\u00f6nnten auch alle Blogs auf einer Landkarte angezeigt werden, je nachdem, wo sie erstellt wurden. Sie k\u00f6nnten anklickbar sein und dann detailliert angezeigt werden. Das ist alles relativ leicht m\u00f6glich. Ihrer Phantasie und Ihren M\u00f6glichkeiten sind hier keine Grenzen gesetzt. Wir k\u00f6nnten hier auch noch auf die Sensoren der Mobilger\u00e4te eingehen (z.B. Beschleunigungssensor). Das machen wir aber in diesem Semester nicht.","title":"Anpassen der feed.js"},{"location":"grundgeruest/","text":"Grundger\u00fcst unserer PWA \u00b6 Wir beginnen jetzt mit der Implementierung von progressive Funktionalit\u00e4ten. Das machen wir, indem wir sukzessive eine Progressive Web App erstellen, die viele der derzeit verf\u00fcgbaren Funktionalit\u00e4ten enth\u00e4lt, die derzeit f\u00fcr Progressive Web Apps verf\u00fcgbar sind. Das Grundger\u00fcst (oder der Ausgangspunkt) unserer PWA wird deshalb zur Verf\u00fcgung gestellt, weil wir uns nicht um die Implementierung von HTML, CSS und JavaScript, sondern nur um die progressive Funktionalit\u00e4ten k\u00fcmmern wollen. Auf Basis dieses Grundger\u00fcstes werden sukzessive Funktionalit\u00e4ten, wie Push-Notifikationen, Offline-Verwendung, Geolocation, Kameranutzung usw. hinzuf\u00fcgen. Die Idee ist, dass wir eine Art HTW-Instagram erstellen. Ich habe Instagram aber noch nie genutzt, deshalb wei\u00df ich nicht, ob wir dem \"Original\" nahe kommen werden. Wahrscheinlich nicht, aber daf\u00fcr behalten wir unsere Daten auch bei uns. Installation \u00b6 Den Quellcode f\u00fcr das Grundger\u00fcst finden Sie hier (GitHub) . Clonen Sie sich das Projekt in einem Ordner Ihrer Wahl und folgen Sie dann der README.MD : Zum Ausf\u00fchren des Projektes wird Node.js verendet. Sie m\u00fcssen es auf Ihren Rechner installieren. In der Wahl Ihrer IDE sind Sie v\u00f6llig frei. Empfehlungen finden Sie unter https://freiheit.f4.htw-berlin.de/ikt/tools/#integrated-development-environment-ide Zum Starten des Projektes wechseln Sie im Terminal (Terminal Ihres Rechners oder das Terminal in der IDE) in den Projektordner ( cd IKT-PWA-01 ) und f\u00fchren dort npm install aus. Damit werden alle erforderlichen Abh\u00e4ngigkeiten installiert. Nach erfolgreicher Installation der Abh\u00e4ngigkeiten, geben Sie npm start ein (oder genereller: npm run start ), um Ihr Projekt auszuf\u00fchren. Klicken Sie danach auf localhost:8080 oder geben Sie die URL direkt in Ihren Browser ein. Starten \u00b6 Starten Sie das Projekt mit npm start (nachdem Sie einmalig npm install ausgef\u00fchrt haben) und \u00f6ffnen Sie dann den Browser mit der URL http://localhost:8080/ . Es erscheint bzw. wenn Sie die Viewport-Breite verkleinern . Sie erkennen wahrscheinlich schon, dass wir Material Design Lite verwenden. Die Navigationskomponente kennen wir auch schon aus WebTech. Wenn Sie auf den + -Button klicken, erscheint ein kleines Men\u00fc. Dort k\u00f6nnen Sie zwar schon etwas eintragen, aber der SPEICHERN -Button funktioniert noch nicht. Auch beim BENACHRICHTIGUNGEN EIN -Button ist noch keine Ereignisbehandlung hinterlegt. Wenn Sie im Men\u00fc Hilfe klicken, \u00f6ffnet sich die (fast leere) Hilfe-Seite. Schalten Sie beim Betrachten der Anwendung stets die DeveloperTools ein. Sie k\u00f6nnen dort sehr leicht auf die mobile Ansicht wechseln. Wichtig ist, dass Sie - zum besseren Ausprobieren der Anwendung - in den DeveloperTools unter dem Reiter Network ein H\u00e4kchen bei Disable Cache setzen. Wir wollen in Zukunft das Caching unseren Service workern \u00fcberlassen und nicht den Cache des Browsers verwenden. Projekt \u00b6 Bevor wir loslegen, werfen wir noch einen kurzen Blick auf die bisherigen Dateien im Projekt. Wir beginnen mit der index.html aus dem public -Ordner. public/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div id = \"create-post\" > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > < img src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > < div class = \"page-content\" > < h5 class = \"text-center mdl-color-text--primary\" > HTW-Insta </ h5 > < div id = \"shared-moments\" ></ div > </ div > < div class = \"floating-button\" > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" id = \"share-image-button\" > < i class = \"material-icons\" > add </ i > </ button > </ div > < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Sie sieht recht umfangreich aus. Tats\u00e4chlich ist aber das meiste darin f\u00fcr das Navigationstemplate. Die Zeilen 21-36 und 38-49 beschreiben das gleiche, n\u00e4mlich die Navigationsleiste. Der obere Block ist f\u00fcr breite Viewports (Klasse mdl-layout--large-screen-only ). Alle mdl -Klassen sind von Material. Einen guten \u00dcberblick \u00fcber die einzelnen Material-Komponenten finden Sie hier . N\u00e4heres zu den Navigationen finden Sie darin z.B. hier . Dann kommt das Bild (Zeilen 75-77 ), dann der Text HTW Insta (Zeilen 78-81 ) und dann der + -Button (Zeilen 82-87 ). In den Zeilen 88-91 ist bereits eine Best\u00e4tigungsnachricht hinterlegt, derzeit aber noch hidden . In den eingeundenen eigenen Stylesheets app.css und feed.css steht nicht viel: public/src/css/app.css 1 2 3 4 5 6 7 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; display : none ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } Kurze Erinnerung an CSS: Punktselektoren beschreiben Klassen (z.B. .input-selection ) und #-Selektoren beschreiben Ids (z.B. #create-post ). Sie k\u00f6nnen die Anwendung der Klassen und der Ids ja mal in der index.html suchen, wenn Sie m\u00f6chten. Die public/help/index.html enth\u00e4lt noch weniger als die public/index.html . Erw\u00e4hnenswert ist hier, dass wir mit einem Framework wie z.B. Angular nat\u00fcrlich der Navigation eine eigenen Komponente spendiert und diese nicht in beiden Dateien wiederholt h\u00e4tten. public/help/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Help </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/help.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/settings\" > Einstellungen </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Feed </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Help </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Brauchst Du Hilfe? </ h3 > < p > Hier erf\u00e4hrst Du, wie Du die App benutzen und neue Bildeintr\u00e4ge erstellen kannst. </ p > </ div > </ div > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Kontakt </ h3 > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > call </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > email </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > chat_bubble </ i > </ button > </ div > </ div > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > </ body > </ html > Von den beiden JavaScript-Dateien public/src/js/app.js und public/src/js/feed.js steht derzeit nur etwas in der feed.js . Das schauen wir uns aber erst dann an, wenn wir neue Bildeintr\u00e4ge speichern wollen. Ngrok \u00b6 Beachten Sie, dass eine Anforderung an eine PWA ist, dass sie entweder unter localhost oder unter https l\u00e4uft. Das Werkzeug ngrok bietet sichere Tunnel an und simuliert so einen sicheren Webserver. Angenommen, Ihre Anwendung l\u00e4uft unter Port 8080 , dann geben Sie im Terminal einfach ngrok http 8080 ein und es erscheint in etwa: ngrok by @inconshreveable (Ctrl+C to quit) Session Status online Account J\u00f6rn Freiheit (Plan: Free) Version 2.3.40 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Forwarding https://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Connections ttl opn rt1 rt5 p50 p90 11 0 0.00 0.01 0.33 6.43 HTTP Requests ------------- GET /favicon.ico 200 OK GET /src/js/feed.js 200 OK GET /manifest.json 200 OK GET /src/js/material.min.js 200 OK GET /src/js/app.js 200 OK GET /src/images/htw.jpg 200 OK GET /src/css/feed.css 200 OK GET / 200 OK GET /src/css/app.css 200 OK GET /src/images/icons/fiw256x256.png 200 OK Sie haben nun unter der Adresse https://039a-141-45-155-245.ngrok.io (bei Ihnen anders!) eine https -Verbindung zum Webserver. Sie k\u00f6nnen die Anwendung somit unter dieser Adresse auch in Ihrem Smartphone aufrufen. Lassen Sie sich dazu am besten von Ihrem Browser einen QR-Code erzeugen und fotografieren ihn mit der Kamera ab. Schauen Sie sich auch ruhig einmal das Web-Interface von ngrok an, das unter http://127.0.0.1:4040 verf\u00fcgbar ist.","title":"Grundger\u00fcst"},{"location":"grundgeruest/#grundgerust-unserer-pwa","text":"Wir beginnen jetzt mit der Implementierung von progressive Funktionalit\u00e4ten. Das machen wir, indem wir sukzessive eine Progressive Web App erstellen, die viele der derzeit verf\u00fcgbaren Funktionalit\u00e4ten enth\u00e4lt, die derzeit f\u00fcr Progressive Web Apps verf\u00fcgbar sind. Das Grundger\u00fcst (oder der Ausgangspunkt) unserer PWA wird deshalb zur Verf\u00fcgung gestellt, weil wir uns nicht um die Implementierung von HTML, CSS und JavaScript, sondern nur um die progressive Funktionalit\u00e4ten k\u00fcmmern wollen. Auf Basis dieses Grundger\u00fcstes werden sukzessive Funktionalit\u00e4ten, wie Push-Notifikationen, Offline-Verwendung, Geolocation, Kameranutzung usw. hinzuf\u00fcgen. Die Idee ist, dass wir eine Art HTW-Instagram erstellen. Ich habe Instagram aber noch nie genutzt, deshalb wei\u00df ich nicht, ob wir dem \"Original\" nahe kommen werden. Wahrscheinlich nicht, aber daf\u00fcr behalten wir unsere Daten auch bei uns.","title":"Grundger\u00fcst unserer PWA"},{"location":"grundgeruest/#installation","text":"Den Quellcode f\u00fcr das Grundger\u00fcst finden Sie hier (GitHub) . Clonen Sie sich das Projekt in einem Ordner Ihrer Wahl und folgen Sie dann der README.MD : Zum Ausf\u00fchren des Projektes wird Node.js verendet. Sie m\u00fcssen es auf Ihren Rechner installieren. In der Wahl Ihrer IDE sind Sie v\u00f6llig frei. Empfehlungen finden Sie unter https://freiheit.f4.htw-berlin.de/ikt/tools/#integrated-development-environment-ide Zum Starten des Projektes wechseln Sie im Terminal (Terminal Ihres Rechners oder das Terminal in der IDE) in den Projektordner ( cd IKT-PWA-01 ) und f\u00fchren dort npm install aus. Damit werden alle erforderlichen Abh\u00e4ngigkeiten installiert. Nach erfolgreicher Installation der Abh\u00e4ngigkeiten, geben Sie npm start ein (oder genereller: npm run start ), um Ihr Projekt auszuf\u00fchren. Klicken Sie danach auf localhost:8080 oder geben Sie die URL direkt in Ihren Browser ein.","title":"Installation"},{"location":"grundgeruest/#starten","text":"Starten Sie das Projekt mit npm start (nachdem Sie einmalig npm install ausgef\u00fchrt haben) und \u00f6ffnen Sie dann den Browser mit der URL http://localhost:8080/ . Es erscheint bzw. wenn Sie die Viewport-Breite verkleinern . Sie erkennen wahrscheinlich schon, dass wir Material Design Lite verwenden. Die Navigationskomponente kennen wir auch schon aus WebTech. Wenn Sie auf den + -Button klicken, erscheint ein kleines Men\u00fc. Dort k\u00f6nnen Sie zwar schon etwas eintragen, aber der SPEICHERN -Button funktioniert noch nicht. Auch beim BENACHRICHTIGUNGEN EIN -Button ist noch keine Ereignisbehandlung hinterlegt. Wenn Sie im Men\u00fc Hilfe klicken, \u00f6ffnet sich die (fast leere) Hilfe-Seite. Schalten Sie beim Betrachten der Anwendung stets die DeveloperTools ein. Sie k\u00f6nnen dort sehr leicht auf die mobile Ansicht wechseln. Wichtig ist, dass Sie - zum besseren Ausprobieren der Anwendung - in den DeveloperTools unter dem Reiter Network ein H\u00e4kchen bei Disable Cache setzen. Wir wollen in Zukunft das Caching unseren Service workern \u00fcberlassen und nicht den Cache des Browsers verwenden.","title":"Starten"},{"location":"grundgeruest/#projekt","text":"Bevor wir loslegen, werfen wir noch einen kurzen Blick auf die bisherigen Dateien im Projekt. Wir beginnen mit der index.html aus dem public -Ordner. public/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div id = \"create-post\" > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > < img src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > < div class = \"page-content\" > < h5 class = \"text-center mdl-color-text--primary\" > HTW-Insta </ h5 > < div id = \"shared-moments\" ></ div > </ div > < div class = \"floating-button\" > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" id = \"share-image-button\" > < i class = \"material-icons\" > add </ i > </ button > </ div > < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Sie sieht recht umfangreich aus. Tats\u00e4chlich ist aber das meiste darin f\u00fcr das Navigationstemplate. Die Zeilen 21-36 und 38-49 beschreiben das gleiche, n\u00e4mlich die Navigationsleiste. Der obere Block ist f\u00fcr breite Viewports (Klasse mdl-layout--large-screen-only ). Alle mdl -Klassen sind von Material. Einen guten \u00dcberblick \u00fcber die einzelnen Material-Komponenten finden Sie hier . N\u00e4heres zu den Navigationen finden Sie darin z.B. hier . Dann kommt das Bild (Zeilen 75-77 ), dann der Text HTW Insta (Zeilen 78-81 ) und dann der + -Button (Zeilen 82-87 ). In den Zeilen 88-91 ist bereits eine Best\u00e4tigungsnachricht hinterlegt, derzeit aber noch hidden . In den eingeundenen eigenen Stylesheets app.css und feed.css steht nicht viel: public/src/css/app.css 1 2 3 4 5 6 7 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; display : none ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } Kurze Erinnerung an CSS: Punktselektoren beschreiben Klassen (z.B. .input-selection ) und #-Selektoren beschreiben Ids (z.B. #create-post ). Sie k\u00f6nnen die Anwendung der Klassen und der Ids ja mal in der index.html suchen, wenn Sie m\u00f6chten. Die public/help/index.html enth\u00e4lt noch weniger als die public/index.html . Erw\u00e4hnenswert ist hier, dass wir mit einem Framework wie z.B. Angular nat\u00fcrlich der Navigation eine eigenen Komponente spendiert und diese nicht in beiden Dateien wiederholt h\u00e4tten. public/help/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Help </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/help.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/settings\" > Einstellungen </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Feed </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Help </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Brauchst Du Hilfe? </ h3 > < p > Hier erf\u00e4hrst Du, wie Du die App benutzen und neue Bildeintr\u00e4ge erstellen kannst. </ p > </ div > </ div > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Kontakt </ h3 > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > call </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > email </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > chat_bubble </ i > </ button > </ div > </ div > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > </ body > </ html > Von den beiden JavaScript-Dateien public/src/js/app.js und public/src/js/feed.js steht derzeit nur etwas in der feed.js . Das schauen wir uns aber erst dann an, wenn wir neue Bildeintr\u00e4ge speichern wollen.","title":"Projekt"},{"location":"grundgeruest/#ngrok","text":"Beachten Sie, dass eine Anforderung an eine PWA ist, dass sie entweder unter localhost oder unter https l\u00e4uft. Das Werkzeug ngrok bietet sichere Tunnel an und simuliert so einen sicheren Webserver. Angenommen, Ihre Anwendung l\u00e4uft unter Port 8080 , dann geben Sie im Terminal einfach ngrok http 8080 ein und es erscheint in etwa: ngrok by @inconshreveable (Ctrl+C to quit) Session Status online Account J\u00f6rn Freiheit (Plan: Free) Version 2.3.40 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Forwarding https://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Connections ttl opn rt1 rt5 p50 p90 11 0 0.00 0.01 0.33 6.43 HTTP Requests ------------- GET /favicon.ico 200 OK GET /src/js/feed.js 200 OK GET /manifest.json 200 OK GET /src/js/material.min.js 200 OK GET /src/js/app.js 200 OK GET /src/images/htw.jpg 200 OK GET /src/css/feed.css 200 OK GET / 200 OK GET /src/css/app.css 200 OK GET /src/images/icons/fiw256x256.png 200 OK Sie haben nun unter der Adresse https://039a-141-45-155-245.ngrok.io (bei Ihnen anders!) eine https -Verbindung zum Webserver. Sie k\u00f6nnen die Anwendung somit unter dieser Adresse auch in Ihrem Smartphone aufrufen. Lassen Sie sich dazu am besten von Ihrem Browser einen QR-Code erzeugen und fotografieren ihn mit der Kamera ab. Schauen Sie sich auch ruhig einmal das Web-Interface von ngrok an, das unter http://127.0.0.1:4040 verf\u00fcgbar ist.","title":"Ngrok"},{"location":"indexeddb/","text":"IndexedDB \u00b6 Hint Aktueller Stand vor IndexedDB: Frontend Backend Collection post Collection post.files Collection post.chunks Wir haben nun ein funktionierendes Backend (siehe hier ) und verschiedene Ressourcen in statischen und dynamischen Caches gespeichert. Unsere HTW-Insta -Anwendung sieht nun so aus . Diese Ressourcen lagen als Dateien vor, die wir \u00fcber eine URL abrufen konnten, also *.html -, *.js -, *.css - Dateien und Bilder. Jetzt wollen wir dynamisch Daten speichern, sogenannten dynamischen Inhalt . Diese Daten k\u00f6nnen ausgelesen und den unterschiedlichen Dateien hinzugef\u00fcgt bzw. durch Dateien hinzugef\u00fcgt werden. Wir k\u00f6nnen uns das wirklich wie eine Datenbank vorstellen, aus der wir diese Daten ziehen, nur dass diese Datenbank nicht extern in einem Datenbankmanagementsystem verwaltet wird, sondern durch den Browser. Wir haben unter den Developer Tools diese \"Datenbank\" vielleicht schon im Application -Reiter auf der linken Seite unter Storage entdeckt. Es handelt sich um die IndexedDB . Bei der IndexedDB handelt es sich um eine transaktionsbasierte Datenbank, die Schl\u00fcssel-Werte-Paare im Browser speichert. Transaktionsbasiert bedeutet dabei, dass ganze Transaktionen ausgef\u00fchrt werden, die aus einzelnen Aktionen bestehen k\u00f6nnen. Wenn nur eine Aktion einer Transaktion fehlschl\u00e4gt, dann wird keine der Aktionen dieser Transaktion ausgef\u00fchrt. Das bedeutet, eine Transaktion wird entweder ganz oder gar nicht ausgef\u00fchrt. Unsere Transaktionen bestehen aber typischerweise nur aus wenigen Aktionen, das Transaktionskonzept spielt deshalb keine gro\u00dfe Rolle. Wir k\u00f6nnen beliebige Daten in die IndexedDB speichern, also auch Bilder, Dateien, Arrays, Objekte, usw. Ein wichtiger Unterschied zum Lokal Storage ist, dass wir sowohl \u00fcber den \"normalen\" JavaScript-Thread unserer Webanwendung als auch \u00fcber den Service Worker auf die IndexedDB zugreifen k\u00f6nnen. Das Backend nutzen \u00b6 Ehe wir aber mit der IndexedDB loslegen, wollen wir zun\u00e4chst einige Anpassungen in unserer HTW Insta -Anwendung durchf\u00fchren, damit sich unsere M\u00fchen mit dem Backend und dem Frontend auch gelohnt haben. Wir wollen die Daten f\u00fcr unsere Cards aus der Datenbank holen. Dazu muss das Backend gestartet sein ! \u00d6ffnen Sie die feed.js . Die fetch -Funktion passen wir nun so an, dass sie auf unser Backend zugreift (den Zugriff auf httpbin.org ben\u00f6tigen wir nicht mehr): fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir nutzen also den GET http://localhost:3000/posts -Endpunkt, um uns alle Daten aus der Datenbank zu holen. Wir f\u00fcgen einen Funktionsaufruf einer neuen Funktion updateUI(data) ein. Diese Funktion macht nichts weiter, als die createCard() -Funktion f\u00fcr jeden einzelnen Datensatz aufzurufen: function updateUI ( data ) { for ( let card of data ) { createCard ( card ); } } Die createCard() -Funktion war allerdings bis jetzt parameterlos. Nun \u00fcbergeben wir unseren Datensatz und nutzen die einzelnen Werte daraus f\u00fcr die Erstellung einer Card : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function createCard ( card ) { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; let image = new Image (); image . src = card . image_id ; cardTitle . style . backgroundImage = 'url(' + image . src + ')' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = card . title ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = card . location ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } F\u00fcr das Darstellen der Bilder ben\u00f6tigen wir ein Image -Objekt, dem wir als Wert des src -Attributes den base64-String aus image_id \u00fcbergeben. Dann wird der src -Wert des Image -Objektes als eine URL f\u00fcr das Hintergrundbild einer Card verwendet (Zeilen 6-8 ). Warning Beachten Sie, dass wir alle Ressourcen cachen . Das bedeutet, dass sich \u00c4nderungen an z.B. der feed.js gar nicht automatisch in der Webanwendung auswirken, da ja die feed.js aus dem Cache verwendet wird. Damit wir die \u00c4nderungen auch testen k\u00f6nnen, m\u00fcssen wir den Cache neu bef\u00fcllen. Wir haben dazu Cache-Versionen eingef\u00fchrt: sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 const CACHE_VERSION = 3 ; const CURRENT_STATIC_CACHE = 'static-v' + CACHE_VERSION ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v' + CACHE_VERSION ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( event . request . url . indexOf ( 'http' ) !== 0 ) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Das Testen der neuen Implementierung erfordert nun also immer das \u00c4ndern der Cache-Versionsnummer ( CACHE_VERSION ) und dann das Aktivieren des neuen Service Workers! Je nachdem, welche Daten Sie alle in Ihrer Datenbank haben, sieht die Anwendung nun so aus: Beachten Sie auch, dass sowohl der statische als auch der dynamische Service-Worker-Cache funktioniert. Das hei\u00dft, wenn Sie Ihre Anwendung offline schalten, dann ist immer noch alles da. Warum dynamische Inhalte \"cachen\"? \u00b6 Wenn wir nun bereits alle Ressourcen (html-Dateien, js-Dateien, css-Dateien und Bilddateien) im Service-Worker-Cache gespeichert haben (statisch und oder dynamisch), dann stellt sich nat\u00fcrlich die Frage, warum wir \u00fcberhaupt noch eine In-Browser-Datenbank verwenden sollen und wollen. Die beiden Terme, die dabei unterschieden werden, sind dynamic caching und caching dynamic content , also dynamische Inhalte speichern. Beides hat caching im Namen und dynamic , ist auch nicht so viel anders. Dynamic caching haben wir bis jetzt durchgef\u00fchrt. Die Webanwendung stellt eine Anfrage an den Webserver, der Service Worker schaltet sich jedoch als Proxy dazwischen. Wenn der Service Worker die Anfrage selbst aus dem Cache beantworten kann, wird sie gar nicht erst an den Webserver weitergeleitet. Wenn nicht, dann geht die Anfrage zum Webserver, der schickt eine Antwort zur\u00fcck, die der Service Worker aber auch in seinen dynamischen Cache ablegt, um sie beim n\u00e4chsten Mal aus dem Cache beantworten zu k\u00f6nnen. Beim dynamic caching werden also dynamisch Ressourcen im Cache abgelegt. Beim Speichern von dynamischen Inhalten mithilfe der In-Browser-IndexedDB spielt die Fetch-API keine Rolle. es geht auch nicht darum, Ressourcen, wie html-, css, oder js-Dateien zu speichern. Vielmehr werden in der Datenbank strukturierte (aber auch unstrukturierte) Daten, wie JSON- oder XML-Daten gespeichert. Prinzipiell geht es um das Speichern von Schl\u00fcssel-Werte-Paaren . Prim\u00e4r handelt es sich bei den Daten in der IndexedDB aber um dynamische, sich h\u00e4ufig \u00e4ndernde Daten - dynamic content . W\u00e4hrend wir beim dynamic caching eher davon ausgehen, Ressourcen zu speichern, die sich nicht h\u00e4ufig \u00e4ndern, ist das bei der IndexedDB anders. Dort gehen wir davon aus, dass sich diese Daten h\u00e4ufig \u00e4ndern. Ein weiterer Unterschied liegt darin, dass wir mit dynamic caching stets nur vollst\u00e4ndige Responses speichern, also eine Ressource ganz oder gar nicht. Das muss in der IndexedDB nicht sein. Wir k\u00f6nnten in der IndexedDB z.B. von einem Post immer nur post.title und post.location speichern, nicht aber post.image_id (oder umgekehrt). Au\u00dferdem lassen sich die Daten in der IndexedDB auch \u00e4ndern oder in ein anderes Format umwandeln. Wir haben in Bezug auf die gespeicherten Ressourcen in der IndexedDB mehr Flexibilit\u00e4t. Das idb-Paket \u00b6 Da die API zur IndexedDB sehr umst\u00e4ndlich zu handhaben ist und viele Callbacks erfordert, wird die Verwendung anderer Pakete empfohlen, die sich als Wrapper um die API legen und die Verwendung von Promises erm\u00f6glichen. Oft wird z.B. Dexie verwendet. Wir verwenden zun\u00e4chst den idb-Wrapper von Jake Archibald. Ich verwende im Folgenden dieses idb.js , das Sie sich hier herunterladen und einfach in Ihren /public/src/js -Ordner kopieren k\u00f6nnen. Diese Datei binden wir zun\u00e4chst \u00fcber die index.html -Datei ein: index.html 107 108 109 110 111 112 113 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Im Service Worker haben wir normalerweise keinen direkten Zugriff auf die Skripte und Dateien unserer Webanwendung. Daf\u00fcr gibt es jedoch die importScripts() -Anweisung. Wir importieren damit unsere idb.js -Datei in den Service Worker und wir laden diese Datei auch in den Cache: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 importScripts ( '/src/js/idb.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wir f\u00fchren zun\u00e4chst noch einige \u00c4nderungen in unserer Service Worker Datei sw.js durch. Zun\u00e4chst lagern wir alle Dateien, die wir in dem statischen Cache speichern wollen, in ein eigenes Array STATIC_FILES aus: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 importScripts ( '/src/js/idb.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; const STATIC_FILES = [ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ( STATIC_FILES ); }) ); }) // hier der Rest Das hat keine weitere Bedeutung und strukturiert nur den Code besser. Wichtiger aber ist es, die Behandlung des fetch -Ereignisses zu \u00fcberdenken. Derzeit sieht die Behandlung so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Das hei\u00dft, dass jeder Request \u00fcberpr\u00fcft wird, ob er aus dem Cache beantwortet werden kann und wenn ja, dann wird die response aus dem Cache zur\u00fcckgegeben (Zeile 10 ). Wenn nicht, dann wird der Request an den Webserver weitergeleitet, die Antwort in den dynamischen Cache gelegt und an die Webanwendung weitergereicht (Zeilen 12-20 ). Das betrifft jeden Request. Wir wollen nun aber die Anfragen, die an http//localhost:3000/posts gestellt werden, anders behandeln. Dazu speichern wir dieses url und pr\u00fcfen, ob diese Anfrage an diese URL geht. Wenn ja, behandeln wir sie anders, wenn nicht, dann so, wie bisher: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wie wir diese Anfragen an http://localhost:3000/posts behandeln, schauen wir uns gleich an. Wir haben jetzt nur eine Unterscheidung hinzugef\u00fcgt, ob die Anfrage an http://localhost:3000/posts geht oder nicht. Wenn ja, leiten wir die Anfrage an den Webserver weiter (Zeile 9 ) und geben die Response zur\u00fcck (Zeile 12 ). Wenn nicht, dann behandeln wir die Anfrage wir bisher. Zun\u00e4chst erstellen wir aber die IndexedDB. Erstellen und \u00d6ffnen einer IndexedDB \u00b6 Nachdem wir f\u00fcr den Service Worker die importScripts() -Anweisung kennengelernt haben, k\u00f6nnten wir nun verschiedene Skripts erstellen und diese in den Service Worker einbinden, also z.B. ein Skript f\u00fcr die Behandlung des fetch -Ereignisses und ein Skript f\u00fcr die Verwaltung der IndexedDB . Wir lassen aber hier alles in der sw.js und erstellen und \u00f6ffnen zun\u00e4chst eine neue IndexedDB, die wir posts-store nennen. Dies geht mit der openDB() -Funktion aus dem idb -Paket (siehe README.md ): public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 importScripts ( '/src/js/idb.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( '_id' , '_id' ); }, }); self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wir haben nun eine \"eigene\" IndexDB namens post-store erstellt. Der store darin hei\u00dft posts . In diesem store speichern wir alle Daten der Posts. Mit der Eigenschaft keyPath definieren wir den Schl\u00fcssel f\u00fcr diesen store . \u00dcber diesen Schl\u00fcssel gelangen wir an unserer Daten. Mithilfe der Funktion createIndex() verbinden wir das Attribut _id unserer Posts-Datens\u00e4tze mit diesem Schl\u00fcssel. F\u00fcr uns bedeutet das schlicht, dass _id der Schl\u00fcssel sowohl in der IndexedDB als auch in unserer MongoDB f\u00fcr alle Posts ist. Wenn wir die Anwendung nun ausf\u00fchren, dann sehen wir in den Developer Tools im Reiter Application links im Men\u00fc unter Storage --> IndexedDB diese Datenbank. Diese ist noch leer, wir machen ja noch nichts damit. Behandlung fetch -Event anpassen \u00b6 Nun passen wir die Behandlung des fetch -Ereignisses f\u00fcr die Anfragen an http://localhost:3000/posts an. Wir haben derzeit folgende Ausgangssituation (siehe oben): 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { // dynamischer Cache }) Wir behandeln die Anfrage an das Backend nun wie folgt: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { // dynamischer Cache }) Wir clonen zun\u00e4chst die Response, da sie nur einmal \"verbraucht\" werden kann (Zeile 70 ). Dann wird diese geclonte Response in ein JSON umgewandelt (Zeile 71 ). Dieses JSON beschreibt ein JavaScript-Objekt mit den Schl\u00fcsseln id , title , location und image - so, wie es unser Backend zur\u00fcckgibt. Wir gehen nun in einer for -Schleife durch alle diese Schl\u00fcssel-Werte-Paare durch (Zeile 73 ). In Zeile 75 greifen wir auf das Promise-Objekt zu, das die Datenbank verwaltet, die wir zuvor mittels openDB() ge\u00f6ffnet haben. Dieser Promise verwaltet sich selbst. Das bedeutet, dass dbPosts genau f\u00fcr die von uns ge\u00f6ffnete IndexedDB steht. Wir k\u00f6nnen nur nicht erneut db benutzen, deshalb dbPosts (Zeile 76 ). Als erstes erstellen wir eine Transaktion . Wie bereits gesagt, ist die IndexedDB transaktionsbasiert . Jede Operation ist somit eine Transaktion . Wir erstellen eine Transaktion tx (Zeile 77 ). Diese Transaktion wird durch die Funktion transaction() erzeugt. Die Funktion erwartet zwei Parameter: der erste Parameter beschreibt den store , auf den die Transaktion zugreift (bei uns posts ). der zweite Parameter beschreibt, ob wir nur lesend auf diesen store zugreifen wollen ( 'readonly' ) oder auch schreibend ( 'readwrite' ). Nach der Definition der Transaktion muss f\u00fcr die Transaktion nochmal die Eigenschaft store aufgerufen werden (siehe README.md des idb-Paketes ). Darin steht aber auch, dass man tx.objectStore(storeName) aufrufen soll, wenn die Transaktion mehrere Stores verwendet. Deshalb rufen wir einfach immer tx.objectStore(storeName) auf, da das auch funktioniert, wenn nur ein store verwendet wird (Zeile 78 ). In Zeile 79 werden die einzelnen Schl\u00fcssel-Werte-Paare dann in die IndexedDB gespeichert. Nach Ausf\u00fchren der Anwendung sieht die IndexedDB nun (je nachdem, welche Daten Sie bereits in Ihrer Datenbank gespeichert haben) so aus: Wir haben nun die IndexedDB des Browsers mit unseren Datens\u00e4tzen bef\u00fcllt. Nun \u00fcberlegen wir uns, wie wir diese Datens\u00e4tze aus der IndexedDB auslesen k\u00f6nnen, wenn wir sie dort gespeichert haben und dann gar nicht mehr an das Backend Anfragen schicken m\u00fcssen. Datens\u00e4tze aus der IndexedDB auslesen \u00b6 Zun\u00e4chst einmal stellen wir fest, dass ein geeigneter Ort, die Datens\u00e4tze aus der IndexedDB auszulesen, die feed.js ist, da dort ja die Daten zum Erstellen der Cards verwendet werden. Schauen wir uns deshalb dort die fetch() -Funktion an (siehe auch Das Backend nutzen ). 1 2 3 4 5 6 7 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir stellen dort eine Anfrage an das Backend und verwenden die vom Backend \u00fcbergebenen Daten ( data ), um die Cards zu erstellen ( updateUI(data) ). Das hei\u00dft, dass wir nun die IndexedDB auch in feed.js verwenden wollen - also in unserer \"Webanwendung\" (und nicht \"nur\" im Service Worker). Das hei\u00dft aber auch, dass wir nun auch in der Webanwendung die IndexedDB \u00f6ffnen m\u00fcssen usw. und wir dort \u00e4hnlichen Code h\u00e4tten, wie auch bereits im Service Worker. Um doppelten Code zu vermeiden, lagern wir deshalb einigen Code in eine db.js aus. Wir bewegen (move) zun\u00e4chst den Code zum \u00d6ffnen der IndexedDB aus der sw.js nach db.js : /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( 'id' , '_id' ); }, }); Dann erstellen wir uns in der db.js eine Funktion writeData() , die in die IndexedDB die Daten schreibt. Dazu bewegen wir den folgenden Block aus der sw.js nach db.js : sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Die db.js sieht dann so aus: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData () { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data ); return tx . done ; }) } Beachten Sie, dass aus store.put(data[key]) nun store.put(data) wurde, da wir hier keinen key verwalten. Damit die writeData() -Funktion m\u00f6glichst generisch ist, \u00fcbergeben wir als Parameter den store ( posts ) und wir m\u00fcssen nat\u00fcrlich auch data \u00fcbergeben: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } Wichtig ist, dass wir das db -Promise-Objekt in writeData() nun zur\u00fcckgeben m\u00fcssen, d.h. wir ben\u00f6tigen ein return in Zeile 16 . Nun m\u00fcssen wir diese db.js nat\u00fcrlich importieren, sowohl in den Service Worker als auch in die Webanwendung (da sie ja feed.js zur Verf\u00fcgung stehen soll). Beide Importe m\u00fcssen hinter dem Import der idb.js stehen, da die db.js Funktionen der idb.js verwendet. sw.js 1 2 3 4 5 6 7 8 importScripts ( '/src/js/idb.js' ); importScripts ( '/src/js/db.js' ); const CACHE_VERSION = 1 ; const CURRENT_STATIC_CACHE = 'static-v' + CACHE_VERSION ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v' + CACHE_VERSION ; // ... und hier der Rest sowie f\u00fcr die /public/src/js/*.js -Datein in der index.html : index.html 107 108 109 110 111 112 113 114 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/db.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > In die sw.js setzen wir noch den Aufruf von writeData('posts', data[key]) an der richtigen Stelle ein (jetzt wieder data[key] , da das hier f\u00fcr einen Post steht): sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { writeData ( 'posts' , data [ key ]); } }) return res ; }) ) } else { \u00dcbrigens: Da wir f\u00fcr die Behandlung des fetch -Events nun zwischen den Aufrufen an den Webserver und an das Backend unterscheiden, werden die Requests der Backend-Aufrufe nun nicht mehr im (dynamischen) Cache gespeichert. Das bedeutet, dass unsere Anwendung in dem derzeitigen Zustand offline nicht funktioniert, da dann die Cards nicht angezeigt werden. Deshalb wollen wir ja in die feed.js nun die Abfrage an die IndexedDB einbauen, damit die Daten von dort geholt werden k\u00f6nnen. Dazu erweitern wir die db.js zun\u00e4chst um eine readAllData(store) -Funktion, in der wir alle Daten aus der IndexedDB auslesen. /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( '_id' , '_id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } Im Gegensatz zur writeData() -Funktion m\u00fcssen wir beim Lesen der Daten ( readonly ) nicht darauf warten, dass die Transaktion vollst\u00e4ndig abgearbeitet ist ( tx.done ), sondern wir k\u00f6nnen die Funktion mit dem Promise verlassen, in dem alle Daten zur Verf\u00fcgung gestellt sind. Rein lesende Transaktionen k\u00f6nnen auf der Datenbank keinen \"Schaden\" anrichten. Deshalb k\u00f6nnen wir auf das tx.done verzichten. Alles andere ist im Prinzip wie bei writeData() , nur dass wir nun nur readonly Zugriff haben und die getAll() -Funktion aufrufen. Diese readAllData() -Funktion bauen wir nun in die feed.js ein. Dazu betrachten wir die fetch -Funktion darin zun\u00e4chst noch einmal: /public/src/js/feed.js 55 56 57 58 59 60 61 62 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { console . log ( data ); updateUI ( data ); }); Diese Funktion f\u00fchrt ein GET auf das Backend durch und holt sich von dort alle Daten. Wir \u00e4ndern diese Funktion zun\u00e4chst leicht, um zu erkennen, wann die Daten tats\u00e4chlich vom Backend geholt wurden. /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); Dazu erstellen wir uns eine Variable networkDataReceived , die auf true gesetzt wird, falls wir die Daten vom Backend holen. Dazu eine passende Ausgabe auf die Konsole. Nun erweiteren wir die feed.js um das Lesen der Daten aus der IndexedDB. Dazu f\u00fcgen wir folgende Anweisung hinzu: /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); if ( 'indexedDB' in window ) { readAllData ( 'posts' ) . then ( data => { if ( ! networkDataReceived ) { console . log ( 'From cache ...' , data ); updateUI ( data ); } }) } In Zeile 67 \u00fcberpr\u00fcfen wir zun\u00e4chst, ob der Browser \u00fcberhaupt die IndexedDB-API unterst\u00fctzt. Wenn ja, dann lesen wir mithilfe der readAllData() -Funktion aus der db.js alle Daten aus dem posts -Store. Sollten die Daten nicht vom Backend geholt worden sein (sonst w\u00e4re networkDataReceived === true ), dann werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen ( updateUI(data) in Zeile 72 ). Das hei\u00dft, wir haben hier eine network first -Strategie implemntiert. Wenn der Zugriff auf das Backend m\u00f6glich ist, dann werden die Daten von dort geholt und auch dazu verwendet, um die Cards zu erstellen. Nur f\u00fcr den Fall, dass das Netzwerk nicht verf\u00fcgbar ist, werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen. Wir testen diese Implementierung. Achten Sie darauf , die Versionsnummern der Caches in der sw.js zu \u00e4ndern, denn wir haben ja die index.html und die feed.js ge\u00e4ndert. Diese \u00c4nderungen w\u00fcrden nicht wirksam sein, ohne Versions\u00e4nderungen der Caches, da ansonsten die Dateien aus dem statischen Cache und nicht vom Webserver gelesen w\u00fcrden. Stellen Sie auch sicher, dass Ihr Backend gestartet ist. Reloaden Sie die Anwendung im Browser. skipWaiting den neuen Service Worker checken, ob der neuen statische Cache unter Cache --> Cache-Storage verwendet wird checken, ob die IndexedDB bef\u00fcllt ist (sollte durch writeData() im Service Worker passieren) In der Console steht From backend ... mit dem dazugeh\u00f6rigen Data-Array Schalten Sie im Service Worker die Anwendung nun offline und reloaden Sie die Anwendung In der Console erscheint Fetch failed loading GET http://localhost:3000/posts mit dem dazugeh\u00f6rigen Fehler, aber es erscheint auch From cache ... mit dem dazugeh\u00f6rigen Daten-Array. Es werden alle cards erstellt und angezeigt. Die Anwendung ist nun auch insofern offline -f\u00e4hig geworden, dass nun die dynamischen Daten in die IndexedDB geschrieben und aus der IndexedDB gelesen werden. L\u00f6schen der IndexedDB \u00b6 Wir schreiben unsere Daten in die IndexedDB mithilfe der put() -Funktion (siehe Funktion writeDate() in der db.js und darin store.put(data) ). Diese Funktion schreibt ein Schl\u00fcssel-Werte-Paar in den entsprechenden store . Existiert der \u00fcbergebene Schl\u00fcssel noch nicht, wird das Schl\u00fcssel-Werte-Paar der IndexedDB hinzugef\u00fcgt. Existiert der Schl\u00fcssel bereits, wird der alte Wert mit dem neuen Wert \u00fcberschrieben. Dadurch, dass es sich um lauter Schl\u00fcssel-Werte-Paare in der IndexedDB handelt, werden \"alte\" Schl\u00fcssel-Werte-Paare jedoch nicht gel\u00f6scht. Angenommen, wir rufen die writeData() -Funktion f\u00fcr alle Datens\u00e4tze auf, die in unserer Datenbank gespeichert haben und angenommen, wir haben aus dieser Datenbank einen Datensatz gel\u00f6scht, der aber noch in der IndexedDB gespeichert ist. Dann w\u00fcrde dieser Datensatz auch in der IndexedDB verbleiben. Wir schreiben uns deshalb eine Funktion, die zun\u00e4chst alle Daten in der Datenbank l\u00f6scht. Diese f\u00fchren wir dann immer aus, bevor wir die neuen Daten hinzuf\u00fcgen. In der db.js f\u00fcgen wir dazu die Funktion clearAllData() hinzu: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( '_id' , '_id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } function clearAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . clear (); return tx . done ; }) } Diese rufen wir nun in der sw.js auf, bevor wir die neuen Daten in die IndexedDB schreiben: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { clonedResponse . json () . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }) }); return res ; }) ) } else { Die Funktion clearAllData() gibt ein Promise-Objekt zur\u00fcck. Nach dem erfolgreichen L\u00f6schen der Datenbank, k\u00f6nnen die neuen Daten hinzugef\u00fcgt werden. Deshalb wird das komplette clonedResponse -Promise-Objekt in die then() -Funktion des clearAllData() -Promise-Objektes geschoben. Aus dieser Verschachtelung k\u00f6nnen wir aber auch eine .then() -Verkettung machen, die vielleicht besser zu lesen ist (dann aber nicht das return vor clonedResponse.json(); vergessen): sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }); return res ; }) ) } else { L\u00f6schen einzelner Eintr\u00e4ge \u00b6 Es k\u00f6nnen auch einzelne Eintr\u00e4ge aus der IndexedDb gel\u00f6scht werden. Der Zugriff auf die Datens\u00e4tze erfolgt \u00fcber den keyPath _id (siehe Erstellen der Datenbank und dort openDB() ). Wir f\u00fcgen der db.js eine weitere Funktion deleteOneData() hinzu. Diese Funktion ben\u00f6tigt als Parameter neben dem store auch die _id des Datensatzes, den wir l\u00f6schen wollen. /public/src/js/db.js 45 46 47 48 49 50 51 52 53 54 55 56 function deleteOneData ( st , id ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . delete ( id ); return tx . done ; }) . then ( () => { console . log ( 'Data deleted ...' ); }); } Wir geben das promise-Objekt db nicht zur\u00fcck, sondern \"verwerten\" es gleich hier, indem wir nach dem L\u00f6schen eine Ausgabe auf die Konsole erzeugen. Das Testen dieser Funktion in unserer Anwendnung ist derzeit nur \"Spielerei\". Wir werden diese Funktion aber sp\u00e4ter noch sinnvoll einsetzen. Beachten Sie , dass Sie nach \u00c4nderungen an der IndexedDB diese zun\u00e4chst \"refreshen\" m\u00fcssen (Button Refresh database - siehe Abbildung). Success Wir k\u00f6nnen nun die In-Browser-Datenbank IndexedDB verwenden, um dynamische Daten zu speichern, auszulesen und zu l\u00f6schen. Somit bleibt unsere Anwendung auch dann noch aktiv, auch wenn das Backend (und/oder die Datenbank) nicht erreichbar ist. Die IndexedDB kann f\u00fcr alle Arten von Schl\u00fcssel-Werte-Paaren verwendet werden. Weitere Informationen finden Sie unter IndexedDB API .","title":"IndexedDB"},{"location":"indexeddb/#indexeddb","text":"Hint Aktueller Stand vor IndexedDB: Frontend Backend Collection post Collection post.files Collection post.chunks Wir haben nun ein funktionierendes Backend (siehe hier ) und verschiedene Ressourcen in statischen und dynamischen Caches gespeichert. Unsere HTW-Insta -Anwendung sieht nun so aus . Diese Ressourcen lagen als Dateien vor, die wir \u00fcber eine URL abrufen konnten, also *.html -, *.js -, *.css - Dateien und Bilder. Jetzt wollen wir dynamisch Daten speichern, sogenannten dynamischen Inhalt . Diese Daten k\u00f6nnen ausgelesen und den unterschiedlichen Dateien hinzugef\u00fcgt bzw. durch Dateien hinzugef\u00fcgt werden. Wir k\u00f6nnen uns das wirklich wie eine Datenbank vorstellen, aus der wir diese Daten ziehen, nur dass diese Datenbank nicht extern in einem Datenbankmanagementsystem verwaltet wird, sondern durch den Browser. Wir haben unter den Developer Tools diese \"Datenbank\" vielleicht schon im Application -Reiter auf der linken Seite unter Storage entdeckt. Es handelt sich um die IndexedDB . Bei der IndexedDB handelt es sich um eine transaktionsbasierte Datenbank, die Schl\u00fcssel-Werte-Paare im Browser speichert. Transaktionsbasiert bedeutet dabei, dass ganze Transaktionen ausgef\u00fchrt werden, die aus einzelnen Aktionen bestehen k\u00f6nnen. Wenn nur eine Aktion einer Transaktion fehlschl\u00e4gt, dann wird keine der Aktionen dieser Transaktion ausgef\u00fchrt. Das bedeutet, eine Transaktion wird entweder ganz oder gar nicht ausgef\u00fchrt. Unsere Transaktionen bestehen aber typischerweise nur aus wenigen Aktionen, das Transaktionskonzept spielt deshalb keine gro\u00dfe Rolle. Wir k\u00f6nnen beliebige Daten in die IndexedDB speichern, also auch Bilder, Dateien, Arrays, Objekte, usw. Ein wichtiger Unterschied zum Lokal Storage ist, dass wir sowohl \u00fcber den \"normalen\" JavaScript-Thread unserer Webanwendung als auch \u00fcber den Service Worker auf die IndexedDB zugreifen k\u00f6nnen.","title":"IndexedDB"},{"location":"indexeddb/#das-backend-nutzen","text":"Ehe wir aber mit der IndexedDB loslegen, wollen wir zun\u00e4chst einige Anpassungen in unserer HTW Insta -Anwendung durchf\u00fchren, damit sich unsere M\u00fchen mit dem Backend und dem Frontend auch gelohnt haben. Wir wollen die Daten f\u00fcr unsere Cards aus der Datenbank holen. Dazu muss das Backend gestartet sein ! \u00d6ffnen Sie die feed.js . Die fetch -Funktion passen wir nun so an, dass sie auf unser Backend zugreift (den Zugriff auf httpbin.org ben\u00f6tigen wir nicht mehr): fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir nutzen also den GET http://localhost:3000/posts -Endpunkt, um uns alle Daten aus der Datenbank zu holen. Wir f\u00fcgen einen Funktionsaufruf einer neuen Funktion updateUI(data) ein. Diese Funktion macht nichts weiter, als die createCard() -Funktion f\u00fcr jeden einzelnen Datensatz aufzurufen: function updateUI ( data ) { for ( let card of data ) { createCard ( card ); } } Die createCard() -Funktion war allerdings bis jetzt parameterlos. Nun \u00fcbergeben wir unseren Datensatz und nutzen die einzelnen Werte daraus f\u00fcr die Erstellung einer Card : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function createCard ( card ) { let cardWrapper = document . createElement ( 'div' ); cardWrapper . className = 'shared-moment-card mdl-card mdl-shadow--2dp' ; let cardTitle = document . createElement ( 'div' ); cardTitle . className = 'mdl-card__title' ; let image = new Image (); image . src = card . image_id ; cardTitle . style . backgroundImage = 'url(' + image . src + ')' ; cardTitle . style . backgroundSize = 'cover' ; cardTitle . style . height = '180px' ; cardWrapper . appendChild ( cardTitle ); let cardTitleTextElement = document . createElement ( 'h2' ); cardTitleTextElement . className = 'mdl-card__title-text' ; cardTitleTextElement . textContent = card . title ; cardTitle . appendChild ( cardTitleTextElement ); let cardSupportingText = document . createElement ( 'div' ); cardSupportingText . className = 'mdl-card__supporting-text' ; cardSupportingText . textContent = card . location ; cardSupportingText . style . textAlign = 'center' ; cardWrapper . appendChild ( cardSupportingText ); componentHandler . upgradeElement ( cardWrapper ); sharedMomentsArea . appendChild ( cardWrapper ); } F\u00fcr das Darstellen der Bilder ben\u00f6tigen wir ein Image -Objekt, dem wir als Wert des src -Attributes den base64-String aus image_id \u00fcbergeben. Dann wird der src -Wert des Image -Objektes als eine URL f\u00fcr das Hintergrundbild einer Card verwendet (Zeilen 6-8 ). Warning Beachten Sie, dass wir alle Ressourcen cachen . Das bedeutet, dass sich \u00c4nderungen an z.B. der feed.js gar nicht automatisch in der Webanwendung auswirken, da ja die feed.js aus dem Cache verwendet wird. Damit wir die \u00c4nderungen auch testen k\u00f6nnen, m\u00fcssen wir den Cache neu bef\u00fcllen. Wir haben dazu Cache-Versionen eingef\u00fchrt: sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 const CACHE_VERSION = 3 ; const CURRENT_STATIC_CACHE = 'static-v' + CACHE_VERSION ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v' + CACHE_VERSION ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( event . request . url . indexOf ( 'http' ) !== 0 ) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Das Testen der neuen Implementierung erfordert nun also immer das \u00c4ndern der Cache-Versionsnummer ( CACHE_VERSION ) und dann das Aktivieren des neuen Service Workers! Je nachdem, welche Daten Sie alle in Ihrer Datenbank haben, sieht die Anwendung nun so aus: Beachten Sie auch, dass sowohl der statische als auch der dynamische Service-Worker-Cache funktioniert. Das hei\u00dft, wenn Sie Ihre Anwendung offline schalten, dann ist immer noch alles da.","title":"Das Backend nutzen"},{"location":"indexeddb/#warum-dynamische-inhalte-cachen","text":"Wenn wir nun bereits alle Ressourcen (html-Dateien, js-Dateien, css-Dateien und Bilddateien) im Service-Worker-Cache gespeichert haben (statisch und oder dynamisch), dann stellt sich nat\u00fcrlich die Frage, warum wir \u00fcberhaupt noch eine In-Browser-Datenbank verwenden sollen und wollen. Die beiden Terme, die dabei unterschieden werden, sind dynamic caching und caching dynamic content , also dynamische Inhalte speichern. Beides hat caching im Namen und dynamic , ist auch nicht so viel anders. Dynamic caching haben wir bis jetzt durchgef\u00fchrt. Die Webanwendung stellt eine Anfrage an den Webserver, der Service Worker schaltet sich jedoch als Proxy dazwischen. Wenn der Service Worker die Anfrage selbst aus dem Cache beantworten kann, wird sie gar nicht erst an den Webserver weitergeleitet. Wenn nicht, dann geht die Anfrage zum Webserver, der schickt eine Antwort zur\u00fcck, die der Service Worker aber auch in seinen dynamischen Cache ablegt, um sie beim n\u00e4chsten Mal aus dem Cache beantworten zu k\u00f6nnen. Beim dynamic caching werden also dynamisch Ressourcen im Cache abgelegt. Beim Speichern von dynamischen Inhalten mithilfe der In-Browser-IndexedDB spielt die Fetch-API keine Rolle. es geht auch nicht darum, Ressourcen, wie html-, css, oder js-Dateien zu speichern. Vielmehr werden in der Datenbank strukturierte (aber auch unstrukturierte) Daten, wie JSON- oder XML-Daten gespeichert. Prinzipiell geht es um das Speichern von Schl\u00fcssel-Werte-Paaren . Prim\u00e4r handelt es sich bei den Daten in der IndexedDB aber um dynamische, sich h\u00e4ufig \u00e4ndernde Daten - dynamic content . W\u00e4hrend wir beim dynamic caching eher davon ausgehen, Ressourcen zu speichern, die sich nicht h\u00e4ufig \u00e4ndern, ist das bei der IndexedDB anders. Dort gehen wir davon aus, dass sich diese Daten h\u00e4ufig \u00e4ndern. Ein weiterer Unterschied liegt darin, dass wir mit dynamic caching stets nur vollst\u00e4ndige Responses speichern, also eine Ressource ganz oder gar nicht. Das muss in der IndexedDB nicht sein. Wir k\u00f6nnten in der IndexedDB z.B. von einem Post immer nur post.title und post.location speichern, nicht aber post.image_id (oder umgekehrt). Au\u00dferdem lassen sich die Daten in der IndexedDB auch \u00e4ndern oder in ein anderes Format umwandeln. Wir haben in Bezug auf die gespeicherten Ressourcen in der IndexedDB mehr Flexibilit\u00e4t.","title":"Warum dynamische Inhalte \"cachen\"?"},{"location":"indexeddb/#das-idb-paket","text":"Da die API zur IndexedDB sehr umst\u00e4ndlich zu handhaben ist und viele Callbacks erfordert, wird die Verwendung anderer Pakete empfohlen, die sich als Wrapper um die API legen und die Verwendung von Promises erm\u00f6glichen. Oft wird z.B. Dexie verwendet. Wir verwenden zun\u00e4chst den idb-Wrapper von Jake Archibald. Ich verwende im Folgenden dieses idb.js , das Sie sich hier herunterladen und einfach in Ihren /public/src/js -Ordner kopieren k\u00f6nnen. Diese Datei binden wir zun\u00e4chst \u00fcber die index.html -Datei ein: index.html 107 108 109 110 111 112 113 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Im Service Worker haben wir normalerweise keinen direkten Zugriff auf die Skripte und Dateien unserer Webanwendung. Daf\u00fcr gibt es jedoch die importScripts() -Anweisung. Wir importieren damit unsere idb.js -Datei in den Service Worker und wir laden diese Datei auch in den Cache: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 importScripts ( '/src/js/idb.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Wir f\u00fchren zun\u00e4chst noch einige \u00c4nderungen in unserer Service Worker Datei sw.js durch. Zun\u00e4chst lagern wir alle Dateien, die wir in dem statischen Cache speichern wollen, in ein eigenes Array STATIC_FILES aus: public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 importScripts ( '/src/js/idb.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; const STATIC_FILES = [ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ( STATIC_FILES ); }) ); }) // hier der Rest Das hat keine weitere Bedeutung und strukturiert nur den Code besser. Wichtiger aber ist es, die Behandlung des fetch -Ereignisses zu \u00fcberdenken. Derzeit sieht die Behandlung so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) ); }) Das hei\u00dft, dass jeder Request \u00fcberpr\u00fcft wird, ob er aus dem Cache beantwortet werden kann und wenn ja, dann wird die response aus dem Cache zur\u00fcckgegeben (Zeile 10 ). Wenn nicht, dann wird der Request an den Webserver weitergeleitet, die Antwort in den dynamischen Cache gelegt und an die Webanwendung weitergereicht (Zeilen 12-20 ). Das betrifft jeden Request. Wir wollen nun aber die Anfragen, die an http//localhost:3000/posts gestellt werden, anders behandeln. Dazu speichern wir dieses url und pr\u00fcfen, ob diese Anfrage an diese URL geht. Wenn ja, behandeln wir sie anders, wenn nicht, dann so, wie bisher: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wie wir diese Anfragen an http://localhost:3000/posts behandeln, schauen wir uns gleich an. Wir haben jetzt nur eine Unterscheidung hinzugef\u00fcgt, ob die Anfrage an http://localhost:3000/posts geht oder nicht. Wenn ja, leiten wir die Anfrage an den Webserver weiter (Zeile 9 ) und geben die Response zur\u00fcck (Zeile 12 ). Wenn nicht, dann behandeln wir die Anfrage wir bisher. Zun\u00e4chst erstellen wir aber die IndexedDB.","title":"Das idb-Paket"},{"location":"indexeddb/#erstellen-und-offnen-einer-indexeddb","text":"Nachdem wir f\u00fcr den Service Worker die importScripts() -Anweisung kennengelernt haben, k\u00f6nnten wir nun verschiedene Skripts erstellen und diese in den Service Worker einbinden, also z.B. ein Skript f\u00fcr die Behandlung des fetch -Ereignisses und ein Skript f\u00fcr die Verwaltung der IndexedDB . Wir lassen aber hier alles in der sw.js und erstellen und \u00f6ffnen zun\u00e4chst eine neue IndexedDB, die wir posts-store nennen. Dies geht mit der openDB() -Funktion aus dem idb -Paket (siehe README.md ): public/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 importScripts ( '/src/js/idb.js' ); const CURRENT_STATIC_CACHE = 'static-v3' ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v3' ; self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); event . waitUntil ( caches . open ( CURRENT_STATIC_CACHE ) . then ( cache => { console . log ( 'Service-Worker-Cache erzeugt und offen' ); cache . addAll ([ '/' , '/index.html' , '/src/js/app.js' , '/src/js/feed.js' , '/src/js/material.min.js' , '/src/js/idb.js' , '/src/css/app.css' , '/src/css/feed.css' , '/src/images/htw.jpg' , 'https://fonts.googleapis.com/css?family=Roboto:400,700' , 'https://fonts.googleapis.com/icon?family=Material+Icons' , 'https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css' ]); }) ); }) const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( '_id' , '_id' ); }, }); self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); event . waitUntil ( caches . keys () . then ( keyList => { return Promise . all ( keyList . map ( key => { if ( key !== CURRENT_STATIC_CACHE && key !== CURRENT_DYNAMIC_CACHE ) { console . log ( 'service worker --> old cache removed :' , key ); return caches . delete ( key ); } })) }) ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Wir haben nun eine \"eigene\" IndexDB namens post-store erstellt. Der store darin hei\u00dft posts . In diesem store speichern wir alle Daten der Posts. Mit der Eigenschaft keyPath definieren wir den Schl\u00fcssel f\u00fcr diesen store . \u00dcber diesen Schl\u00fcssel gelangen wir an unserer Daten. Mithilfe der Funktion createIndex() verbinden wir das Attribut _id unserer Posts-Datens\u00e4tze mit diesem Schl\u00fcssel. F\u00fcr uns bedeutet das schlicht, dass _id der Schl\u00fcssel sowohl in der IndexedDB als auch in unserer MongoDB f\u00fcr alle Posts ist. Wenn wir die Anwendung nun ausf\u00fchren, dann sehen wir in den Developer Tools im Reiter Application links im Men\u00fc unter Storage --> IndexedDB diese Datenbank. Diese ist noch leer, wir machen ja noch nichts damit.","title":"Erstellen und \u00d6ffnen einer IndexedDB"},{"location":"indexeddb/#behandlung-fetch-event-anpassen","text":"Nun passen wir die Behandlung des fetch -Ereignisses f\u00fcr die Anfragen an http://localhost:3000/posts an. Wir haben derzeit folgende Ausgangssituation (siehe oben): 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { // hier Anfrage an http://localhost:3000/posts behandeln return res ; }) ) } else { // dynamischer Cache }) Wir behandeln die Anfrage an das Backend nun wie folgt: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { // dynamischer Cache }) Wir clonen zun\u00e4chst die Response, da sie nur einmal \"verbraucht\" werden kann (Zeile 70 ). Dann wird diese geclonte Response in ein JSON umgewandelt (Zeile 71 ). Dieses JSON beschreibt ein JavaScript-Objekt mit den Schl\u00fcsseln id , title , location und image - so, wie es unser Backend zur\u00fcckgibt. Wir gehen nun in einer for -Schleife durch alle diese Schl\u00fcssel-Werte-Paare durch (Zeile 73 ). In Zeile 75 greifen wir auf das Promise-Objekt zu, das die Datenbank verwaltet, die wir zuvor mittels openDB() ge\u00f6ffnet haben. Dieser Promise verwaltet sich selbst. Das bedeutet, dass dbPosts genau f\u00fcr die von uns ge\u00f6ffnete IndexedDB steht. Wir k\u00f6nnen nur nicht erneut db benutzen, deshalb dbPosts (Zeile 76 ). Als erstes erstellen wir eine Transaktion . Wie bereits gesagt, ist die IndexedDB transaktionsbasiert . Jede Operation ist somit eine Transaktion . Wir erstellen eine Transaktion tx (Zeile 77 ). Diese Transaktion wird durch die Funktion transaction() erzeugt. Die Funktion erwartet zwei Parameter: der erste Parameter beschreibt den store , auf den die Transaktion zugreift (bei uns posts ). der zweite Parameter beschreibt, ob wir nur lesend auf diesen store zugreifen wollen ( 'readonly' ) oder auch schreibend ( 'readwrite' ). Nach der Definition der Transaktion muss f\u00fcr die Transaktion nochmal die Eigenschaft store aufgerufen werden (siehe README.md des idb-Paketes ). Darin steht aber auch, dass man tx.objectStore(storeName) aufrufen soll, wenn die Transaktion mehrere Stores verwendet. Deshalb rufen wir einfach immer tx.objectStore(storeName) auf, da das auch funktioniert, wenn nur ein store verwendet wird (Zeile 78 ). In Zeile 79 werden die einzelnen Schl\u00fcssel-Werte-Paare dann in die IndexedDB gespeichert. Nach Ausf\u00fchren der Anwendung sieht die IndexedDB nun (je nachdem, welche Daten Sie bereits in Ihrer Datenbank gespeichert haben) so aus: Wir haben nun die IndexedDB des Browsers mit unseren Datens\u00e4tzen bef\u00fcllt. Nun \u00fcberlegen wir uns, wie wir diese Datens\u00e4tze aus der IndexedDB auslesen k\u00f6nnen, wenn wir sie dort gespeichert haben und dann gar nicht mehr an das Backend Anfragen schicken m\u00fcssen.","title":"Behandlung fetch-Event anpassen"},{"location":"indexeddb/#datensatze-aus-der-indexeddb-auslesen","text":"Zun\u00e4chst einmal stellen wir fest, dass ein geeigneter Ort, die Datens\u00e4tze aus der IndexedDB auszulesen, die feed.js ist, da dort ja die Daten zum Erstellen der Cards verwendet werden. Schauen wir uns deshalb dort die fetch() -Funktion an (siehe auch Das Backend nutzen ). 1 2 3 4 5 6 7 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { updateUI ( data ); }); Wir stellen dort eine Anfrage an das Backend und verwenden die vom Backend \u00fcbergebenen Daten ( data ), um die Cards zu erstellen ( updateUI(data) ). Das hei\u00dft, dass wir nun die IndexedDB auch in feed.js verwenden wollen - also in unserer \"Webanwendung\" (und nicht \"nur\" im Service Worker). Das hei\u00dft aber auch, dass wir nun auch in der Webanwendung die IndexedDB \u00f6ffnen m\u00fcssen usw. und wir dort \u00e4hnlichen Code h\u00e4tten, wie auch bereits im Service Worker. Um doppelten Code zu vermeiden, lagern wir deshalb einigen Code in eine db.js aus. Wir bewegen (move) zun\u00e4chst den Code zum \u00d6ffnen der IndexedDB aus der sw.js nach db.js : /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( 'id' , '_id' ); }, }); Dann erstellen wir uns in der db.js eine Funktion writeData() , die in die IndexedDB die Daten schreibt. Dazu bewegen wir den folgenden Block aus der sw.js nach db.js : sw.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data [ key ]); return tx . done ; }) } }) return res ; }) ) } else { event . respondWith ( caches . match ( event . request ) . then ( response => { if ( response ) { return response ; } else { return fetch ( event . request ) . then ( res => { // nicht erneut response nehmen, haben wir schon return caches . open ( CURRENT_DYNAMIC_CACHE ) // neuer, weiterer Cache namens dynamic . then ( cache => { cache . put ( event . request . url , res . clone ()); return res ; }) }); } }) )} }) Die db.js sieht dann so aus: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData () { db . then ( dbPosts => { let tx = dbPosts . transaction ( 'posts' , 'readwrite' ); let store = tx . objectStore ( 'posts' ); store . put ( data ); return tx . done ; }) } Beachten Sie, dass aus store.put(data[key]) nun store.put(data) wurde, da wir hier keinen key verwalten. Damit die writeData() -Funktion m\u00f6glichst generisch ist, \u00fcbergeben wir als Parameter den store ( posts ) und wir m\u00fcssen nat\u00fcrlich auch data \u00fcbergeben: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The 'id' property of the object will be the key. keyPath : 'id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the 'id' property of the objects. store . createIndex ( 'id' , 'id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } Wichtig ist, dass wir das db -Promise-Objekt in writeData() nun zur\u00fcckgeben m\u00fcssen, d.h. wir ben\u00f6tigen ein return in Zeile 16 . Nun m\u00fcssen wir diese db.js nat\u00fcrlich importieren, sowohl in den Service Worker als auch in die Webanwendung (da sie ja feed.js zur Verf\u00fcgung stehen soll). Beide Importe m\u00fcssen hinter dem Import der idb.js stehen, da die db.js Funktionen der idb.js verwendet. sw.js 1 2 3 4 5 6 7 8 importScripts ( '/src/js/idb.js' ); importScripts ( '/src/js/db.js' ); const CACHE_VERSION = 1 ; const CURRENT_STATIC_CACHE = 'static-v' + CACHE_VERSION ; const CURRENT_DYNAMIC_CACHE = 'dynamic-v' + CACHE_VERSION ; // ... und hier der Rest sowie f\u00fcr die /public/src/js/*.js -Datein in der index.html : index.html 107 108 109 110 111 112 113 114 </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/idb.js\" ></ script > < script src = \"/src/js/db.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > In die sw.js setzen wir noch den Aufruf von writeData('posts', data[key]) an der richtigen Stelle ein (jetzt wieder data[key] , da das hier f\u00fcr einen Post steht): sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clonedResponse . json () . then ( data => { for ( let key in data ) { writeData ( 'posts' , data [ key ]); } }) return res ; }) ) } else { \u00dcbrigens: Da wir f\u00fcr die Behandlung des fetch -Events nun zwischen den Aufrufen an den Webserver und an das Backend unterscheiden, werden die Requests der Backend-Aufrufe nun nicht mehr im (dynamischen) Cache gespeichert. Das bedeutet, dass unsere Anwendung in dem derzeitigen Zustand offline nicht funktioniert, da dann die Cards nicht angezeigt werden. Deshalb wollen wir ja in die feed.js nun die Abfrage an die IndexedDB einbauen, damit die Daten von dort geholt werden k\u00f6nnen. Dazu erweitern wir die db.js zun\u00e4chst um eine readAllData(store) -Funktion, in der wir alle Daten aus der IndexedDB auslesen. /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( '_id' , '_id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } Im Gegensatz zur writeData() -Funktion m\u00fcssen wir beim Lesen der Daten ( readonly ) nicht darauf warten, dass die Transaktion vollst\u00e4ndig abgearbeitet ist ( tx.done ), sondern wir k\u00f6nnen die Funktion mit dem Promise verlassen, in dem alle Daten zur Verf\u00fcgung gestellt sind. Rein lesende Transaktionen k\u00f6nnen auf der Datenbank keinen \"Schaden\" anrichten. Deshalb k\u00f6nnen wir auf das tx.done verzichten. Alles andere ist im Prinzip wie bei writeData() , nur dass wir nun nur readonly Zugriff haben und die getAll() -Funktion aufrufen. Diese readAllData() -Funktion bauen wir nun in die feed.js ein. Dazu betrachten wir die fetch -Funktion darin zun\u00e4chst noch einmal: /public/src/js/feed.js 55 56 57 58 59 60 61 62 fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { console . log ( data ); updateUI ( data ); }); Diese Funktion f\u00fchrt ein GET auf das Backend durch und holt sich von dort alle Daten. Wir \u00e4ndern diese Funktion zun\u00e4chst leicht, um zu erkennen, wann die Daten tats\u00e4chlich vom Backend geholt wurden. /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); Dazu erstellen wir uns eine Variable networkDataReceived , die auf true gesetzt wird, falls wir die Daten vom Backend holen. Dazu eine passende Ausgabe auf die Konsole. Nun erweiteren wir die feed.js um das Lesen der Daten aus der IndexedDB. Dazu f\u00fcgen wir folgende Anweisung hinzu: /public/src/js/feed.js 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 let networkDataReceived = false ; fetch ( 'http://localhost:3000/posts' ) . then (( res ) => { return res . json (); }) . then (( data ) => { networkDataReceived = true ; console . log ( 'From backend ...' , data ); updateUI ( data ); }); if ( 'indexedDB' in window ) { readAllData ( 'posts' ) . then ( data => { if ( ! networkDataReceived ) { console . log ( 'From cache ...' , data ); updateUI ( data ); } }) } In Zeile 67 \u00fcberpr\u00fcfen wir zun\u00e4chst, ob der Browser \u00fcberhaupt die IndexedDB-API unterst\u00fctzt. Wenn ja, dann lesen wir mithilfe der readAllData() -Funktion aus der db.js alle Daten aus dem posts -Store. Sollten die Daten nicht vom Backend geholt worden sein (sonst w\u00e4re networkDataReceived === true ), dann werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen ( updateUI(data) in Zeile 72 ). Das hei\u00dft, wir haben hier eine network first -Strategie implemntiert. Wenn der Zugriff auf das Backend m\u00f6glich ist, dann werden die Daten von dort geholt und auch dazu verwendet, um die Cards zu erstellen. Nur f\u00fcr den Fall, dass das Netzwerk nicht verf\u00fcgbar ist, werden die aus der IndexedDB geholten Daten verwendet, um die Cards zu erstellen. Wir testen diese Implementierung. Achten Sie darauf , die Versionsnummern der Caches in der sw.js zu \u00e4ndern, denn wir haben ja die index.html und die feed.js ge\u00e4ndert. Diese \u00c4nderungen w\u00fcrden nicht wirksam sein, ohne Versions\u00e4nderungen der Caches, da ansonsten die Dateien aus dem statischen Cache und nicht vom Webserver gelesen w\u00fcrden. Stellen Sie auch sicher, dass Ihr Backend gestartet ist. Reloaden Sie die Anwendung im Browser. skipWaiting den neuen Service Worker checken, ob der neuen statische Cache unter Cache --> Cache-Storage verwendet wird checken, ob die IndexedDB bef\u00fcllt ist (sollte durch writeData() im Service Worker passieren) In der Console steht From backend ... mit dem dazugeh\u00f6rigen Data-Array Schalten Sie im Service Worker die Anwendung nun offline und reloaden Sie die Anwendung In der Console erscheint Fetch failed loading GET http://localhost:3000/posts mit dem dazugeh\u00f6rigen Fehler, aber es erscheint auch From cache ... mit dem dazugeh\u00f6rigen Daten-Array. Es werden alle cards erstellt und angezeigt. Die Anwendung ist nun auch insofern offline -f\u00e4hig geworden, dass nun die dynamischen Daten in die IndexedDB geschrieben und aus der IndexedDB gelesen werden.","title":"Datens\u00e4tze aus der IndexedDB auslesen"},{"location":"indexeddb/#loschen-der-indexeddb","text":"Wir schreiben unsere Daten in die IndexedDB mithilfe der put() -Funktion (siehe Funktion writeDate() in der db.js und darin store.put(data) ). Diese Funktion schreibt ein Schl\u00fcssel-Werte-Paar in den entsprechenden store . Existiert der \u00fcbergebene Schl\u00fcssel noch nicht, wird das Schl\u00fcssel-Werte-Paar der IndexedDB hinzugef\u00fcgt. Existiert der Schl\u00fcssel bereits, wird der alte Wert mit dem neuen Wert \u00fcberschrieben. Dadurch, dass es sich um lauter Schl\u00fcssel-Werte-Paare in der IndexedDB handelt, werden \"alte\" Schl\u00fcssel-Werte-Paare jedoch nicht gel\u00f6scht. Angenommen, wir rufen die writeData() -Funktion f\u00fcr alle Datens\u00e4tze auf, die in unserer Datenbank gespeichert haben und angenommen, wir haben aus dieser Datenbank einen Datensatz gel\u00f6scht, der aber noch in der IndexedDB gespeichert ist. Dann w\u00fcrde dieser Datensatz auch in der IndexedDB verbleiben. Wir schreiben uns deshalb eine Funktion, die zun\u00e4chst alle Daten in der Datenbank l\u00f6scht. Diese f\u00fchren wir dann immer aus, bevor wir die neuen Daten hinzuf\u00fcgen. In der db.js f\u00fcgen wir dazu die Funktion clearAllData() hinzu: /public/src/js/db.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 const db = idb . openDB ( 'posts-store' , 1 , { upgrade ( db ) { // Create a store of objects const store = db . createObjectStore ( 'posts' , { // The '_id' property of the object will be the key. keyPath : '_id' , // If it isn't explicitly set, create a value by auto incrementing. autoIncrement : true , }); // Create an index on the '_id' property of the objects. store . createIndex ( '_id' , '_id' ); }, }); function writeData ( st , data ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . put ( data ); return tx . done ; }) } function readAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readonly' ); let store = tx . objectStore ( st ); return store . getAll (); }) } function clearAllData ( st ) { return db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . clear (); return tx . done ; }) } Diese rufen wir nun in der sw.js auf, bevor wir die neuen Daten in die IndexedDB schreiben: sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { clonedResponse . json () . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }) }); return res ; }) ) } else { Die Funktion clearAllData() gibt ein Promise-Objekt zur\u00fcck. Nach dem erfolgreichen L\u00f6schen der Datenbank, k\u00f6nnen die neuen Daten hinzugef\u00fcgt werden. Deshalb wird das komplette clonedResponse -Promise-Objekt in die then() -Funktion des clearAllData() -Promise-Objektes geschoben. Aus dieser Verschachtelung k\u00f6nnen wir aber auch eine .then() -Verkettung machen, die vielleicht besser zu lesen ist (dann aber nicht das return vor clonedResponse.json(); vergessen): sw.js 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 self . addEventListener ( 'fetch' , event => { // check if request is made by chrome extensions or web page // if request is made for web page url must contains http. if ( ! ( event . request . url . indexOf ( 'http' ) === 0 )) return ; // skip the request. if request is not made with http protocol const url = 'http://localhost:3000/posts' ; if ( event . request . url . indexOf ( url ) >= 0 ) { event . respondWith ( fetch ( event . request ) . then ( res => { const clonedResponse = res . clone (); clearAllData ( 'posts' ) . then ( () => { return clonedResponse . json (); }) . then ( data => { for ( let key in data ) { console . log ( 'write data' , data [ key ]); writeData ( 'posts' , data [ key ]); } }); return res ; }) ) } else {","title":"L\u00f6schen der IndexedDB"},{"location":"indexeddb/#loschen-einzelner-eintrage","text":"Es k\u00f6nnen auch einzelne Eintr\u00e4ge aus der IndexedDb gel\u00f6scht werden. Der Zugriff auf die Datens\u00e4tze erfolgt \u00fcber den keyPath _id (siehe Erstellen der Datenbank und dort openDB() ). Wir f\u00fcgen der db.js eine weitere Funktion deleteOneData() hinzu. Diese Funktion ben\u00f6tigt als Parameter neben dem store auch die _id des Datensatzes, den wir l\u00f6schen wollen. /public/src/js/db.js 45 46 47 48 49 50 51 52 53 54 55 56 function deleteOneData ( st , id ) { db . then ( dbPosts => { let tx = dbPosts . transaction ( st , 'readwrite' ); let store = tx . objectStore ( st ); store . delete ( id ); return tx . done ; }) . then ( () => { console . log ( 'Data deleted ...' ); }); } Wir geben das promise-Objekt db nicht zur\u00fcck, sondern \"verwerten\" es gleich hier, indem wir nach dem L\u00f6schen eine Ausgabe auf die Konsole erzeugen. Das Testen dieser Funktion in unserer Anwendnung ist derzeit nur \"Spielerei\". Wir werden diese Funktion aber sp\u00e4ter noch sinnvoll einsetzen. Beachten Sie , dass Sie nach \u00c4nderungen an der IndexedDB diese zun\u00e4chst \"refreshen\" m\u00fcssen (Button Refresh database - siehe Abbildung). Success Wir k\u00f6nnen nun die In-Browser-Datenbank IndexedDB verwenden, um dynamische Daten zu speichern, auszulesen und zu l\u00f6schen. Somit bleibt unsere Anwendung auch dann noch aktiv, auch wenn das Backend (und/oder die Datenbank) nicht erreichbar ist. Die IndexedDB kann f\u00fcr alle Arten von Schl\u00fcssel-Werte-Paaren verwendet werden. Weitere Informationen finden Sie unter IndexedDB API .","title":"L\u00f6schen einzelner Eintr\u00e4ge"},{"location":"kamera/","text":"Ger\u00e4tezugriffe - Kamera \u00b6 Hint Aktueller Stand vor Ger\u00e4tezugriffe: Frontend Backend Collection post Collection post.files Collection post.chunks Nun wollen wir noch auf Ger\u00e4teschnittstellen zugreifen. Dazu geh\u00f6ren die Kamera und auch die Geolocation-API, um unseren Standort zu ermitteln. Fr\u00fcher war JavaScript eine \"SandBox\", d.h. JavaScript-Code war vollst\u00e4ndig innerhalb des Browsers gekapselt und hatte keinerlei Zugriff nach au\u00dfen. Das \u00e4nderte sich mit dem Upload File -Button. JavaScript bekam (sehr eingeschr\u00e4nkten) Zugriff auf das Dateisystem (nur lesend). In der Zwischenzeit hat sich das komplett gewandelt. JavaScript l\u00e4uft erstens auch auf Servern und hat zweitens \u00fcber eine Vielzahl von APIs Zugriff auf unterschiedlichste Schnittstellen zum System. Wir wollen hier zun\u00e4chst betrachten, wie JavaScript auf die Kamera zugreifen kann. Sp\u00e4ter ermitteln wir auch noch den eigenen Standort. Anpassung der Anwendung \u00b6 Ausgangspunkt ist dieser Stand des Projektes , den wir nach der Einf\u00fchrung von IndexedDB erreicht haben. Zun\u00e4chst ein bisschen mehr responsive \u00b6 Unser HTW Insta entwickelt sich langsam. Deshalb ist hier vielleicht ein guter Zeitpunkt, um die Anwendung noch etwas mehr responsive zu gestalten. Media Queries \u00b6 Zum Beispiel sind die Cards stets in fester Gr\u00f6\u00dfe, unabh\u00e4ngig davon, ob wir die Anwendung am Desktop betrachten oder am Mobilger\u00e4t. Dazu k\u00f6nnen wir in unsere feed.css ein paar Media queries einf\u00fcgen: /src/css/feed.css # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; visibility : hidden ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . whiteText { color : white ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } . shared-moment-card . mdl-card { margin : 10 px auto ; width : 80 % ; } @ media ( min-width : 600px ) { . shared-moment-card . mdl-card { width : 60 % ; } } @ media ( min-width : 1200px ) { . shared-moment-card . mdl-card { width : 45 % ; } } . shared-moment-card . mdl-card__title { height : 250 px ; } @ media ( min-height : 600px ) { . shared-moment-card . mdl-card__title { height : 300 px ; } } @ media ( min-height : 1200px ) { . shared-moment-card . mdl-card__title { height : 380 px ; } } Wir haben sowohl f\u00fcr die Viewport-H\u00f6he als auch f\u00fcr die Viewport-Breite zwei Breakpoints eingebaut. Bei jeweils 600px bzw. 1200px \u00e4ndern sich die Angaben zur H\u00f6he bzw. Breite der Bilder in den Cards . Achtung: In feed.js muss dazu die Zeile cardTitle.style.height = '180px'; gel\u00f6scht werden! Die H\u00f6he und Breite der Bilder in den Cards passt sich jetzt (besser) der Viewport-Breite und -H\u00f6he an. Bei den Breiten haben wir sogar %-Angaben verwendet (gut), bei den H\u00f6hen nur feste Pixel-Werte (nicht so gut). Sie k\u00f6nnen gerne damit herumspielen und es an Ihre Bed\u00fcrfnisse anpassen. Mehr zu Media Queries finden Sie z.B. hier und hier https://wiki.selfhtml.org/wiki/CSS/Media_Queries . srcset-Attribut f\u00fcr img \u00b6 Die Verwendung der Bilder k\u00f6nnen wir noch auf eine andere Art responsive gestalten. Je nach Viewport-Gr\u00f6\u00dfe k\u00f6nnen die Bilder eingebunden werden, deren Aufl\u00f6sung \"ausreicht\". In dem /public/src/images/ -Ordner haben wir f\u00fcr unser Hauptbild oben drei verschiedene Versionen: htw.jpg , mit der Aufl\u00f6sung 898 x 343 Pixel, htw-lg.jpg , mit der Aufl\u00f6sung 1199 x 457 Pixel und htw-sm.jpg , mit der Aufl\u00f6sung 480 x 183 Pixel. Es w\u00e4re unsinnig, beisielsweise das htw-lg.jp auf einem schmalen Viewport anzuzeigen, da daf\u00fcr die Aufl\u00f6sung des htw-sm.lpg v\u00f6llig gen\u00fcgt. Da Letzteres auch noch deutlich kleiner ist ( 43 KB ), als das htw-lg.jpg -Bild ( 170 KB ), lie\u00dfe sich auch die Ladezeit verringern, wenn f\u00fcr mobile Ger\u00e4te das kleiner Bild verwendet w\u00fcrde. Auf der anderen Seite sieht dieses Bild aufgrund seiner niedrigen Aufl\u00f6sung in gro\u00dfen Viewports (also am Desktop-Monitor) nicht gut aus. Dort ben\u00f6tigen wir das htw-lg.jpg . Um diesen Wechsel der Bilder je nach Viewport-Gr\u00f6\u00dfe zu vereinfachen, wurde in HTML5 f\u00fcr das img -Element das Attribut srcset hinzugef\u00fcgt (siehe z.B. hier oder hier ). In unserer index.html k\u00f6nnen wir also das Einbinden des img -Elementes wie folgt erweitern: /index.html 88 89 90 91 < img srcset = \"/src/images/htw-lg.jpg 1200w, /src/images/htw.jpg 900w, /src/images/htw-sm.jpg 480w\" src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > Zuvor stand dort einfach nur: <img src=\"/src/images/htw.jpg\" alt=\"HTW Wilhelminenhof\" class=\"main-image\"> . Wir haben also das srcset -Attribut hinzugef\u00fcgt. Das generelle Template daf\u00fcr sieht so aus: < img srcset = \"url size, url size, url size\" src = \"default url\" > Das hei\u00dft, nach den URLs auf die jeweiligen Bilder schreiben wir noch die Gr\u00f6\u00dfe des Viewports, ab denen die Bilder verwendet werden sollen, also 1200w, 900w, 480w . Dabei steht w f\u00fcr width . M\u00f6glich w\u00e4re auch noch, dass man statt w ein x angibt und dann die Anzahl der Pixel verwendet f\u00fcr die Viewportgr\u00f6\u00dfe. Das Laden der unterschiedlichen Images kann in den DeveloperTools unter Network beobachtet werden. Animationen \u00b6 Wenn wir auf der Hauptseite auf den + -Button klicken, dann \"erscheint\" das Formular zur Dateneingabe einfach. Das liegt daran, dass wir in der feed.js bei den Funktionen openCreatePostModal() und closeCreatePostModal() die Sichtbarkeit einfach an- und ausschalten. Wir k\u00f6nnten das aber auch etwas \"netter\" durch eine Animation gestalten. Dazu verwenden wir translateY und transition . translateY() verschiebt ein Element in y -Richtung (also rauf oder runter) und transition kann eine Zeit \u00fcbergeben werden, die angibt, wie lange der Wechsel von Werten einer Eigenschaft dauern soll - also eine Animation. In der feed.ccs \u00e4ndern wir f\u00fcr die id=create-post : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } Die Zeile 11 kann nat\u00fcrlich ganz raus. In der feed.js \u00e4ndern wir f\u00fcr die beiden Methoden: 1 2 3 4 5 6 7 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; } und danach \"slided\" das Formular von unten nach oben ein. vH ist eine Einheit in Relation zum Viewport. 100vH ist die gesamte Viewporth\u00f6he, 1vH ist der 100te Teil der Viewporth\u00f6he (siehe z.B. hier ). Wir wollen nun die Kamera verwenden, um Bilder aufzunehmen. Au\u00dferdem wollen wir einen titel und eine location eingeben k\u00f6nnen und alles zusammen als Post versenden. Einen Post an das Backend senden \u00b6 Um die eingegebenen Daten zu senden, wollen wir den Speichern -Button aus der index.html 76 77 78 < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > mit der feed.js verbinden. Dazu definieren wir uns zun\u00e4chst mithilfe von jQuery weitere Variablen f\u00fcr den direkten Zugriff auf Stuerelemente. Wir erweiteren die feed.js um die hervorgehobenen Zeilen: /src/js/feed.js 1 2 3 4 5 6 7 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); Nun k\u00f6nnen wir einfacher auf das submit -Ereignis des Speichern -Buttons reagieren. Wir melden dazu das Formular an den Ereignislistener f\u00fcr das submit -Ereignis in der feed.js an: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); }); Wir verhindern zun\u00e4chst das Standardverhalten beim submit -Ereignis, n\u00e4mlich das Absenden der Daten und das Neuladen der Seite (Zeile 80 ). In Zeile 82 pr\u00fcfen wir, ob beide input -Elemente, also sowohl f\u00fcr title , als auch f\u00fcr location einen Wert enthalten. Die JavaScript- trim() -Funktionen entfernt \"Leerzeichen\" aller Art am Ende des Strings (auch Tabs, Zeilenumbr\u00fcche etc.). Sollte eines der beiden (oder beide) Eingabefelder leer sein, beenden wir die Funktion mit einem alert und bleiben in dem Formular. alert ist nat\u00fcrlich nicht so toll, ein toast w\u00e4re viel besser, aber wir haben in unserer index.html nur einen toast f\u00fcr das erfolgreiche Speichern vordefiniert. Wenn beide Eingabefelder bef\u00fcllt sind, wird das Formularfenster verlassen. Um die Daten an das Backend zu senden, verwenden wir die fetch() -Funktion und die POST -Methode. H\u00e4tten wir nur Textdaten, die wir \u00fcbertragen wollen, k\u00f6nnten wir ein einfaches JSON senden (und wieder empfangen). Die fetch() -Funktion k\u00f6nnte dann so aussehen: Beispiel fetch f\u00fcr POST fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ title : titleInput . value , location : locationInput . value , image_id : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); updateUI ( Object . entries ( data )); }); Wir versenden jedoch form-data . Dazu erstellen wir ein FormData -Objekt (siehe FormData ). Wir f\u00fcgen dazu eine Funktion sendDataToBackend() in die feed.js ein und rufen diese f\u00fcr die Behandlung des submit -Ereignisses auf: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 function sendDataToBackend () { const formData = new FormData (); formData . append ( 'title' , titleValue ); formData . append ( 'location' , locationValue ); formData . append ( 'file' , file ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); const newPost = { title : data . title , location : data . location , image_id : imageURI } updateUI ([ newPost ]); }); } form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; sendDataToBackend (); }); In dieser Funktion werden mehrere Variablen verwendet, die in der feed.js deklariert werden m\u00fcssen: /src/js/feed.js 13 14 15 16 let file = null ; let titleValue = '' ; let locationValue = '' ; let imageURI = '' ; Wir sehen, dass die Werte der Variablen titleValue und locationValue durch das submit -Ereignisses des Eingabeformulars (des Speichern -Buttons) gesetzt werden (siehe oben feed.js Zeilen 120 und 121 ). Die Werte der Variablen file und imageURI erhalten wir jedoch erst, wenn wir ein Foto mit der Kamera aufnehmen. Das schauen wir uns im Folgenden an: Aufnehmen von Fotos \u00b6 In der feed.js haben wir den Wert von image_id zun\u00e4chst noch leer gelassen. Wir wollen nun die Kamera anbinden und damit ein Foto aufnehmen, das wir mitversenden. Dazu erweiteren wir die Anwendung zun\u00e4chst, um neben title und location auch noch ein drittes Eingabefeld f\u00fcr die Bilder zu erhalten. Dazu erweiteren wir zun\u00e4chst die public/index.html : public/index.html 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 < form > < div id = \"create-post\" > < video id = \"player\" autoplay ></ video > < canvas id = \"canvas\" width = \"320px\" height = \"240px\" ></ canvas > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\" id = \"capture-btn\" > Foto </ button > < div id = \"pick-image\" > < h6 > Bild ausw\u00e4hlen </ h6 > < input type = \"file\" accept = \"image/*\" id = \"image-picker\" > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > <!-- <div class=\"input-section\"> <button class=\"mdl-button mdl-js-button mdl-button--colored\" type=\"button\" id=\"location-btn\">Location</button> <div class=\"mdl-spinner mdl-js-spinner is-active\" id=\"location-loader\"></div> </div> --> < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ div > </ form > Das <video> - (Zeile 67 ) und das <canvas> -Element (Zeile 68 ) werden verwendet, um mit der Kamera Bilder aufzunehmen, die mit dem <button> (Zeile 69 ) gespeichert werden. Der image-picker (Zeilen 70-73 ) wird ben\u00f6tigt, falls das Ger\u00e4t \u00fcber keine Kamera (oder keinen Kamerazugriff) verf\u00fcgt. Au\u00dferdem f\u00fcgen wir noch eine weitere Eingabesection f\u00fcr die Location hinzu mit einem Button und einem spinner , der anzeigen soll, dass etwas passiert. Diese Eingabesection haben wir aber zun\u00e4chst auskommentiert, da wir diese erst beim Thema Geo-Location verwenden. Wir verwenden die CSS-Klassen und -Ids auch noch, um die Eingabe etwas \"sch\u00f6ner\" aussehen zu lassen und erweiteren dazu die feed.css : public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : calc ( 100 vh - 56 px ); overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } # create-post video , # create-post canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } # create-post # pick-image { display : none ; } # create-post # capture-btn { margin : 10 px auto ; } . mdl-spinner { margin : auto ; } /* hier der Rest */ Die CSS-Definitionen sorgen insbesondere daf\u00fcr, dass das Video- , Canvas- und File-Picker-Element zun\u00e4chst versteckt ist. Wir wollen uns zun\u00e4chst darum k\u00fcmmern, ein Live-Bild der Kamera in das Canvas-Element zu integrieren, d.h. wir k\u00fcmmern uns zun\u00e4chst um den Kamerazugriff. Kamera-Zugriff \u00b6 F\u00fcr den Kamerazugriff ben\u00f6tigen wir etwas JavaScript-Code. Wir erweitern die feed.js . Zun\u00e4chst vereinfachen wir die Zugriffe auf die einzelnen Elemente und f\u00fcgen eine Funktion hinzu, mit der wir den Zugriff auf die Kamera pr\u00fcfen und herstellen wollen: public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let file = null ; let titleValue = '' ; let locationValue = '' ; let imageURI = '' ; function initializeMedia () { } function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); } In der neuen Funktion initializeMedia() wollen wir die MediaDevices -API verwenden. Ein Blick in die Dokumentation dieser API zeigt, dass die Browser-Unterst\u00fctzung noch nicht besonders gut ist, zumindest f\u00fcr einige der Methoden darin. Wir wollen aber insbesondere die getUserMedia() -Funktion verwenden und daf\u00fcr ist die Browser-Unterst\u00fctzung wiederum doch sehr gut (Chrom, Firefox, Edge und alle mobilen Ger\u00e4te). F\u00fcr den Fall, dass die MediaDevices -API nicht unterst\u00fctzt werden, erstellen wir uns im navigator ein eigenes mediaDevices -Objekt und pr\u00fcfen, ob die getUserMedia() -Funktion unterst\u00fctzt wird. Wenn dies nicht der Fall ist, erstellen wir uns f\u00fcr das neue mediaDevices -Objekt eine neue Eigenschaft getUserDevices und definieren es als eine Funktion. Diese Funktion nutzt dann alte Funktionen, die in den jeweiligen Browsern angeboten wurden (und werden). Wie gesagt, das ist nur ein Fallback f\u00fcr den Fall, dass ein Browser verwendet wird, der die getUserMedia() -Funktion in der MediaDevices -API nicht unterst\u00fctzt (was, wie wir oben erl\u00e4utert haben, nur noch selten der Fall ist). Wir erweitern f\u00fcr diesen seltenen Fall die initializeMedia() -Funktion: public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } } Wenn also die MediaDevices -API nicht unterst\u00fctzt wird (Zeile 15 ), dann erstellen wir einen eigenes MediaDevices -Objekt (Zeile 16 ). F\u00fcr dieses eigene MediaDevices -Objekt erstellen wir eine getUserMedia() -Funktion (Zeile 20 ). Diese Funktion gibt eine Promise zur\u00fcck. Entweder, eine Promise mit dem Zustand rejected (Zeile 24 ), n\u00e4mlich genau dann, wenn der Browser auch nicht die alten Funktionen webkitUserMedia und mozGetUserMedia unterst\u00fctzt. Dann k\u00f6nnen wir wirklich nichts mehr machen. Oder die Promise verwendet eine der beiden Funktionen und gibt die Promise nach Anwendung zur\u00fcck - kann nat\u00fcrlich trotzdem noch sein, dass sie rejected wird, aber vielleicht auch resolved . Jedenfalls bezieht sich dieser gesamte Code auf den Fall, dass getUserMedia() in navigator.mediaDevices nicht unterst\u00fctzt wird. Es handelt sich bei diesem Code um ein sogenanntes Polyfill . Wir k\u00fcmmern uns jetzt darum, tats\u00e4chlich Zugriff zur Kamera zu bekommen. Das kann nun entweder \u00fcber die moderne getUserMedia() -Funktion aus navigator.mediaDevices geschehen oder \u00fcber das Polyfill unter Verwendung von webkitGetUserMedia() oder mozGetUserMedia() . Nur f\u00fcr den Fall, dass wir keinen Zugriff auf die Kamera erhalten, wollen wir den File-Picker verwenden, um eine Bilddatei hochzuladen. public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } navigator . mediaDevices . getUserMedia ({ video : true }) . then ( stream => { videoPlayer . srcObject = stream ; videoPlayer . style . display = 'block' ; }) . catch ( err => { imagePickerArea . style . display = 'block' ; }); } Ab Zeile 32 k\u00f6nnen wir auf jeden Fall auf die getUserMedia() -Funktion zugreifen und genau das tun wir auch in Zeile 33 . Dieser Funktion wird ein JavaScript-Objekt \u00fcbergeben. Dieses Objekt hat zwei Eigenschaften: video und audio . Beide sind auf false gesetzt, wir k\u00f6nnen sie jedoch mit true einschalten und erledigen das f\u00fcr video ebefalls in Zeile 33 . Diese Funktion gibt eine promise zur\u00fcck. Im resolve -Fall erhalten wir einen Video- und/oder Audio- Stream . Wir verwenden diesen stream als Quelle f\u00fcr unseren Videplayer (der aufgrund der Funktion autoplay den Stream sofort anzeigt). Wir setzen daf\u00fcr den Videoplayer auf sichtbar - display: 'block' . Der reject -Fall der Promise kann verschiedene Gr\u00fcnde haben. Ein Grund w\u00e4re, wie oben erl\u00e4utert, dass wir selbst mit dem Polyfill keinen Zugriff auf die Kamera bekommen. Ein anderer w\u00e4re, dass unser Ger\u00e4t gar nicht mit einer Kamera verbunden ist und ein dritter Fall w\u00e4re, dass der Zugriff auf die Kamera von der Nutzerin blockiert wird. Wenn die getUserMedia() -Funktion das erste Mal aufgerufen wird, erfolgt eine Abfrage, ob der Zugriff auf die Kamera zugelassen oder blockiert wird: Die Entscheidung l\u00e4sst sich auch nachtr\u00e4glich \u00e4ndern, indem man auf das i links neben der URL klickt. Wenn Sie die Anwendung ausf\u00fchren und den Zugriff auf die Kamera erlauben, wird das Video sofort angezeigt. Wird die Promise rejected , soll die gesamte imagePickerArea (wieder) auf display: 'block' gesetzt werden. In der Funktion closeCreatePostModal() setzen wir die Video- und File-Picker-Elemente ebenaflls alle (wieder) auf display: 'block' . public/src/js/feed.js 48 49 50 51 52 53 function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; } Wird der Zugriff auf die Kamera blockiert, wird stattdessen der File-Picker angezeigt: Das Click-Ereignis des Foto-Buttons behandeln \u00b6 Nun wollen wir den Foto -Button implementieren, damit wir ein Foto von dem Kamerastream erzeugen k\u00f6nnen. Dazu implementieren wir f\u00fcr diesen Button die Behandlung des click -Ereignisses: public/src/js/feed.js 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 captureButton . addEventListener ( 'click' , event => { event . preventDefault (); // nicht absenden und neu laden canvasElement . style . display = 'block' ; videoPlayer . style . display = 'none' ; captureButton . style . display = 'none' ; let context = canvasElement . getContext ( '2d' ); context . drawImage ( videoPlayer , 0 , 0 , canvas . width , videoPlayer . videoHeight / ( videoPlayer . videoWidth / canvas . width )); videoPlayer . srcObject . getVideoTracks (). forEach ( track => { track . stop (); }) imageURI = canvas . toDataURL ( \"image/jpg\" ); // console.log('imageURI', imageURI) // base64-String des Bildes fetch ( imageURI ) . then ( res => { return res . blob () }) . then ( blob => { file = new File ([ blob ], \"myFile.jpg\" , { type : \"image/jpg\" }) console . log ( 'file' , file ) }) }); Die Grundidee dabei ist die, dass wir das ktuelle Bild des videoPlayers in unser canvasElement einf\u00fcgen, das canvasElement sichtbar gestalten, den videoPlayer unsichtbar (und den Button dann auch gleich noch) und au\u00dferdem den Videoplayer stoppen. Das Canvas -Element verf\u00fcgt \u00fcber einen Grafikkontext, den wir in Zeile 48 als 2d ausw\u00e4hlen. Siehe dazu auch HTMLCanvasElement.getContext() . F\u00fcr diesen context rufen wir die drawImage() -Funktion auf (siehe CanvasRenderingContext2D.drawImage() ). der erste Parameter der drawImage() -Funktion ist das Bild. Wir \u00fcbergeben dazu den videoPlayer . der zweite und dritte Parameter ist die Koordinate des linken oberen Punktes innerhalb des Canvas-Elementes, hier x=0 und y= 0 . der dritte Parameter gibt die Breite des Bildes an. Wir nehmen hier die gesamte Breite des Canvas-Elementes. der vierte Parameter gibt die H\u00f6he des Bildes an. Da wir der Breite einen festen Wert zugewiesen haben (die Canvas-Breite), m\u00fcssen wir die H\u00f6he in Abh\u00e4ngigkeit der Relation des Videos berechnen. Wenn wir dieses Bild erstellt haben, k\u00f6nnen wir den Videoplayer stoppen. Die Funktion getVideoTracks() gibt ein Array allerlaufenden Streams auf der Webseite zur\u00fcck. Wir laufen durch dieses Array mithilfe der forEach -Schleife (Zeile 50 ) und stoppen alle laufenden Streams (Zeile 51 ). Wenn wir nun den Foto -Button klicken, sehen wir das (Stand-)Bild im canvasElement , der videoPlayer und der Button sind unsichtbar und der videoPlayer ist gestoppt. Bild in base64 umwandeln \u00b6 Das canvas -Element (siehe HTMLCanvasElement aus der Canvas-API ) besitzt eine Funktion toDataURL() , die ein Bild im angegebenen Format zur\u00fcckgibt (siehe HTMLCanvasElement.toDataURL() ). Wir geben an, dass das Bild im image/jpg -Format zur\u00fcckgegeben werden soll (siehe Zeile 53 ). Es wird ein base64 -String erzeugt, den wir in der globalen Variablen imageURI speichern. File-Objekt erzeugen \u00b6 Wir verf\u00fcgen nun \u00fcber eine Data-URL (siehe Data URLs ) unseres Bildes. Mit dieser Data-URL k\u00f6nnen wir mithilfe der fetch() -Funktion ein File -Objekt erzeugen. Wir weisen unserem File -Objekt den Dateinamen myFile.jpg zu. Die Referenz auf dieses File -Objekt speichern wir in der globalen Variablen file (siehe Zeilen 56-63 ). Speichern des Bildes im Backend \u00b6 Nun k\u00f6nnen wir bereits Fotos aufnehmen und diese speichern. Wenn wir nun die Funktion sendDataToBackend() aufrufen, werden die title -, location - und file -Werte als FormData an das Backend gesendet. Schauen wir uns dazu die sendDataToBackend() -Funktion nochmals genauer an: 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 function sendDataToBackend () { const formData = new FormData (); formData . append ( 'title' , titleValue ); formData . append ( 'location' , locationValue ); formData . append ( 'file' , file ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); const newPost = { title : data . title , location : data . location , image_id : imageURI } updateUI ([ newPost ]); }); } Mithilfe der fetch() -Funktion werden die formData an das Backend gesendet. Wir erhalten den neu angelegten Datensatz zur\u00fcck, z.B.: { \"title\" : \"Eingang\" , \"location\" : \"Tor WH\" , \"image_id\" : \"1652973765918-jf-htwbild4.jpg\" , \"_id\" : \"628660c55619a5a107acb19d\" , \"__v\" : 0 } Wir wollen den neuen Post sofort in unserer Anwendung anzeigen. Dazu rufen wir die updateUI() -Funktion auf und \u00fcbergeben den neuen Datensatz als Array (die Funktion updateUI() erwartet ein Array). Allerdings erwarten wir ja eigentlich f\u00fcr die Eigenschaft image_id einen base64 -String. Allerdings gibt uns die POST-Anfrage an das Backend nicht diesen String zur\u00fcck, sondern den Dateinamen des Bildes in der Datenbank. Dazu haben wir uns aber den base64 -String in imageURI gespeichert und verwenden ihn nun bei dem Datensatz, der an die updateUI() -Funktion \u00fcbergeben wird. Das war es schon, wir k\u00f6nnen nun die Daten an das Backend senden. Zum Testen nehmen Sie ein Foto auf, geben einen Titel und eine Location ein und klicken den Speichern -Button. Dann landnet - hoffentlich - alles im Backend. F\u00fcr den Fall, dass die Kamera nicht zur Verf\u00fcgung steht oder die MediaDevices -API oder der Kamerazugriff blockiert wurde, muss das Hochladen einer Bilddatei \u00fcber das input -Element vom Typ file implementiert werden. Dazu wird das change -Event des Upload -Buttons behandelt: Bilddatei hochladen \u00b6 Das Hochladen einer Bilddatei kennen wir ja bereits von unserem anderen Frontend. Hier ist nun auch schon alles vorbereitet und wir m\u00fcssen in der feed.js nur noch das change -Event f\u00fcr den upload -Button behandeln. Das sieht im Prinzip genau so aus, wie die Umwandlung des Canvas-Bildes, nur dass picture hier die hochgeladene Datei ist: public/src/js/feed.js 104 105 106 imagePicker . addEventListener ( 'change' , event => { file = event . target . files [ 0 ]; }); Letzte Verbesserungen \u00b6 Ein Nachteil in unserer Anwendung ist noch, dass die Kamera die ganze Zeit l\u00e4uft, wenn wir einmal den modalen Dialog zur Eingabe von daten ge\u00f6ffnet hatten. Wir sollten sie beim Ausschalten des modalen Dialoges schlie\u00dfen. Das Stoppen aller Videostreams hatten wir bereits f\u00fcr die Aufnahme des Fotos gemacht. Weil jedoch das Schlie\u00dfen und erneutes \u00d6ffnen der Kamera sehr ressourcenverbrauchend ist, laufen die Animationen f\u00fcr das \u00d6ffnen und Schlie\u00dfen des modalen Dialogs nicht mehr fl\u00fcssig. Wir lagern diese Animationen deshalb in einen asynchronen \"Thread\" aus (ist nicht wirklich ein neuer Thread): public/src/js/feed.js 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 function openCreatePostModal () { setTimeout ( () => { createPostArea . style . transform = 'translateY(0)' ; }, 1 ); initializeMedia (); } function closeCreatePostModal () { imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; if ( videoPlayer . srcObject ) { videoPlayer . srcObject . getVideoTracks (). forEach ( track => track . stop ()); } setTimeout ( () => { createPostArea . style . transform = 'translateY(100vH)' ; }, 1 ); } Mithilfe des timeout -\"Tricks\" wird der modale Dialog flie\u00dfend geschlossen und das Kamerazeichen im Tab des Browsers schlie\u00dft asynchron etwas sp\u00e4ter. Success Wir k\u00f6nnen nun Fotos mit der Kamera aufnehmen und die Bilder als Post an das Backend senden, wo es in die Datenbank gespeichert wird!","title":"Kamera"},{"location":"kamera/#geratezugriffe-kamera","text":"Hint Aktueller Stand vor Ger\u00e4tezugriffe: Frontend Backend Collection post Collection post.files Collection post.chunks Nun wollen wir noch auf Ger\u00e4teschnittstellen zugreifen. Dazu geh\u00f6ren die Kamera und auch die Geolocation-API, um unseren Standort zu ermitteln. Fr\u00fcher war JavaScript eine \"SandBox\", d.h. JavaScript-Code war vollst\u00e4ndig innerhalb des Browsers gekapselt und hatte keinerlei Zugriff nach au\u00dfen. Das \u00e4nderte sich mit dem Upload File -Button. JavaScript bekam (sehr eingeschr\u00e4nkten) Zugriff auf das Dateisystem (nur lesend). In der Zwischenzeit hat sich das komplett gewandelt. JavaScript l\u00e4uft erstens auch auf Servern und hat zweitens \u00fcber eine Vielzahl von APIs Zugriff auf unterschiedlichste Schnittstellen zum System. Wir wollen hier zun\u00e4chst betrachten, wie JavaScript auf die Kamera zugreifen kann. Sp\u00e4ter ermitteln wir auch noch den eigenen Standort.","title":"Ger\u00e4tezugriffe - Kamera"},{"location":"kamera/#anpassung-der-anwendung","text":"Ausgangspunkt ist dieser Stand des Projektes , den wir nach der Einf\u00fchrung von IndexedDB erreicht haben.","title":"Anpassung der Anwendung"},{"location":"kamera/#zunachst-ein-bisschen-mehr-responsive","text":"Unser HTW Insta entwickelt sich langsam. Deshalb ist hier vielleicht ein guter Zeitpunkt, um die Anwendung noch etwas mehr responsive zu gestalten.","title":"Zun\u00e4chst ein bisschen mehr responsive"},{"location":"kamera/#media-queries","text":"Zum Beispiel sind die Cards stets in fester Gr\u00f6\u00dfe, unabh\u00e4ngig davon, ob wir die Anwendung am Desktop betrachten oder am Mobilger\u00e4t. Dazu k\u00f6nnen wir in unsere feed.css ein paar Media queries einf\u00fcgen: /src/css/feed.css # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; visibility : hidden ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . whiteText { color : white ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } . shared-moment-card . mdl-card { margin : 10 px auto ; width : 80 % ; } @ media ( min-width : 600px ) { . shared-moment-card . mdl-card { width : 60 % ; } } @ media ( min-width : 1200px ) { . shared-moment-card . mdl-card { width : 45 % ; } } . shared-moment-card . mdl-card__title { height : 250 px ; } @ media ( min-height : 600px ) { . shared-moment-card . mdl-card__title { height : 300 px ; } } @ media ( min-height : 1200px ) { . shared-moment-card . mdl-card__title { height : 380 px ; } } Wir haben sowohl f\u00fcr die Viewport-H\u00f6he als auch f\u00fcr die Viewport-Breite zwei Breakpoints eingebaut. Bei jeweils 600px bzw. 1200px \u00e4ndern sich die Angaben zur H\u00f6he bzw. Breite der Bilder in den Cards . Achtung: In feed.js muss dazu die Zeile cardTitle.style.height = '180px'; gel\u00f6scht werden! Die H\u00f6he und Breite der Bilder in den Cards passt sich jetzt (besser) der Viewport-Breite und -H\u00f6he an. Bei den Breiten haben wir sogar %-Angaben verwendet (gut), bei den H\u00f6hen nur feste Pixel-Werte (nicht so gut). Sie k\u00f6nnen gerne damit herumspielen und es an Ihre Bed\u00fcrfnisse anpassen. Mehr zu Media Queries finden Sie z.B. hier und hier https://wiki.selfhtml.org/wiki/CSS/Media_Queries .","title":"Media Queries"},{"location":"kamera/#srcset-attribut-fur-img","text":"Die Verwendung der Bilder k\u00f6nnen wir noch auf eine andere Art responsive gestalten. Je nach Viewport-Gr\u00f6\u00dfe k\u00f6nnen die Bilder eingebunden werden, deren Aufl\u00f6sung \"ausreicht\". In dem /public/src/images/ -Ordner haben wir f\u00fcr unser Hauptbild oben drei verschiedene Versionen: htw.jpg , mit der Aufl\u00f6sung 898 x 343 Pixel, htw-lg.jpg , mit der Aufl\u00f6sung 1199 x 457 Pixel und htw-sm.jpg , mit der Aufl\u00f6sung 480 x 183 Pixel. Es w\u00e4re unsinnig, beisielsweise das htw-lg.jp auf einem schmalen Viewport anzuzeigen, da daf\u00fcr die Aufl\u00f6sung des htw-sm.lpg v\u00f6llig gen\u00fcgt. Da Letzteres auch noch deutlich kleiner ist ( 43 KB ), als das htw-lg.jpg -Bild ( 170 KB ), lie\u00dfe sich auch die Ladezeit verringern, wenn f\u00fcr mobile Ger\u00e4te das kleiner Bild verwendet w\u00fcrde. Auf der anderen Seite sieht dieses Bild aufgrund seiner niedrigen Aufl\u00f6sung in gro\u00dfen Viewports (also am Desktop-Monitor) nicht gut aus. Dort ben\u00f6tigen wir das htw-lg.jpg . Um diesen Wechsel der Bilder je nach Viewport-Gr\u00f6\u00dfe zu vereinfachen, wurde in HTML5 f\u00fcr das img -Element das Attribut srcset hinzugef\u00fcgt (siehe z.B. hier oder hier ). In unserer index.html k\u00f6nnen wir also das Einbinden des img -Elementes wie folgt erweitern: /index.html 88 89 90 91 < img srcset = \"/src/images/htw-lg.jpg 1200w, /src/images/htw.jpg 900w, /src/images/htw-sm.jpg 480w\" src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > Zuvor stand dort einfach nur: <img src=\"/src/images/htw.jpg\" alt=\"HTW Wilhelminenhof\" class=\"main-image\"> . Wir haben also das srcset -Attribut hinzugef\u00fcgt. Das generelle Template daf\u00fcr sieht so aus: < img srcset = \"url size, url size, url size\" src = \"default url\" > Das hei\u00dft, nach den URLs auf die jeweiligen Bilder schreiben wir noch die Gr\u00f6\u00dfe des Viewports, ab denen die Bilder verwendet werden sollen, also 1200w, 900w, 480w . Dabei steht w f\u00fcr width . M\u00f6glich w\u00e4re auch noch, dass man statt w ein x angibt und dann die Anzahl der Pixel verwendet f\u00fcr die Viewportgr\u00f6\u00dfe. Das Laden der unterschiedlichen Images kann in den DeveloperTools unter Network beobachtet werden.","title":"srcset-Attribut f\u00fcr img"},{"location":"kamera/#animationen","text":"Wenn wir auf der Hauptseite auf den + -Button klicken, dann \"erscheint\" das Formular zur Dateneingabe einfach. Das liegt daran, dass wir in der feed.js bei den Funktionen openCreatePostModal() und closeCreatePostModal() die Sichtbarkeit einfach an- und ausschalten. Wir k\u00f6nnten das aber auch etwas \"netter\" durch eine Animation gestalten. Dazu verwenden wir translateY und transition . translateY() verschiebt ein Element in y -Richtung (also rauf oder runter) und transition kann eine Zeit \u00fcbergeben werden, die angibt, wie lange der Wechsel von Werten einer Eigenschaft dauern soll - also eine Animation. In der feed.ccs \u00e4ndern wir f\u00fcr die id=create-post : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } Die Zeile 11 kann nat\u00fcrlich ganz raus. In der feed.js \u00e4ndern wir f\u00fcr die beiden Methoden: 1 2 3 4 5 6 7 function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; } function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; } und danach \"slided\" das Formular von unten nach oben ein. vH ist eine Einheit in Relation zum Viewport. 100vH ist die gesamte Viewporth\u00f6he, 1vH ist der 100te Teil der Viewporth\u00f6he (siehe z.B. hier ). Wir wollen nun die Kamera verwenden, um Bilder aufzunehmen. Au\u00dferdem wollen wir einen titel und eine location eingeben k\u00f6nnen und alles zusammen als Post versenden.","title":"Animationen"},{"location":"kamera/#einen-post-an-das-backend-senden","text":"Um die eingegebenen Daten zu senden, wollen wir den Speichern -Button aus der index.html 76 77 78 < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > mit der feed.js verbinden. Dazu definieren wir uns zun\u00e4chst mithilfe von jQuery weitere Variablen f\u00fcr den direkten Zugriff auf Stuerelemente. Wir erweiteren die feed.js um die hervorgehobenen Zeilen: /src/js/feed.js 1 2 3 4 5 6 7 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); Nun k\u00f6nnen wir einfacher auf das submit -Ereignis des Speichern -Buttons reagieren. Wir melden dazu das Formular an den Ereignislistener f\u00fcr das submit -Ereignis in der feed.js an: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); }); Wir verhindern zun\u00e4chst das Standardverhalten beim submit -Ereignis, n\u00e4mlich das Absenden der Daten und das Neuladen der Seite (Zeile 80 ). In Zeile 82 pr\u00fcfen wir, ob beide input -Elemente, also sowohl f\u00fcr title , als auch f\u00fcr location einen Wert enthalten. Die JavaScript- trim() -Funktionen entfernt \"Leerzeichen\" aller Art am Ende des Strings (auch Tabs, Zeilenumbr\u00fcche etc.). Sollte eines der beiden (oder beide) Eingabefelder leer sein, beenden wir die Funktion mit einem alert und bleiben in dem Formular. alert ist nat\u00fcrlich nicht so toll, ein toast w\u00e4re viel besser, aber wir haben in unserer index.html nur einen toast f\u00fcr das erfolgreiche Speichern vordefiniert. Wenn beide Eingabefelder bef\u00fcllt sind, wird das Formularfenster verlassen. Um die Daten an das Backend zu senden, verwenden wir die fetch() -Funktion und die POST -Methode. H\u00e4tten wir nur Textdaten, die wir \u00fcbertragen wollen, k\u00f6nnten wir ein einfaches JSON senden (und wieder empfangen). Die fetch() -Funktion k\u00f6nnte dann so aussehen: Beispiel fetch f\u00fcr POST fetch ( 'http://localhost:3000/posts' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' , }, body : JSON . stringify ({ title : titleInput . value , location : locationInput . value , image_id : '' , }) }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); updateUI ( Object . entries ( data )); }); Wir versenden jedoch form-data . Dazu erstellen wir ein FormData -Objekt (siehe FormData ). Wir f\u00fcgen dazu eine Funktion sendDataToBackend() in die feed.js ein und rufen diese f\u00fcr die Behandlung des submit -Ereignisses auf: /src/js/feed.js 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 function sendDataToBackend () { const formData = new FormData (); formData . append ( 'title' , titleValue ); formData . append ( 'location' , locationValue ); formData . append ( 'file' , file ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); const newPost = { title : data . title , location : data . location , image_id : imageURI } updateUI ([ newPost ]); }); } form . addEventListener ( 'submit' , event => { event . preventDefault (); // nicht absenden und neu laden if ( file == null ) { alert ( 'Erst Foto aufnehmen!' ) return ; } if ( titleInput . value . trim () === '' || locationInput . value . trim () === '' ) { alert ( 'Bitte Titel und Location angeben!' ) return ; } closeCreatePostModal (); titleValue = titleInput . value ; locationValue = locationInput . value ; sendDataToBackend (); }); In dieser Funktion werden mehrere Variablen verwendet, die in der feed.js deklariert werden m\u00fcssen: /src/js/feed.js 13 14 15 16 let file = null ; let titleValue = '' ; let locationValue = '' ; let imageURI = '' ; Wir sehen, dass die Werte der Variablen titleValue und locationValue durch das submit -Ereignisses des Eingabeformulars (des Speichern -Buttons) gesetzt werden (siehe oben feed.js Zeilen 120 und 121 ). Die Werte der Variablen file und imageURI erhalten wir jedoch erst, wenn wir ein Foto mit der Kamera aufnehmen. Das schauen wir uns im Folgenden an:","title":"Einen Post an das Backend senden"},{"location":"kamera/#aufnehmen-von-fotos","text":"In der feed.js haben wir den Wert von image_id zun\u00e4chst noch leer gelassen. Wir wollen nun die Kamera anbinden und damit ein Foto aufnehmen, das wir mitversenden. Dazu erweiteren wir die Anwendung zun\u00e4chst, um neben title und location auch noch ein drittes Eingabefeld f\u00fcr die Bilder zu erhalten. Dazu erweiteren wir zun\u00e4chst die public/index.html : public/index.html 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 < form > < div id = \"create-post\" > < video id = \"player\" autoplay ></ video > < canvas id = \"canvas\" width = \"320px\" height = \"240px\" ></ canvas > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\" id = \"capture-btn\" > Foto </ button > < div id = \"pick-image\" > < h6 > Bild ausw\u00e4hlen </ h6 > < input type = \"file\" accept = \"image/*\" id = \"image-picker\" > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > <!-- <div class=\"input-section\"> <button class=\"mdl-button mdl-js-button mdl-button--colored\" type=\"button\" id=\"location-btn\">Location</button> <div class=\"mdl-spinner mdl-js-spinner is-active\" id=\"location-loader\"></div> </div> --> < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ div > </ form > Das <video> - (Zeile 67 ) und das <canvas> -Element (Zeile 68 ) werden verwendet, um mit der Kamera Bilder aufzunehmen, die mit dem <button> (Zeile 69 ) gespeichert werden. Der image-picker (Zeilen 70-73 ) wird ben\u00f6tigt, falls das Ger\u00e4t \u00fcber keine Kamera (oder keinen Kamerazugriff) verf\u00fcgt. Au\u00dferdem f\u00fcgen wir noch eine weitere Eingabesection f\u00fcr die Location hinzu mit einem Button und einem spinner , der anzeigen soll, dass etwas passiert. Diese Eingabesection haben wir aber zun\u00e4chst auskommentiert, da wir diese erst beim Thema Geo-Location verwenden. Wir verwenden die CSS-Klassen und -Ids auch noch, um die Eingabe etwas \"sch\u00f6ner\" aussehen zu lassen und erweiteren dazu die feed.css : public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : calc ( 100 vh - 56 px ); overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; /* visibility: hidden; */ transform : translateY ( 100 vH ); transition : transform 0.3 s ; } # create-post video , # create-post canvas { width : 512 px ; max-width : 100 % ; display : none ; margin : auto ; } # create-post # pick-image { display : none ; } # create-post # capture-btn { margin : 10 px auto ; } . mdl-spinner { margin : auto ; } /* hier der Rest */ Die CSS-Definitionen sorgen insbesondere daf\u00fcr, dass das Video- , Canvas- und File-Picker-Element zun\u00e4chst versteckt ist. Wir wollen uns zun\u00e4chst darum k\u00fcmmern, ein Live-Bild der Kamera in das Canvas-Element zu integrieren, d.h. wir k\u00fcmmern uns zun\u00e4chst um den Kamerazugriff.","title":"Aufnehmen von Fotos"},{"location":"kamera/#kamera-zugriff","text":"F\u00fcr den Kamerazugriff ben\u00f6tigen wir etwas JavaScript-Code. Wir erweitern die feed.js . Zun\u00e4chst vereinfachen wir die Zugriffe auf die einzelnen Elemente und f\u00fcgen eine Funktion hinzu, mit der wir den Zugriff auf die Kamera pr\u00fcfen und herstellen wollen: public/src/js/feed.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 let shareImageButton = document . querySelector ( '#share-image-button' ); let createPostArea = document . querySelector ( '#create-post' ); let closeCreatePostModalButton = document . querySelector ( '#close-create-post-modal-btn' ); let sharedMomentsArea = document . querySelector ( '#shared-moments' ); let form = document . querySelector ( 'form' ); let titleInput = document . querySelector ( '#title' ); let locationInput = document . querySelector ( '#location' ); let videoPlayer = document . querySelector ( '#player' ); let canvasElement = document . querySelector ( '#canvas' ); let captureButton = document . querySelector ( '#capture-btn' ); let imagePicker = document . querySelector ( '#image-picker' ); let imagePickerArea = document . querySelector ( '#pick-image' ); let file = null ; let titleValue = '' ; let locationValue = '' ; let imageURI = '' ; function initializeMedia () { } function openCreatePostModal () { createPostArea . style . transform = 'translateY(0)' ; initializeMedia (); } In der neuen Funktion initializeMedia() wollen wir die MediaDevices -API verwenden. Ein Blick in die Dokumentation dieser API zeigt, dass die Browser-Unterst\u00fctzung noch nicht besonders gut ist, zumindest f\u00fcr einige der Methoden darin. Wir wollen aber insbesondere die getUserMedia() -Funktion verwenden und daf\u00fcr ist die Browser-Unterst\u00fctzung wiederum doch sehr gut (Chrom, Firefox, Edge und alle mobilen Ger\u00e4te). F\u00fcr den Fall, dass die MediaDevices -API nicht unterst\u00fctzt werden, erstellen wir uns im navigator ein eigenes mediaDevices -Objekt und pr\u00fcfen, ob die getUserMedia() -Funktion unterst\u00fctzt wird. Wenn dies nicht der Fall ist, erstellen wir uns f\u00fcr das neue mediaDevices -Objekt eine neue Eigenschaft getUserDevices und definieren es als eine Funktion. Diese Funktion nutzt dann alte Funktionen, die in den jeweiligen Browsern angeboten wurden (und werden). Wie gesagt, das ist nur ein Fallback f\u00fcr den Fall, dass ein Browser verwendet wird, der die getUserMedia() -Funktion in der MediaDevices -API nicht unterst\u00fctzt (was, wie wir oben erl\u00e4utert haben, nur noch selten der Fall ist). Wir erweitern f\u00fcr diesen seltenen Fall die initializeMedia() -Funktion: public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } } Wenn also die MediaDevices -API nicht unterst\u00fctzt wird (Zeile 15 ), dann erstellen wir einen eigenes MediaDevices -Objekt (Zeile 16 ). F\u00fcr dieses eigene MediaDevices -Objekt erstellen wir eine getUserMedia() -Funktion (Zeile 20 ). Diese Funktion gibt eine Promise zur\u00fcck. Entweder, eine Promise mit dem Zustand rejected (Zeile 24 ), n\u00e4mlich genau dann, wenn der Browser auch nicht die alten Funktionen webkitUserMedia und mozGetUserMedia unterst\u00fctzt. Dann k\u00f6nnen wir wirklich nichts mehr machen. Oder die Promise verwendet eine der beiden Funktionen und gibt die Promise nach Anwendung zur\u00fcck - kann nat\u00fcrlich trotzdem noch sein, dass sie rejected wird, aber vielleicht auch resolved . Jedenfalls bezieht sich dieser gesamte Code auf den Fall, dass getUserMedia() in navigator.mediaDevices nicht unterst\u00fctzt wird. Es handelt sich bei diesem Code um ein sogenanntes Polyfill . Wir k\u00fcmmern uns jetzt darum, tats\u00e4chlich Zugriff zur Kamera zu bekommen. Das kann nun entweder \u00fcber die moderne getUserMedia() -Funktion aus navigator.mediaDevices geschehen oder \u00fcber das Polyfill unter Verwendung von webkitGetUserMedia() oder mozGetUserMedia() . Nur f\u00fcr den Fall, dass wir keinen Zugriff auf die Kamera erhalten, wollen wir den File-Picker verwenden, um eine Bilddatei hochzuladen. public/src/js/feed.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 function initializeMedia () { if ( ! ( 'mediaDevices' in navigator )) { navigator . mediaDevices = {}; } if ( ! ( 'getUserMedia' in navigator . mediaDevices )) { navigator . mediaDevices . getUserMedia = function ( constraints ) { let getUserMedia = navigator . webkitGetUserMedia || navigator . mozGetUserMedia ; if ( ! getUserMedia ) { return Promise . reject ( new Error ( 'getUserMedia is not implemented' )); } return new Promise ( ( resolve , reject ) => { getUserMedia . call ( navigator , constraints , resolve , reject ); }) } } navigator . mediaDevices . getUserMedia ({ video : true }) . then ( stream => { videoPlayer . srcObject = stream ; videoPlayer . style . display = 'block' ; }) . catch ( err => { imagePickerArea . style . display = 'block' ; }); } Ab Zeile 32 k\u00f6nnen wir auf jeden Fall auf die getUserMedia() -Funktion zugreifen und genau das tun wir auch in Zeile 33 . Dieser Funktion wird ein JavaScript-Objekt \u00fcbergeben. Dieses Objekt hat zwei Eigenschaften: video und audio . Beide sind auf false gesetzt, wir k\u00f6nnen sie jedoch mit true einschalten und erledigen das f\u00fcr video ebefalls in Zeile 33 . Diese Funktion gibt eine promise zur\u00fcck. Im resolve -Fall erhalten wir einen Video- und/oder Audio- Stream . Wir verwenden diesen stream als Quelle f\u00fcr unseren Videplayer (der aufgrund der Funktion autoplay den Stream sofort anzeigt). Wir setzen daf\u00fcr den Videoplayer auf sichtbar - display: 'block' . Der reject -Fall der Promise kann verschiedene Gr\u00fcnde haben. Ein Grund w\u00e4re, wie oben erl\u00e4utert, dass wir selbst mit dem Polyfill keinen Zugriff auf die Kamera bekommen. Ein anderer w\u00e4re, dass unser Ger\u00e4t gar nicht mit einer Kamera verbunden ist und ein dritter Fall w\u00e4re, dass der Zugriff auf die Kamera von der Nutzerin blockiert wird. Wenn die getUserMedia() -Funktion das erste Mal aufgerufen wird, erfolgt eine Abfrage, ob der Zugriff auf die Kamera zugelassen oder blockiert wird: Die Entscheidung l\u00e4sst sich auch nachtr\u00e4glich \u00e4ndern, indem man auf das i links neben der URL klickt. Wenn Sie die Anwendung ausf\u00fchren und den Zugriff auf die Kamera erlauben, wird das Video sofort angezeigt. Wird die Promise rejected , soll die gesamte imagePickerArea (wieder) auf display: 'block' gesetzt werden. In der Funktion closeCreatePostModal() setzen wir die Video- und File-Picker-Elemente ebenaflls alle (wieder) auf display: 'block' . public/src/js/feed.js 48 49 50 51 52 53 function closeCreatePostModal () { createPostArea . style . transform = 'translateY(100vH)' ; imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; } Wird der Zugriff auf die Kamera blockiert, wird stattdessen der File-Picker angezeigt:","title":"Kamera-Zugriff"},{"location":"kamera/#das-click-ereignis-des-foto-buttons-behandeln","text":"Nun wollen wir den Foto -Button implementieren, damit wir ein Foto von dem Kamerastream erzeugen k\u00f6nnen. Dazu implementieren wir f\u00fcr diesen Button die Behandlung des click -Ereignisses: public/src/js/feed.js 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 captureButton . addEventListener ( 'click' , event => { event . preventDefault (); // nicht absenden und neu laden canvasElement . style . display = 'block' ; videoPlayer . style . display = 'none' ; captureButton . style . display = 'none' ; let context = canvasElement . getContext ( '2d' ); context . drawImage ( videoPlayer , 0 , 0 , canvas . width , videoPlayer . videoHeight / ( videoPlayer . videoWidth / canvas . width )); videoPlayer . srcObject . getVideoTracks (). forEach ( track => { track . stop (); }) imageURI = canvas . toDataURL ( \"image/jpg\" ); // console.log('imageURI', imageURI) // base64-String des Bildes fetch ( imageURI ) . then ( res => { return res . blob () }) . then ( blob => { file = new File ([ blob ], \"myFile.jpg\" , { type : \"image/jpg\" }) console . log ( 'file' , file ) }) }); Die Grundidee dabei ist die, dass wir das ktuelle Bild des videoPlayers in unser canvasElement einf\u00fcgen, das canvasElement sichtbar gestalten, den videoPlayer unsichtbar (und den Button dann auch gleich noch) und au\u00dferdem den Videoplayer stoppen. Das Canvas -Element verf\u00fcgt \u00fcber einen Grafikkontext, den wir in Zeile 48 als 2d ausw\u00e4hlen. Siehe dazu auch HTMLCanvasElement.getContext() . F\u00fcr diesen context rufen wir die drawImage() -Funktion auf (siehe CanvasRenderingContext2D.drawImage() ). der erste Parameter der drawImage() -Funktion ist das Bild. Wir \u00fcbergeben dazu den videoPlayer . der zweite und dritte Parameter ist die Koordinate des linken oberen Punktes innerhalb des Canvas-Elementes, hier x=0 und y= 0 . der dritte Parameter gibt die Breite des Bildes an. Wir nehmen hier die gesamte Breite des Canvas-Elementes. der vierte Parameter gibt die H\u00f6he des Bildes an. Da wir der Breite einen festen Wert zugewiesen haben (die Canvas-Breite), m\u00fcssen wir die H\u00f6he in Abh\u00e4ngigkeit der Relation des Videos berechnen. Wenn wir dieses Bild erstellt haben, k\u00f6nnen wir den Videoplayer stoppen. Die Funktion getVideoTracks() gibt ein Array allerlaufenden Streams auf der Webseite zur\u00fcck. Wir laufen durch dieses Array mithilfe der forEach -Schleife (Zeile 50 ) und stoppen alle laufenden Streams (Zeile 51 ). Wenn wir nun den Foto -Button klicken, sehen wir das (Stand-)Bild im canvasElement , der videoPlayer und der Button sind unsichtbar und der videoPlayer ist gestoppt.","title":"Das Click-Ereignis des Foto-Buttons behandeln"},{"location":"kamera/#bild-in-base64-umwandeln","text":"Das canvas -Element (siehe HTMLCanvasElement aus der Canvas-API ) besitzt eine Funktion toDataURL() , die ein Bild im angegebenen Format zur\u00fcckgibt (siehe HTMLCanvasElement.toDataURL() ). Wir geben an, dass das Bild im image/jpg -Format zur\u00fcckgegeben werden soll (siehe Zeile 53 ). Es wird ein base64 -String erzeugt, den wir in der globalen Variablen imageURI speichern.","title":"Bild in base64 umwandeln"},{"location":"kamera/#file-objekt-erzeugen","text":"Wir verf\u00fcgen nun \u00fcber eine Data-URL (siehe Data URLs ) unseres Bildes. Mit dieser Data-URL k\u00f6nnen wir mithilfe der fetch() -Funktion ein File -Objekt erzeugen. Wir weisen unserem File -Objekt den Dateinamen myFile.jpg zu. Die Referenz auf dieses File -Objekt speichern wir in der globalen Variablen file (siehe Zeilen 56-63 ).","title":"File-Objekt erzeugen"},{"location":"kamera/#speichern-des-bildes-im-backend","text":"Nun k\u00f6nnen wir bereits Fotos aufnehmen und diese speichern. Wenn wir nun die Funktion sendDataToBackend() aufrufen, werden die title -, location - und file -Werte als FormData an das Backend gesendet. Schauen wir uns dazu die sendDataToBackend() -Funktion nochmals genauer an: 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 function sendDataToBackend () { const formData = new FormData (); formData . append ( 'title' , titleValue ); formData . append ( 'location' , locationValue ); formData . append ( 'file' , file ); console . log ( 'formData' , formData ) fetch ( 'http://localhost:3000/posts' , { method : 'POST' , body : formData }) . then ( response => { console . log ( 'Data sent to backend ...' , response ); return response . json (); }) . then ( data => { console . log ( 'data ...' , data ); const newPost = { title : data . title , location : data . location , image_id : imageURI } updateUI ([ newPost ]); }); } Mithilfe der fetch() -Funktion werden die formData an das Backend gesendet. Wir erhalten den neu angelegten Datensatz zur\u00fcck, z.B.: { \"title\" : \"Eingang\" , \"location\" : \"Tor WH\" , \"image_id\" : \"1652973765918-jf-htwbild4.jpg\" , \"_id\" : \"628660c55619a5a107acb19d\" , \"__v\" : 0 } Wir wollen den neuen Post sofort in unserer Anwendung anzeigen. Dazu rufen wir die updateUI() -Funktion auf und \u00fcbergeben den neuen Datensatz als Array (die Funktion updateUI() erwartet ein Array). Allerdings erwarten wir ja eigentlich f\u00fcr die Eigenschaft image_id einen base64 -String. Allerdings gibt uns die POST-Anfrage an das Backend nicht diesen String zur\u00fcck, sondern den Dateinamen des Bildes in der Datenbank. Dazu haben wir uns aber den base64 -String in imageURI gespeichert und verwenden ihn nun bei dem Datensatz, der an die updateUI() -Funktion \u00fcbergeben wird. Das war es schon, wir k\u00f6nnen nun die Daten an das Backend senden. Zum Testen nehmen Sie ein Foto auf, geben einen Titel und eine Location ein und klicken den Speichern -Button. Dann landnet - hoffentlich - alles im Backend. F\u00fcr den Fall, dass die Kamera nicht zur Verf\u00fcgung steht oder die MediaDevices -API oder der Kamerazugriff blockiert wurde, muss das Hochladen einer Bilddatei \u00fcber das input -Element vom Typ file implementiert werden. Dazu wird das change -Event des Upload -Buttons behandelt:","title":"Speichern des Bildes im Backend"},{"location":"kamera/#bilddatei-hochladen","text":"Das Hochladen einer Bilddatei kennen wir ja bereits von unserem anderen Frontend. Hier ist nun auch schon alles vorbereitet und wir m\u00fcssen in der feed.js nur noch das change -Event f\u00fcr den upload -Button behandeln. Das sieht im Prinzip genau so aus, wie die Umwandlung des Canvas-Bildes, nur dass picture hier die hochgeladene Datei ist: public/src/js/feed.js 104 105 106 imagePicker . addEventListener ( 'change' , event => { file = event . target . files [ 0 ]; });","title":"Bilddatei hochladen"},{"location":"kamera/#letzte-verbesserungen","text":"Ein Nachteil in unserer Anwendung ist noch, dass die Kamera die ganze Zeit l\u00e4uft, wenn wir einmal den modalen Dialog zur Eingabe von daten ge\u00f6ffnet hatten. Wir sollten sie beim Ausschalten des modalen Dialoges schlie\u00dfen. Das Stoppen aller Videostreams hatten wir bereits f\u00fcr die Aufnahme des Fotos gemacht. Weil jedoch das Schlie\u00dfen und erneutes \u00d6ffnen der Kamera sehr ressourcenverbrauchend ist, laufen die Animationen f\u00fcr das \u00d6ffnen und Schlie\u00dfen des modalen Dialogs nicht mehr fl\u00fcssig. Wir lagern diese Animationen deshalb in einen asynchronen \"Thread\" aus (ist nicht wirklich ein neuer Thread): public/src/js/feed.js 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 function openCreatePostModal () { setTimeout ( () => { createPostArea . style . transform = 'translateY(0)' ; }, 1 ); initializeMedia (); } function closeCreatePostModal () { imagePickerArea . style . display = 'none' ; videoPlayer . style . display = 'none' ; canvasElement . style . display = 'none' ; if ( videoPlayer . srcObject ) { videoPlayer . srcObject . getVideoTracks (). forEach ( track => track . stop ()); } setTimeout ( () => { createPostArea . style . transform = 'translateY(100vH)' ; }, 1 ); } Mithilfe des timeout -\"Tricks\" wird der modale Dialog flie\u00dfend geschlossen und das Kamerazeichen im Tab des Browsers schlie\u00dft asynchron etwas sp\u00e4ter. Success Wir k\u00f6nnen nun Fotos mit der Kamera aufnehmen und die Bilder als Post an das Backend senden, wo es in die Datenbank gespeichert wird!","title":"Letzte Verbesserungen"},{"location":"manifest/","text":"Web-App-Manifest \u00b6 Das Web-App-Manifest ist zun\u00e4chst einmal eine Datei, n\u00e4mlich manifest.json . Sie wird also in der JavaScript Object Notation (JSON) geschrieben. Diese Datei dient als Information f\u00fcr den Browser. Sie wird also vom Browser ausgelesen. Beispielsweise kann in der manifest.json vereinbart werden, dass sich die Webanwendung selbst auf dem Startbildschirm Ihres Mobilger\u00e4tes installiert. Dann gen\u00fcgt ein Klick auf das Icon auf dem Startbildschirm und die Webanwendung wird durch den Browser ge\u00f6ffnet. Somit h\u00e4tten wir schonmal eine wesentliche Gemeinsamkeit zu einer nativen App geschaffen, welche ja auch durch ein Klick auf ein Icon auf dem Startbildschirm gestartet werden k\u00f6nnen. Wir lernen kennen, wie wir ein solches Manifest unserer PWA hinzuf\u00fcgen, wie es konfiguriert werden kann und wie wir die Auswirkungen eines solchen Manifestes auf mobilen Ger\u00e4ten sehen k\u00f6nnen. Installierbar \u00b6 Mithilfe eines Web-App-Manifestes machen wir unsere Webanwendung installierbar auf einem mobilen Ger\u00e4t. Die Anwendung muss nicht einem App-Store hinzugef\u00fcgt werden, sondern wird einfach \u00fcber das Web durch einen Browser geladen. Normalerweise kann eine Webanwendung ja nur dadurch gestartet werden, dass ihre URL in den Browser eingetragen wird (oder Sie haben ein lesezeichen auf die Webanwendung in Ihrem Browser gesetzt). Nun wollen wir auf den Startbildschirm des Smartphones ein Icon setzen (genau wie f\u00fcr native Apps) und dar\u00fcber die Anwendung starten. Daf\u00fcr f\u00fcgen wir im Projektordner in dem Ordner /public die Datei manifest.json hinzu: Diese Datei sollte genau so hei\u00dfen und es ist g\u00fcnstig, sie in den /public -Ordner zu legen. Achten Sie darauf, wohin Sie die Datei legen. Wenn Sie sie direkt in den Projektordner legen, dann gelten alle Pfadangaben in dieser Datei ausgehend von dieser Position. Wenn Sie sie in den public -Ordner legen, so wie wir, dann betrachten Sie die relativen Pfade, die Sie angeben, immer von diesem Ordner aus. Nun m\u00fcssen wir diese Datei jeder HTML-Seite unserer Anwendung bekannt machen. In unserer Anwendung existieren zwei *.html -Dateien, die public/index.html und die public/help/index.html . In beide Datein tragen wir im <head> folgenden Eintrag ein: < link rel = \"manifest\" href = \"/manifest.json\" > Aber Achtung! : Die public/help/index.html liegt ja im Unterordner /help . Das bedeutet, dass von der Datei public/help/index.html aus gesehen, muss der help -Ordner erst verlassen werden, um die manifest.json -Datei zu erreichen. In die public/help/index.html schreiben wir also < link rel = \"manifest\" href = \"../manifest.json\" > Das hei\u00dft, der <head> -Bereich der public/index.html sieht dann wie folgt aus (und der von public/help/index.html sehr \u00e4hnlich - achten Sie auf den korrekten relativen Pfad!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"/manifest.json\" > </ head > In einer Single Page Application muss der Eintrag nur einmal erfolgen - in der single page, der index.html . M\u00f6gliche Eigenschaften in der manifest.json \u00b6 Eintr\u00e4ge in einer JSON-Datei sind key-value-Paare , d.h. ein Eintrag hat die folgende Form: \"property\" : value oder auf Deutsch \"eigenschaft\": wert . JSON-Dateien beginnen und enden immer mit einer geschweiften Klammer und die einzelnen key-value-Paare sind durch Komma getrennt. value kann selbst ein JSON sein oder ein Array oder ein String oder eine Zahl. Wir betrachten nun einige ausgew\u00e4hlte properties , die in einer manifest.json definiert werden k\u00f6nnen. Einen vollst\u00e4ndigen \u00dcberblick \u00fcber alle m\u00f6glichen Eigenschaften und deren Umsetzung in den einzelnen Browsern finden Sie hier . Eine kurze Einf\u00fchrung zu manifest.json finden Sie auch hier . Die Spezifikation f\u00fcr das Web-App-Manifest vom W3C finden Sie hier . name \u00b6 Mit der Eigenschaft name geben wir unserer Webanwendung eine Beschreibung. In der package.json haben wir unserer Anwendung bereits einen Namen gegeben, aber name aus der manifest.json beschreibt zum Beispiel den Namen der App auf dem Begr\u00fc\u00dfungsschrim, wie wir gleich sehen werden. Es ist ratsam, den Namen nicht l\u00e4nger als 45 Zeichen zu w\u00e4hlen (das ist die Begrenzung, die Google Chrome und Microsoft Edge f\u00fcr sich festgelegt haben). Wir sagen mal: \"name\" : \"HTW-Insta Erweiterung\" Die Eigenschaft name ist in der manifest.json verpflichtend, d.h. sie muss angegeben werden (au\u00dferdem noch version und manifest_version , alle anderen Eigenschaften sind optional.) short_name \u00b6 Der Wert von short_name wird z.B. verwendet als Name unserer App unter dem Icon auf dem Startbildschirm (falls der Name dort mit erscheint). Der short_name sollte nicht l\u00e4nger als 12 Zeichen sein. Ist kein short_name in der manifest.json angegeben, wird der Wert von name verwendet und, falls n\u00f6tig, einfach gek\u00fcrzt. \"short_name\" : \"HTW-Insta\" start_url \u00b6 Der Wert von start_url gibt den Pfad und die Datei an, die beim Starten unserer Anwendung geladen werden soll. In unserem Fall soll die /public/index.html geladen werden. Die manifest.json -Datei befindet sich im /public -ordner, also ist der Pfad zur Datei nur / .: \"start_url\" : \"/index.html\" Beachten Sie (nochmal): der Pfad ist immer relativ zur manifest.json . Anegenommen, der Wert von start_url ist ../start_point.html und die URL der manifest.json ist https://example.com/resources/manifest.json , dann w\u00fcrde die Anwendung unter https://example.com/start_point.html starten. display \u00b6 Der Wert von display gibt an, wie die Anwendung beim Start aussehen soll. Wir haben die Auswahl zwischen den folgenden Werten: \"fullscreen\" , \"standalone\" , \"minimal-ui\" N\u00e4here Erl\u00e4uterungen zu den einzelnen Werten finden Sie hier , aber am besten ist, Sie probieren die unterschiedlichen Werte einfach mal aus. \"display\" : \"standalone\" Bei \"standalone\" wird das Browser-fenster ausgeblendet, d.h. wir sehen die URL-Leiste nicht und auch nicht die Steuerelemente des Browsers. Die Anwendung wirkt wie eine native App. background_color \u00b6 Der Wert von background_color ist eine Farbe, die wir typischerweise in hexadezimaler Schreibweise angeben. Ob wir diese Farbe \u00fcberhaupt sehen, h\u00e4ngt davon ab, wie lange unsere Anwendung zum Laden bracuht, denn mit background_color geben wir die Hintergrundfarbe des Bildschirms an, der gezeigt wird, w\u00e4hrend die Anwendung l\u00e4dt. Meistens sieht man das nicht, weil der Ladevorgang so schnell ist. \"background_color\" : \"#76B900\" Wir w\u00e4hlen nat\u00fcrlich das HTW-Gr\u00fcn. theme_color \u00b6 Der Wert von theme_color ist eine Farbe, die z.B. die Farbe der Werkzeugleiste auf dem Smartphone bestimmt. \"theme_color\" : \"#FF5F00\" Wir w\u00e4hlen mal das HTW-Orange. description \u00b6 Wenn der Browser eine Beschreibung der App speichert, dann nutzt er den Wert von description , z.B. wenn Sie die App als Lesezeichen speichern. \"description\" : \"Eine tolle HTW-Insta-PWA\" lang \u00b6 Mit der lang uage-Eigeneschaft definieren Sie die Sprache Ihrer App. Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"lang\" : \"de-DE\" Diese Eigenschaft wird vom Browser als Meta-Eigenschaft verwendet, kennen Sie schon aus den HTML-Dokumenten. dir \u00b6 Mit der dir ection-Eigeneschaft definieren Sie die Textrichtung Ihrer App. Die Werte sind einer der drei: \"ltr\" ( left to right ) \"rtl\" ( right to left ) \"auto\" Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"dir\" : \"ltr\" orientation \u00b6 Mit der orientation -Eigeneschaft definieren Sie, in welchem Bildschirmmodus die App betrieben (geffnet) werden soll. Bei den Werten haben Sie die Wahl zwischen: \"any\" \"natural\" \"landscape\" \"landscape-primary\" \"landscape-secondary\" \"portrait\" \"portrait-primary\" \"portrait-secondary\" Die Angaben primary und secondary beziehen sich jeweils auf eine 180-Grad-Dreheung des Ger\u00e4tes. secondary \u00f6ffnet es also jeweils \"auf dem Kopf\". \"orientation\" : \"portrait-primary\" Die Web-App sollte aber so gebaut werden, dass sie sowohl im Portrait- als auch im Landscape-Modus gut bedient werden kann (responsive). icons \u00b6 Die icons -Eigenschaft enth\u00e4lt ein Array aus Icons, die als das Icon der App auf dem Startbildschirm verwendet werden k\u00f6nnen. Typischerweise gibt man hier mehrere an, die sich in ihrer Aufl\u00f6sung unterscheiden, um das geeignete Icon ausw\u00e4hlen zu k\u00f6nnen, das zur Aufl\u00f6sung des Ausgabeger\u00e4tes passt. Gute Dimensionen sind z.B. 48X48 Pixel bis hin zu 512x512 Pixel. Die Beschreibung eines Icons ist selbst ein JSON und enth\u00e4lt drei Eigenschaften: \"src\" (der Pafd zum Icon und die Datei) \"type\" (der Typ des Bildes, z.B. image/png ) \"sizes\" (die Gr\u00f6\u00dfe des Bildes in Pixeln) Der Browser sucht sich in Abh\u00e4ngigkeit von der Aufl\u00f6sung des Ausgabeger\u00e4tes das am besten geeignete Icon selbst\u00e4ndig aus. \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] Auch hier sind wieder die korrekten relativen Pfade zu beachten. Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons und auch die obige JSON zu erzeugen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Bitte unbedingt verwenden, um sich m\u00fchsame Arbeit zu sparen! Testen der manifest.json \u00b6 Insgesamt sieht unsere manifest.json nun so aus: public/manifest.json { \"name\" : \"HTW-Insta Erweiterung\" , \"short_name\" : \"HTW-Insta\" , \"start_url\" : \"/index.html\" , \"id\" : \"/index.html\" , \"display\" : \"standalone\" , \"background_color\" : \"#76B900\" , \"description\" : \"Eine tolle HTW-Insta-PWA\" , \"lang\" : \"de-DE\" , \"dir\" : \"ltr\" , \"orientation\" : \"portrait-primary\" , \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] } Wir rufen unsere Anwendung im Browser (Verwenden Sie Google Chrome!) auf und \u00f6ffnen au\u00dferdem die DevTools: W\u00e4hlen Sie f\u00fcr die Darstellung der App eine Mobilansicht aus ( ) und klicken Sie auf den Reiter Application in den DevTools. Klicken Sie in den DevTools unter dem Reiter Application im linken Application -Men\u00fc auf Manifest . Dort sehen Sie, dass Ihre Konfiguration korrekt eingelesen wird. Es sollte nur eine einzige Warnung erscheinen, dass wir (noch) keine service worker eingerichtet haben. Mit dem Web-Manifest ist unsere Anwendung installierbar - leider noch nicht ganz, da wir noch keinen Service worker haben und die Anwendung nicht offline verwendbar ist. Die Installierbarkeit l\u00e4sst sich aber trotzdem testen, dazu m\u00fcssen wir die Anwendung jedoch simulieren. Diese Schritte sind unter Optional - f\u00fcr Interessierte beschrieben. Sie m\u00fcssen das aber nicht machen, Sie k\u00f6nnen stattdessen auch einfach einen ganz einfachen Service worker implementieren. Dazu erstellen wir eine public/sw.js und binden diese wie folgt in die public/index.html ein (siehe auch Einf\u00fchrung ): < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/sw.js' ); }); } </ script > und in die public/sw.js schreiben wir: importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Unsere Anwendung simuliert nun eine Offline-F\u00e4higkeit und ist nun installierbar. Wenn wir die Anwendung mit npm start starten, dann erscheint: Sie k\u00f6nnen die Anwendung \u00fcber das Icon installieren oder auch \u00fcber das Options-Men\u00fc (die drei vertikalen Punkte neben der URL-Leiste). Es erscheint ein Confirmation-Men\u00fc: Nach der Installation der App ist diese (unter Mac) einerseits unter Programme/Chrome-Apps zu finden, aber z.B. auch im Launchpad. Das beforeinstallprompt -Ereignis \u00b6 Das BeforeInstallPromptEvent wird ausgel\u00f6st, wenn Ihre Anwendung installierbar ist und Sie diese das erste Mal ausf\u00fchren. Es wird ausgel\u00f6st, um Ihre Anwendung zu installieren. Ein typisches Vorgehen f\u00fcr die Behandlung des Ereignisses schl\u00e4gt vor, die Anwendung nicht sofort, d.h. nicht durch die Behandlung des beforeinstallprompt -Ereignisses, zu installieren, sondern zun\u00e4chst abzuwarten, ob die Anwendung auch tats\u00e4chlich so genutzt wird, dass sich eine Installation lohnt. F\u00fcr unsere Anwendung k\u00f6nnte das z.B. bedeuten, dass diese nicht beim ersten Aufruf installiert wird, sondern dass gewartet wird, bis die Nutzerin zum ersten Mal den + -Button klickt. Ein solches typisches Vorgehen ist z.B. hier beschrieben oder hier . Wir zeigen hier einmal die Auswertung dieses Ereignisses, indem wir das Installieren durch einen Klick auf einen Installationsbutton erledigen lassen. Wie gesagt, die Behandlung des Klick-Ereignisses dieses Installationsbuttons geh\u00f6rt eigentlich woanders hin, je nachdem, was in der Anwendung gew\u00fcnscht ist, also wann die Anwendung tats\u00e4chlich installiert werden soll. Wir f\u00fcgen zun\u00e4chst den Button in die index.html ein: < button id = \"install\" style = \"display:none;\" class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--accent\" > Installieren </ button > Au\u00dferdem f\u00fcgen wir folgendes Script in die index.html hinzu: < script > const installButton = document . getElementById ( 'install' ); console . log ( 'installButton' , installButton ) let deferredPrompt ; window . addEventListener ( 'beforeinstallprompt' , evt => { console . log ( evt . platforms ); // e.g., [\"web\", \"android\", \"windows\"] evt . preventDefault (); deferredPrompt = evt ; installButton . style . display = 'block' ; }) installButton . addEventListener ( 'click' , async () => { await deferredPrompt . prompt (); const choiceResult = await deferredPrompt . userChoice ; console . log ( choiceResult . outcome ); }); window . addEventListener ( 'appinstalled' , () => { installButton . style . display = 'none' ; }) < /script> Der Button ist zun\u00e4chst auf display:none gestellt, also nicht sichtbar. Wird das beforeinstallprompt -Ereignis ausgel\u00f6st, wird zun\u00e4chst der \"normale\" Ablauf der Ereignisbehandlung ausgesetzt ( preventDefault() ). Stattdessen wird diese Aufforderung in deferredPrompt zwischengespeichert. Der Button wird auf sichtbar gesetzt ( style.display = 'block' ). Durch Klick auf den Button wird nun die Aufforderung, die in deferredPrompt zwischengespeichert ist, mithilfe von prompt() angezeigt. Klicken wir nun auf den Button, erscheint die Aufforderung. Entscheiden wir uns daf\u00fcr, die App zu installieren, wird diese installiert, was wiederum das Ereignis appinstalled aufruft. Als Ereignisnehandlung dieses Ereignisses k\u00f6nnen wir den Button wieder auf unsichtbar setzen. Beachten Sie, dass das BeforeInstallPromptEvent nicht von allen Browsern unterst\u00fctzt wird. Hier die aktuelle \u00dcbersicht aus BeforeInstallPromptEvent : Optional - f\u00fcr Interessierte \u00b6 Um die Funktionsweise des Web-App-Manifestes tats\u00e4chlich zu testen, ben\u00f6tigen wir jedoch ein Smartphone (oder Tablet). Wir wollen ein solches emulieren (ein Android-Smartphone) und starten dazu Android Studio . Wenn wir Android Studio \u00f6ffnen, w\u00e4hlen wir zun\u00e4chst + Create New Project . Durch die folgenden Vorschl\u00e4ge k\u00f6nnen wir einfach stets mit Next und dann mit Finish navigieren, ohne irgendetwas zu \u00e4ndern. Wir sind gar nicht am Projekt interessiert, sondern nur am AVD Manager ( Android Virtual Device Manaager ), den wir unter dem Men\u00fcpunkt Tools finden. Nach dem \u00d6ffnen des AVD-Managers haben Sie die M\u00f6glichkeit, weitere Android-Phones zur Liste Ihrer virtuellen Ger\u00e4te hinzuzuf\u00fcgen. Das k\u00f6nnen Sie ruhig machen, um ger\u00e4te mit verschiedenen Aufl\u00f6sungen ausprobieren zu k\u00f6nnen. W\u00e4hlen Sie dann ein Ger\u00e4t Ihrer Wahl und klicken Sie f\u00fcr das Ger\u00e4t unter der Spalte Actions auf den Play-Button: Das dauert dann eine ganze Weile, aber am Ende erscheint ein Smartphone auf Ihrem Bildschirm: Auf diesem Android-Ger\u00e4t ist Google Chrome verf\u00fcgbar. Starten Sie Google Chrome dort durch Mausklick und geben Sie als URL 10.0.2.2.:8080 ein. Unsere Webanwendung wird ge\u00f6ffnet: Klicken Sie jetzt auf die drei vertikalen Punkte neben der URL-Leiste und w\u00e4hlen Sie Add to Home screen : Es wird uns eines unserer Icons angeboten und der unter name gew\u00e4hlte Name: Klicken Sie Add und dann Add automatically . Das Icon erscheint auf dem Homescreen (Startbildschirm). Eventuell m\u00fcssen Sie den Browser zuvor schlie\u00dfen. Klicken Sie auf das Icon, um unsere Anwendung zu starten. Sie sehen kurz den Splashscreen mit der von uns gew\u00e4hlten Hintergrundfarbe HTW-Gr\u00fcn. Beachten Sie auch, dass um unsere Anwendung herum kein Browser-Fenster zu sehen ist. Sie l\u00e4uft standalone (nat\u00fcrlich im Browser, aber der ist nicht zu sehen). Das sieht man insbesondere, wenn man sich alle ge\u00f6ffneten Anwendungen anschaut: Sobald wir f\u00fcr unserer PWA auch noch einen service worker registriert haben, kommen wir nochmal hierher zur\u00fcck und werden daf\u00fcr sorgen, dass der Browser uns sogar fragt, ob wir ein Icon auf dem Startbildschirm ablegen wollen. Erstaz f\u00fcr manifest.json f\u00fcr Safari \u00b6 Leider unterst\u00fctzt Safari (Apple) das manifest.json (noch) nicht, obwohl es eine Spezifikation des W3C ist. \u00dcber die Browser-Untert\u00fctzung f\u00fcr das Web-App-Manifest k\u00f6nnen Sie sich z.B. hier informieren. Die Seite enth\u00e4lt auch eine gute Zusammenfassung aller Eigenschaften des Web-App-Manifestes. Es lohnt sich auch ein Blick hierauf . Um f\u00fcr Safari eine \u00e4hnliche Funktionalit\u00e4t zur Verf\u00fcgung zu stellen, wie das Web-App-Manifest, m\u00fcssen in den HTML-Dateien unserer Anwendung ein paar Meta-Angaben erfolgen: 1 2 3 4 5 6 7 8 9 10 11 12 < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < meta name = \"apple-mobile-web-app-status-bar-style\" content = \"black\" > < meta name = \"apple-mobile-web-app-title\" content = \"HTW-Insta\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw57x57.png\" sizes = \"57x57\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw60x60.png\" sizes = \"60x60\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw72x72.png\" sizes = \"72x72\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw76x76.png\" sizes = \"76x76\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw114x114.png\" sizes = \"114x114\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw120x120.png\" sizes = \"120x120\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw144x144.png\" sizes = \"144x144\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw152x152.png\" sizes = \"152x152\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw180x180.png\" sizes = \"180x180\" > So wirklich klar ist es allerdings nicht, inwieweit Apple tats\u00e4chlich PWAs unterst\u00fctzt und unterst\u00fctzen m\u00f6chte. Es scheint eher so, dass Apple volle Kontrolle dar\u00fcber behalten m\u00f6chte, welche Apps auf iPhones oder iOS-Tablets laufen d\u00fcrfen, n\u00e4mlich solche, die (nur) \u00fcber den App-Store verf\u00fcgbar sind. Siehe dazu z.B. hier und hier . Sollten Sie ein iPhone haben und sollte Ihre Anwendung mithilfe von npm start ausgef\u00fchrt sein, so k\u00f6nnen Sie allerdings mal http://141.45.57.28:8080 in Ihren Browser im Handy eingeben. Es muss nichts weiter installiert werden. Sie k\u00f6nnen aber kein Icon auf den Startbildschirm ablegen :-(. Eine weitere Unterst\u00fctzung f\u00fcr iOS Safari bietet PWACompat . Sie m\u00fcssten dann entweder in die index.html unterhalb des Einbindens der manifest.json noch < script async src = \"https://unpkg.com/pwacompat\" crossorigin = \"anonymous\" ></ script > statisch hinzuf\u00fcgen oder dynamisch f\u00fcr den folgenden Fall: < script type = \"module\" > // detect iOS Safari if (( 'standalone' in navigator ) && ( ! navigator . standalone )) { import ( 'https://unpkg.com/pwacompat' ); } </ script > Success Wir haben unsere Webanwendung installierbar gemacht. Zumindest auf Android-Ger\u00e4ten. Dies geschieht mithilfe der Datei manifest.json , die wir in alle html -Seiten unserer Anwendung einbinden. Wir haben viele Eigenschaften kennengelernt, die wir in diesem Web-App-Manifest definieren k\u00f6nnen. Mithilfe des Emulators von Android Studio k\u00f6nnen wir die Anwendung des Web-App-Manifestes auf Android-Ger\u00e4ten ausprobieren. Wir schauen uns nun einen weiteren zentralen Funktionsblock an, n\u00e4mlich Service Worker .","title":"Manifest"},{"location":"manifest/#web-app-manifest","text":"Das Web-App-Manifest ist zun\u00e4chst einmal eine Datei, n\u00e4mlich manifest.json . Sie wird also in der JavaScript Object Notation (JSON) geschrieben. Diese Datei dient als Information f\u00fcr den Browser. Sie wird also vom Browser ausgelesen. Beispielsweise kann in der manifest.json vereinbart werden, dass sich die Webanwendung selbst auf dem Startbildschirm Ihres Mobilger\u00e4tes installiert. Dann gen\u00fcgt ein Klick auf das Icon auf dem Startbildschirm und die Webanwendung wird durch den Browser ge\u00f6ffnet. Somit h\u00e4tten wir schonmal eine wesentliche Gemeinsamkeit zu einer nativen App geschaffen, welche ja auch durch ein Klick auf ein Icon auf dem Startbildschirm gestartet werden k\u00f6nnen. Wir lernen kennen, wie wir ein solches Manifest unserer PWA hinzuf\u00fcgen, wie es konfiguriert werden kann und wie wir die Auswirkungen eines solchen Manifestes auf mobilen Ger\u00e4ten sehen k\u00f6nnen.","title":"Web-App-Manifest"},{"location":"manifest/#installierbar","text":"Mithilfe eines Web-App-Manifestes machen wir unsere Webanwendung installierbar auf einem mobilen Ger\u00e4t. Die Anwendung muss nicht einem App-Store hinzugef\u00fcgt werden, sondern wird einfach \u00fcber das Web durch einen Browser geladen. Normalerweise kann eine Webanwendung ja nur dadurch gestartet werden, dass ihre URL in den Browser eingetragen wird (oder Sie haben ein lesezeichen auf die Webanwendung in Ihrem Browser gesetzt). Nun wollen wir auf den Startbildschirm des Smartphones ein Icon setzen (genau wie f\u00fcr native Apps) und dar\u00fcber die Anwendung starten. Daf\u00fcr f\u00fcgen wir im Projektordner in dem Ordner /public die Datei manifest.json hinzu: Diese Datei sollte genau so hei\u00dfen und es ist g\u00fcnstig, sie in den /public -Ordner zu legen. Achten Sie darauf, wohin Sie die Datei legen. Wenn Sie sie direkt in den Projektordner legen, dann gelten alle Pfadangaben in dieser Datei ausgehend von dieser Position. Wenn Sie sie in den public -Ordner legen, so wie wir, dann betrachten Sie die relativen Pfade, die Sie angeben, immer von diesem Ordner aus. Nun m\u00fcssen wir diese Datei jeder HTML-Seite unserer Anwendung bekannt machen. In unserer Anwendung existieren zwei *.html -Dateien, die public/index.html und die public/help/index.html . In beide Datein tragen wir im <head> folgenden Eintrag ein: < link rel = \"manifest\" href = \"/manifest.json\" > Aber Achtung! : Die public/help/index.html liegt ja im Unterordner /help . Das bedeutet, dass von der Datei public/help/index.html aus gesehen, muss der help -Ordner erst verlassen werden, um die manifest.json -Datei zu erreichen. In die public/help/index.html schreiben wir also < link rel = \"manifest\" href = \"../manifest.json\" > Das hei\u00dft, der <head> -Bereich der public/index.html sieht dann wie folgt aus (und der von public/help/index.html sehr \u00e4hnlich - achten Sie auf den korrekten relativen Pfad!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"/manifest.json\" > </ head > In einer Single Page Application muss der Eintrag nur einmal erfolgen - in der single page, der index.html .","title":"Installierbar"},{"location":"manifest/#mogliche-eigenschaften-in-der-manifestjson","text":"Eintr\u00e4ge in einer JSON-Datei sind key-value-Paare , d.h. ein Eintrag hat die folgende Form: \"property\" : value oder auf Deutsch \"eigenschaft\": wert . JSON-Dateien beginnen und enden immer mit einer geschweiften Klammer und die einzelnen key-value-Paare sind durch Komma getrennt. value kann selbst ein JSON sein oder ein Array oder ein String oder eine Zahl. Wir betrachten nun einige ausgew\u00e4hlte properties , die in einer manifest.json definiert werden k\u00f6nnen. Einen vollst\u00e4ndigen \u00dcberblick \u00fcber alle m\u00f6glichen Eigenschaften und deren Umsetzung in den einzelnen Browsern finden Sie hier . Eine kurze Einf\u00fchrung zu manifest.json finden Sie auch hier . Die Spezifikation f\u00fcr das Web-App-Manifest vom W3C finden Sie hier .","title":"M\u00f6gliche Eigenschaften in der manifest.json"},{"location":"manifest/#name","text":"Mit der Eigenschaft name geben wir unserer Webanwendung eine Beschreibung. In der package.json haben wir unserer Anwendung bereits einen Namen gegeben, aber name aus der manifest.json beschreibt zum Beispiel den Namen der App auf dem Begr\u00fc\u00dfungsschrim, wie wir gleich sehen werden. Es ist ratsam, den Namen nicht l\u00e4nger als 45 Zeichen zu w\u00e4hlen (das ist die Begrenzung, die Google Chrome und Microsoft Edge f\u00fcr sich festgelegt haben). Wir sagen mal: \"name\" : \"HTW-Insta Erweiterung\" Die Eigenschaft name ist in der manifest.json verpflichtend, d.h. sie muss angegeben werden (au\u00dferdem noch version und manifest_version , alle anderen Eigenschaften sind optional.)","title":"name"},{"location":"manifest/#short_name","text":"Der Wert von short_name wird z.B. verwendet als Name unserer App unter dem Icon auf dem Startbildschirm (falls der Name dort mit erscheint). Der short_name sollte nicht l\u00e4nger als 12 Zeichen sein. Ist kein short_name in der manifest.json angegeben, wird der Wert von name verwendet und, falls n\u00f6tig, einfach gek\u00fcrzt. \"short_name\" : \"HTW-Insta\"","title":"short_name"},{"location":"manifest/#start_url","text":"Der Wert von start_url gibt den Pfad und die Datei an, die beim Starten unserer Anwendung geladen werden soll. In unserem Fall soll die /public/index.html geladen werden. Die manifest.json -Datei befindet sich im /public -ordner, also ist der Pfad zur Datei nur / .: \"start_url\" : \"/index.html\" Beachten Sie (nochmal): der Pfad ist immer relativ zur manifest.json . Anegenommen, der Wert von start_url ist ../start_point.html und die URL der manifest.json ist https://example.com/resources/manifest.json , dann w\u00fcrde die Anwendung unter https://example.com/start_point.html starten.","title":"start_url"},{"location":"manifest/#display","text":"Der Wert von display gibt an, wie die Anwendung beim Start aussehen soll. Wir haben die Auswahl zwischen den folgenden Werten: \"fullscreen\" , \"standalone\" , \"minimal-ui\" N\u00e4here Erl\u00e4uterungen zu den einzelnen Werten finden Sie hier , aber am besten ist, Sie probieren die unterschiedlichen Werte einfach mal aus. \"display\" : \"standalone\" Bei \"standalone\" wird das Browser-fenster ausgeblendet, d.h. wir sehen die URL-Leiste nicht und auch nicht die Steuerelemente des Browsers. Die Anwendung wirkt wie eine native App.","title":"display"},{"location":"manifest/#background_color","text":"Der Wert von background_color ist eine Farbe, die wir typischerweise in hexadezimaler Schreibweise angeben. Ob wir diese Farbe \u00fcberhaupt sehen, h\u00e4ngt davon ab, wie lange unsere Anwendung zum Laden bracuht, denn mit background_color geben wir die Hintergrundfarbe des Bildschirms an, der gezeigt wird, w\u00e4hrend die Anwendung l\u00e4dt. Meistens sieht man das nicht, weil der Ladevorgang so schnell ist. \"background_color\" : \"#76B900\" Wir w\u00e4hlen nat\u00fcrlich das HTW-Gr\u00fcn.","title":"background_color"},{"location":"manifest/#theme_color","text":"Der Wert von theme_color ist eine Farbe, die z.B. die Farbe der Werkzeugleiste auf dem Smartphone bestimmt. \"theme_color\" : \"#FF5F00\" Wir w\u00e4hlen mal das HTW-Orange.","title":"theme_color"},{"location":"manifest/#description","text":"Wenn der Browser eine Beschreibung der App speichert, dann nutzt er den Wert von description , z.B. wenn Sie die App als Lesezeichen speichern. \"description\" : \"Eine tolle HTW-Insta-PWA\"","title":"description"},{"location":"manifest/#lang","text":"Mit der lang uage-Eigeneschaft definieren Sie die Sprache Ihrer App. Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"lang\" : \"de-DE\" Diese Eigenschaft wird vom Browser als Meta-Eigenschaft verwendet, kennen Sie schon aus den HTML-Dokumenten.","title":"lang"},{"location":"manifest/#dir","text":"Mit der dir ection-Eigeneschaft definieren Sie die Textrichtung Ihrer App. Die Werte sind einer der drei: \"ltr\" ( left to right ) \"rtl\" ( right to left ) \"auto\" Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"dir\" : \"ltr\"","title":"dir"},{"location":"manifest/#orientation","text":"Mit der orientation -Eigeneschaft definieren Sie, in welchem Bildschirmmodus die App betrieben (geffnet) werden soll. Bei den Werten haben Sie die Wahl zwischen: \"any\" \"natural\" \"landscape\" \"landscape-primary\" \"landscape-secondary\" \"portrait\" \"portrait-primary\" \"portrait-secondary\" Die Angaben primary und secondary beziehen sich jeweils auf eine 180-Grad-Dreheung des Ger\u00e4tes. secondary \u00f6ffnet es also jeweils \"auf dem Kopf\". \"orientation\" : \"portrait-primary\" Die Web-App sollte aber so gebaut werden, dass sie sowohl im Portrait- als auch im Landscape-Modus gut bedient werden kann (responsive).","title":"orientation"},{"location":"manifest/#icons","text":"Die icons -Eigenschaft enth\u00e4lt ein Array aus Icons, die als das Icon der App auf dem Startbildschirm verwendet werden k\u00f6nnen. Typischerweise gibt man hier mehrere an, die sich in ihrer Aufl\u00f6sung unterscheiden, um das geeignete Icon ausw\u00e4hlen zu k\u00f6nnen, das zur Aufl\u00f6sung des Ausgabeger\u00e4tes passt. Gute Dimensionen sind z.B. 48X48 Pixel bis hin zu 512x512 Pixel. Die Beschreibung eines Icons ist selbst ein JSON und enth\u00e4lt drei Eigenschaften: \"src\" (der Pafd zum Icon und die Datei) \"type\" (der Typ des Bildes, z.B. image/png ) \"sizes\" (die Gr\u00f6\u00dfe des Bildes in Pixeln) Der Browser sucht sich in Abh\u00e4ngigkeit von der Aufl\u00f6sung des Ausgabeger\u00e4tes das am besten geeignete Icon selbst\u00e4ndig aus. \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] Auch hier sind wieder die korrekten relativen Pfade zu beachten. Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons und auch die obige JSON zu erzeugen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Bitte unbedingt verwenden, um sich m\u00fchsame Arbeit zu sparen!","title":"icons"},{"location":"manifest/#testen-der-manifestjson","text":"Insgesamt sieht unsere manifest.json nun so aus: public/manifest.json { \"name\" : \"HTW-Insta Erweiterung\" , \"short_name\" : \"HTW-Insta\" , \"start_url\" : \"/index.html\" , \"id\" : \"/index.html\" , \"display\" : \"standalone\" , \"background_color\" : \"#76B900\" , \"description\" : \"Eine tolle HTW-Insta-PWA\" , \"lang\" : \"de-DE\" , \"dir\" : \"ltr\" , \"orientation\" : \"portrait-primary\" , \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] } Wir rufen unsere Anwendung im Browser (Verwenden Sie Google Chrome!) auf und \u00f6ffnen au\u00dferdem die DevTools: W\u00e4hlen Sie f\u00fcr die Darstellung der App eine Mobilansicht aus ( ) und klicken Sie auf den Reiter Application in den DevTools. Klicken Sie in den DevTools unter dem Reiter Application im linken Application -Men\u00fc auf Manifest . Dort sehen Sie, dass Ihre Konfiguration korrekt eingelesen wird. Es sollte nur eine einzige Warnung erscheinen, dass wir (noch) keine service worker eingerichtet haben. Mit dem Web-Manifest ist unsere Anwendung installierbar - leider noch nicht ganz, da wir noch keinen Service worker haben und die Anwendung nicht offline verwendbar ist. Die Installierbarkeit l\u00e4sst sich aber trotzdem testen, dazu m\u00fcssen wir die Anwendung jedoch simulieren. Diese Schritte sind unter Optional - f\u00fcr Interessierte beschrieben. Sie m\u00fcssen das aber nicht machen, Sie k\u00f6nnen stattdessen auch einfach einen ganz einfachen Service worker implementieren. Dazu erstellen wir eine public/sw.js und binden diese wie folgt in die public/index.html ein (siehe auch Einf\u00fchrung ): < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/sw.js' ); }); } </ script > und in die public/sw.js schreiben wir: importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Unsere Anwendung simuliert nun eine Offline-F\u00e4higkeit und ist nun installierbar. Wenn wir die Anwendung mit npm start starten, dann erscheint: Sie k\u00f6nnen die Anwendung \u00fcber das Icon installieren oder auch \u00fcber das Options-Men\u00fc (die drei vertikalen Punkte neben der URL-Leiste). Es erscheint ein Confirmation-Men\u00fc: Nach der Installation der App ist diese (unter Mac) einerseits unter Programme/Chrome-Apps zu finden, aber z.B. auch im Launchpad.","title":"Testen der manifest.json"},{"location":"manifest/#das-beforeinstallprompt-ereignis","text":"Das BeforeInstallPromptEvent wird ausgel\u00f6st, wenn Ihre Anwendung installierbar ist und Sie diese das erste Mal ausf\u00fchren. Es wird ausgel\u00f6st, um Ihre Anwendung zu installieren. Ein typisches Vorgehen f\u00fcr die Behandlung des Ereignisses schl\u00e4gt vor, die Anwendung nicht sofort, d.h. nicht durch die Behandlung des beforeinstallprompt -Ereignisses, zu installieren, sondern zun\u00e4chst abzuwarten, ob die Anwendung auch tats\u00e4chlich so genutzt wird, dass sich eine Installation lohnt. F\u00fcr unsere Anwendung k\u00f6nnte das z.B. bedeuten, dass diese nicht beim ersten Aufruf installiert wird, sondern dass gewartet wird, bis die Nutzerin zum ersten Mal den + -Button klickt. Ein solches typisches Vorgehen ist z.B. hier beschrieben oder hier . Wir zeigen hier einmal die Auswertung dieses Ereignisses, indem wir das Installieren durch einen Klick auf einen Installationsbutton erledigen lassen. Wie gesagt, die Behandlung des Klick-Ereignisses dieses Installationsbuttons geh\u00f6rt eigentlich woanders hin, je nachdem, was in der Anwendung gew\u00fcnscht ist, also wann die Anwendung tats\u00e4chlich installiert werden soll. Wir f\u00fcgen zun\u00e4chst den Button in die index.html ein: < button id = \"install\" style = \"display:none;\" class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--accent\" > Installieren </ button > Au\u00dferdem f\u00fcgen wir folgendes Script in die index.html hinzu: < script > const installButton = document . getElementById ( 'install' ); console . log ( 'installButton' , installButton ) let deferredPrompt ; window . addEventListener ( 'beforeinstallprompt' , evt => { console . log ( evt . platforms ); // e.g., [\"web\", \"android\", \"windows\"] evt . preventDefault (); deferredPrompt = evt ; installButton . style . display = 'block' ; }) installButton . addEventListener ( 'click' , async () => { await deferredPrompt . prompt (); const choiceResult = await deferredPrompt . userChoice ; console . log ( choiceResult . outcome ); }); window . addEventListener ( 'appinstalled' , () => { installButton . style . display = 'none' ; }) < /script> Der Button ist zun\u00e4chst auf display:none gestellt, also nicht sichtbar. Wird das beforeinstallprompt -Ereignis ausgel\u00f6st, wird zun\u00e4chst der \"normale\" Ablauf der Ereignisbehandlung ausgesetzt ( preventDefault() ). Stattdessen wird diese Aufforderung in deferredPrompt zwischengespeichert. Der Button wird auf sichtbar gesetzt ( style.display = 'block' ). Durch Klick auf den Button wird nun die Aufforderung, die in deferredPrompt zwischengespeichert ist, mithilfe von prompt() angezeigt. Klicken wir nun auf den Button, erscheint die Aufforderung. Entscheiden wir uns daf\u00fcr, die App zu installieren, wird diese installiert, was wiederum das Ereignis appinstalled aufruft. Als Ereignisnehandlung dieses Ereignisses k\u00f6nnen wir den Button wieder auf unsichtbar setzen. Beachten Sie, dass das BeforeInstallPromptEvent nicht von allen Browsern unterst\u00fctzt wird. Hier die aktuelle \u00dcbersicht aus BeforeInstallPromptEvent :","title":"Das beforeinstallprompt-Ereignis"},{"location":"manifest/#optional-fur-interessierte","text":"Um die Funktionsweise des Web-App-Manifestes tats\u00e4chlich zu testen, ben\u00f6tigen wir jedoch ein Smartphone (oder Tablet). Wir wollen ein solches emulieren (ein Android-Smartphone) und starten dazu Android Studio . Wenn wir Android Studio \u00f6ffnen, w\u00e4hlen wir zun\u00e4chst + Create New Project . Durch die folgenden Vorschl\u00e4ge k\u00f6nnen wir einfach stets mit Next und dann mit Finish navigieren, ohne irgendetwas zu \u00e4ndern. Wir sind gar nicht am Projekt interessiert, sondern nur am AVD Manager ( Android Virtual Device Manaager ), den wir unter dem Men\u00fcpunkt Tools finden. Nach dem \u00d6ffnen des AVD-Managers haben Sie die M\u00f6glichkeit, weitere Android-Phones zur Liste Ihrer virtuellen Ger\u00e4te hinzuzuf\u00fcgen. Das k\u00f6nnen Sie ruhig machen, um ger\u00e4te mit verschiedenen Aufl\u00f6sungen ausprobieren zu k\u00f6nnen. W\u00e4hlen Sie dann ein Ger\u00e4t Ihrer Wahl und klicken Sie f\u00fcr das Ger\u00e4t unter der Spalte Actions auf den Play-Button: Das dauert dann eine ganze Weile, aber am Ende erscheint ein Smartphone auf Ihrem Bildschirm: Auf diesem Android-Ger\u00e4t ist Google Chrome verf\u00fcgbar. Starten Sie Google Chrome dort durch Mausklick und geben Sie als URL 10.0.2.2.:8080 ein. Unsere Webanwendung wird ge\u00f6ffnet: Klicken Sie jetzt auf die drei vertikalen Punkte neben der URL-Leiste und w\u00e4hlen Sie Add to Home screen : Es wird uns eines unserer Icons angeboten und der unter name gew\u00e4hlte Name: Klicken Sie Add und dann Add automatically . Das Icon erscheint auf dem Homescreen (Startbildschirm). Eventuell m\u00fcssen Sie den Browser zuvor schlie\u00dfen. Klicken Sie auf das Icon, um unsere Anwendung zu starten. Sie sehen kurz den Splashscreen mit der von uns gew\u00e4hlten Hintergrundfarbe HTW-Gr\u00fcn. Beachten Sie auch, dass um unsere Anwendung herum kein Browser-Fenster zu sehen ist. Sie l\u00e4uft standalone (nat\u00fcrlich im Browser, aber der ist nicht zu sehen). Das sieht man insbesondere, wenn man sich alle ge\u00f6ffneten Anwendungen anschaut: Sobald wir f\u00fcr unserer PWA auch noch einen service worker registriert haben, kommen wir nochmal hierher zur\u00fcck und werden daf\u00fcr sorgen, dass der Browser uns sogar fragt, ob wir ein Icon auf dem Startbildschirm ablegen wollen.","title":"Optional - f\u00fcr Interessierte"},{"location":"manifest/#erstaz-fur-manifestjson-fur-safari","text":"Leider unterst\u00fctzt Safari (Apple) das manifest.json (noch) nicht, obwohl es eine Spezifikation des W3C ist. \u00dcber die Browser-Untert\u00fctzung f\u00fcr das Web-App-Manifest k\u00f6nnen Sie sich z.B. hier informieren. Die Seite enth\u00e4lt auch eine gute Zusammenfassung aller Eigenschaften des Web-App-Manifestes. Es lohnt sich auch ein Blick hierauf . Um f\u00fcr Safari eine \u00e4hnliche Funktionalit\u00e4t zur Verf\u00fcgung zu stellen, wie das Web-App-Manifest, m\u00fcssen in den HTML-Dateien unserer Anwendung ein paar Meta-Angaben erfolgen: 1 2 3 4 5 6 7 8 9 10 11 12 < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < meta name = \"apple-mobile-web-app-status-bar-style\" content = \"black\" > < meta name = \"apple-mobile-web-app-title\" content = \"HTW-Insta\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw57x57.png\" sizes = \"57x57\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw60x60.png\" sizes = \"60x60\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw72x72.png\" sizes = \"72x72\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw76x76.png\" sizes = \"76x76\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw114x114.png\" sizes = \"114x114\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw120x120.png\" sizes = \"120x120\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw144x144.png\" sizes = \"144x144\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw152x152.png\" sizes = \"152x152\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw180x180.png\" sizes = \"180x180\" > So wirklich klar ist es allerdings nicht, inwieweit Apple tats\u00e4chlich PWAs unterst\u00fctzt und unterst\u00fctzen m\u00f6chte. Es scheint eher so, dass Apple volle Kontrolle dar\u00fcber behalten m\u00f6chte, welche Apps auf iPhones oder iOS-Tablets laufen d\u00fcrfen, n\u00e4mlich solche, die (nur) \u00fcber den App-Store verf\u00fcgbar sind. Siehe dazu z.B. hier und hier . Sollten Sie ein iPhone haben und sollte Ihre Anwendung mithilfe von npm start ausgef\u00fchrt sein, so k\u00f6nnen Sie allerdings mal http://141.45.57.28:8080 in Ihren Browser im Handy eingeben. Es muss nichts weiter installiert werden. Sie k\u00f6nnen aber kein Icon auf den Startbildschirm ablegen :-(. Eine weitere Unterst\u00fctzung f\u00fcr iOS Safari bietet PWACompat . Sie m\u00fcssten dann entweder in die index.html unterhalb des Einbindens der manifest.json noch < script async src = \"https://unpkg.com/pwacompat\" crossorigin = \"anonymous\" ></ script > statisch hinzuf\u00fcgen oder dynamisch f\u00fcr den folgenden Fall: < script type = \"module\" > // detect iOS Safari if (( 'standalone' in navigator ) && ( ! navigator . standalone )) { import ( 'https://unpkg.com/pwacompat' ); } </ script > Success Wir haben unsere Webanwendung installierbar gemacht. Zumindest auf Android-Ger\u00e4ten. Dies geschieht mithilfe der Datei manifest.json , die wir in alle html -Seiten unserer Anwendung einbinden. Wir haben viele Eigenschaften kennengelernt, die wir in diesem Web-App-Manifest definieren k\u00f6nnen. Mithilfe des Emulators von Android Studio k\u00f6nnen wir die Anwendung des Web-App-Manifestes auf Android-Ger\u00e4ten ausprobieren. Wir schauen uns nun einen weiteren zentralen Funktionsblock an, n\u00e4mlich Service Worker .","title":"Erstaz f\u00fcr manifest.json f\u00fcr Safari"},{"location":"promises/","text":"Promises und die Fetch-API \u00b6 Wir haben es bereits eingangs des Abschnitts \u00fcber Service Workers angesprochen: JavaScript ist sinhle threaded , d.h. JavaScript l\u00e4uft auf einem einzelnen Thread. Das bedeutet im Prinzip, dass drei Funktionen functionA() , functionB() , functionC() nacheinander auf dem einzelnen Thread ausgef\u00fchrt werden w\u00fcrden, wenn sie nacheinander aufgerufen werden: Das zieht nat\u00fcrlich nach sich, dass sich diese Funktionen in ihrer Ausf\u00fchrung blockieren . Wenn also functionB() bspw. sehr lange braucht, um ausgef\u00fchrt werden zu k\u00f6nnen, dann blockiert diese Funktion die Ausf\u00fchrung von functionC() . Um dies zu vermeiden, wurden in JavaScript sogenannte Callbacks eingef\u00fchrt. Callbacks \u00b6 Zun\u00e4chst einmal sind Callbacks Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden. Wir betrachten folgendes Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 let x = function () { console . log ( \"Ausgabe der Funktion x\" ); } let y = function () { console . log ( \"Ausgabe der Funktion y\" ); } let z = function ( callback ) { console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); callback (); console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); } Wir haben drei Funktionen. Diese werden als anonyme Funktionen definiert, aber die Funktionsdefinitionen werden sofort einer Variablen zugewiesen. Das bedeutet, dass z.B. der Wert der Variablen x die Funktionsdefinition function () { console . log ( \"Ausgabe der Funktion x\" ); } ist. Wenn wir nun z.B. console.log(x) aufrufen, dann erhalten wir folgende Ausgabe auf der Konsole: \u0192 () { console.log ( \"Ausgabe der Funktion x\" ) ; } Wenn wir aber x(); , also sozusagen, die Variable als Funktion aufrufen, dann wird die Funktion ausgef\u00fchrt und wir erhalten auf der Konsole die Ausgabe Ausgabe der Funktion x Wenn wir nun z(x); aufrufen, dann wird die in den Zeilen 9-12 definierte Funktion aufgerufen, wobei der Parameter callback als Wert die Funktionsdefinition von x \u00fcbergeben wird. In Zeile 11 erfolgt dann mithilfe von callback(); eigentlich der Aufruf x(); . Wir k\u00f6nnen aber auch z.B. z(y); aufrufen. Dann wird z nicht die Funktion x , sondern die Funktion y \u00fcbergeben und der Aufruf callback(); in Zeile 11 entspricht somit dem Aufruf y(); . Ein gro\u00dfer Vorteil dieser Callbacks bestehen darin, dass der Aufruf asynchron erfolgt. Schauen wir uns z.B. einmal an, wie die m\u00f6gliche Ausgabe der Aufrufe z ( x ); z ( y ); aussehen k\u00f6nnte : Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion x Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion y Ausgabe der Funktion z - vor Aufruf von callback Wichtig ist, dass Callbacks die aufrufende Funktion nicht blockieren, sondern asynchron ausgef\u00fchrt werden. Dieses einfache Beispiel soll das demonstrieren: 1 2 3 4 5 setTimeout ( function () { console . log ( 'Ausgabe A' ); }, 3000 ); console . log ( 'Ausgabe B' ); Wir haben zwei Anweisungen: eine setTimeout() -Anweisung und eine console.log('Ausgabe B'); -Anweisung, die nacheinander aufgerufen werden ( setTimeout() vor console.log() ). Innerhalb der setTimeout() -Anweisung wird eine Funktion als Callback \u00fcbergeben. Innerhalb dieser Funktion erfolgt der Aufruf von console.log('Ausgabe A'); . Das Ausf\u00fchren des Programms ergibt folgende Ausgabe: Ausgabe B Ausgabe A Die Ausgabe von Ausgabe A erfolgt ca. 3 Sekunden nach Ausgabe B . Das liegt daran, dass die Callback -Funktion asynchron ausgef\u00fchrt wird und alle weiteren Ausf\u00fchrungen nicht blockiert. Das bedeutet, dass wir mithilfe von Callbacks eine asynchrone Ausf\u00fchrung unseres JavaScript-Codes erreichen. Der einzelne JavaScript-Thread wird also f\u00fcr den Aufruf der Callbacks verwendet und irgendwann sind diese Callback -Aufrufe beendet. Ein gegenseitiges Blockieren findet nicht statt, sondern es bleibt sogar noch Platz f\u00fcr weitere Aufrufe (hellgr\u00fcne Bereiche im folgenden Bild): Das problem mit diesen Callback ist, dass sie sehr schnell sehr un\u00fcbersichtlich werden. Man spricht von der Callback-H\u00f6lle , in der man sehr schnell ist, sobald gen\u00fcgend viele Callbacks asynchron (nebenl\u00e4ufig) ausgef\u00fchrt werden, diese sogar ineinander verschachtelt sind ( Callbacks in Callbacks ) und man gar nicht wei\u00df, wann welche Callbacks beendet sind. Sobald man aber erst die Ausf\u00fchrung eines Callbacks abwarten muss , weil man die Resultate dieses Callbacks weiterverarbeiten m\u00f6chte, entstehen wieder synchrone Aufrufe und der Vorteil der asynchronen Abarbeitung ist dahin. Um dieses Problem zu l\u00f6sen, wurden Promises entwickelt. Promises \u00b6 Ein Promise ist zun\u00e4chst einmal ein JavaScript-Objekt. Es enth\u00e4lt einerseits den Code zum Erzeugen eines Promise -Objektes ( producing code ) und anderseits auch den Code zum Verarbeiten eines solchen Promise -Objektes ( consuming code ). Dabei k\u00f6nnen zwei Sachen verarbeitet werden: entweder das Promise -Objekt wurde erfolgreich abgearbeitet ( resolve ) oder das Promise -Objekt wurde nicht erfolgreich abgearbeitet ( reject ). Die allgemeine Syntax eines solchen Promise -Objektes sieht so aus (siehe z.B. w3scool ): 1 2 3 4 5 6 7 8 9 10 11 12 let myPromise = new Promise ( function ( myResolve , myReject ) { // \"Producing Code\" (May take some time) myResolve (); // when successful myReject (); // when error }); // \"Consuming Code\" (Must wait for a fulfilled Promise) myPromise . then ( function ( value ) { /* code if successful */ }, function ( error ) { /* code if some error */ } ); Betrachten wir das obere Beispiel genauer: in Zeile 1 erstellen wir eine Variable myPromise , die wir nat\u00fcrlich nennen k\u00f6nnen, wie wir m\u00f6chten diese Variable zeigt auf ein Promise -Objekt, das ebenfalls in Zeile 1 mithilfe von new und dem Aufruf des Konstruktors erzeugt wird einem Promise -Objekt (dem Konstruktor) wird immer eine Funktion \u00fcbergeben, der wiederum zwei Callback -Funktionen als Parameter \u00fcbergeben werden die erste Callback -Funktion, die hier myResolve hei\u00dft (aber meistens nur resolve ), wird aufgerufen, wenn das Promise -Objekt erfolgreich abgearbeitet wurde (Zeile 4 ) die zweite Callback -Funktion, die hier myReject hei\u00dft (aber meistens nur reject ), wird aufgerufen, wenn das Promise -Objekt nicht erfolgreich abgearbeitet wurde (Zeile 5 ) den Aufruf des promise -Objektes sehen wir in Zeile 9 . Ein Promise -Objekt durchl\u00e4uft durch den Aufruf 2 der folgenden 3 Zust\u00e4nde: pending : das Promise -Objekt wird abgearbeitet und hat noch kein Resultat ( undefined ), fulfilled : das Promise -Objekt wurde erfolgreich abgearbeitet und liefert den entsprechenden Resultatwert zur\u00fcck oder rejected : das Promise -Objekt wurde nicht erfolgreich abgearbeitet und liefert ein Error -Objekt zur\u00fcck es gibt aber keine M\u00f6glichkeiten, auf diese Zust\u00e4nde eines Promise -Objektes zuzugreifen und auch nicht direkt auf den Resultatwert oder das Fehlerobjekt; stattdessen muss eine entsprechende Funktion des Promise -Objektes aufgerufen werden, die selbst wieder ein Promise -Objekt zur\u00fcckgibt, n\u00e4mlich then() der Aufruf von then() ist ebenfalls in Zeile 9 gezeigt; diese Funktion hat zwei Parameter: dem ersten Parameter wird der Resultatwert \u00fcbergeben (wenn das Promise -Objekt den fulfilled -Zustand erreicht hat) und dem zweiten Parameter wird das Fehlerobjekt \u00fcbergeben (wenn das Promise -Objekt den rejected -Zustand erreicht hat). Beide Parameter sind wiederum Callbacks . Wir werden sehen, dass wir den rejected -Zustand auch mit catch() abfangen k\u00f6nnen, aber dazu kommen wir sp\u00e4ter. Zun\u00e4chst noch einmal zur Vertiefung unser obiges Callback -Beispiel mit setTimeout() als Promise : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise ( function ( resolve , reject ) { setTimeout ( function () { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( function ( value ) { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Die Ausgabe in Zeile 14 hat nichts mit dem Promise zu tun, aber wir lassen sie mal im Code, um das gleiche Beispiel wie oben zu haben. Es erfolgt zun\u00e4chst die Ausgabe Ausgabe B auf der Konsole und 3 Sekunden sp\u00e4ter die Ausgabe resolve -- Ausgabe A . Rein funktional hat sich also nichts ge\u00e4ndert. Wie Sie den Parameter f\u00fcr den resolve -Fall (und dann auch f\u00fcr den reject -Fall) nennen, bleibt ganz Ihnen \u00fcberlassen; hier value (Zeile 8 ). Dieses Mal hei\u00dft unser Promise -Objekt promise und die beiden Callback -Funktionen resolve und reject (Zeile 1 ). Der producing code enth\u00e4lt nur die Implementierung von resolve . In dem Beispiel gibt es also (noch) kein reject . In den Zeilen 7 - 12 sehen wir den consuming code der Promise , auch hier wieder nur f\u00fcr resolve . Es erfolgt die Ausgabe des Wertes, den resolve \u00fcbergeben hat. Promises in Arrow-Notation \u00b6 Weil wir es mitlerweile h\u00e4ufig sehen und weil wir uns auch angew\u00f6hnen wollen, diese selbst zu benutzen, hier das gleiche Beispiel nochmal in Arrow-Notation : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Es ist auch noch zu erw\u00e4hnen, dass Sie nur selten selbst Promises erstellen, sondern diese viel h\u00e4ufiger nutzen werden. Das hei\u00dft, Sie werden nicht so h\u00e4ufig producing code , sondern viel h\u00e4ufiger consuming code schreiben. Beispielsweise gibt die Registrierung eines service workers ein Promise zur\u00fcck: 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); }); Ein gro\u00dfer Vorteil von Promises ist, dass Sie die Verarbeitung verketten k\u00f6nnen. Die then() -Funktion liefert selbst wieder ein Promise zur\u00fcck, so dass Sie erneut dieses Promise mit then() behandeln k\u00f6nnen. Wir kommen darauf in den Anwendungen nochmal zur\u00fcck. Der reject -Fall \u00b6 Wir schauen uns jetzt an, wie wir den Fall am besten behandeln, wenn das Promise nicht in den fulfilled , sondern in den rejected -Zustand \u00fcbergeht, wenn also nicht resolve , sondern reject ausgef\u00fchrt wird. Wir \u00e4ndern unser Beispiel einmal entsprechend: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Wir haben also Zeile 3 auskommentiert ( resolve ) und stattdessen reject eingef\u00fcgt (Zeile 4 ). Im Gegensatz zu resolve geben wir jetzt mal keinen einfachen string , sondern ein JavaScript-Objekt zur\u00fcck (erkennbar an { } ). Wir sind darin v\u00f6llig frei, was zur\u00fcckgegeben wird, aber es bietet sich an, ein Error-Objekt zu erzeugen. Die then() -Behandlung des Promise -Objekt lassen wir zun\u00e4chst unver\u00e4ndert (Zeilen 8-13 ). Wenn wir diesen Code ausf\u00fchren, dann wird erneut Ausgabe B ausgegeben (Zeile 15 - hat nichts mit dem Promise zu tun), aber nach 3 Sekunden erfolgt keine Ausgabe auf der Konsole, sondern stattdessen erscheint auf der Konsole: Error-Behandlung in der then() -Funktion \u00b6 Wir behandeln den geworfenen Fehler nicht, da wir in unserer then() -Behandlung bis jetzt nur den resolve -Fall behandeln (Zeilen 9-11 ). Das \u00e4ndern wir nun: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); }, err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); In den Zeilen 12-14 wurde die Behandlung des Fehlerfalls hinzugef\u00fcgt (beachten Sie auch das zus\u00e4tzliche Komma in Zeile 11 ). Wie Sie die Variable err nennen, bleibt Ihnen \u00fcberlassen. Sie bekommt den Wert, den das Promise f\u00fcr den reject -Fall \u00fcbergibt, in unserem Beispiel also ein JavaScript-Objekt: { code : 500 , message : 'A n error occurred' } weil wir das in Zeile 4 so definiert haben. Wir greifen also auf die Werte der Schl\u00fcssel code und message zu und lassen diese auf die Konsole ausgeben (Zeile 13 ). Auf der Konsole erscheint 3 Sekunden nach der Ausgabe Ausgabe B die Ausgabe 500 An error occurred . Error-Behandlung im catch() -Block \u00b6 Es ist ungew\u00f6hnlich, den Fehlerfall in der then() -Funktion zu behandeln, obwohl es, wie wir gesehen haben, m\u00f6glich ist. Stattdessen verwendet man f\u00fcr den Fehlerfall besser catch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); Mit diesen Wissen k\u00f6nnen wir jetzt auch unsere Registrierung eines service workers etwas zuverl\u00e4ssiger gestalten und f\u00fcgen dort ebenfalls einen catch() -Block ein, auch wenn der Fehlerfall nicht all zu h\u00e4ufig eintreffen d\u00fcrfte: 1 2 3 4 5 6 7 8 9 10 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } Fetch API \u00b6 Die Fetch API bietet einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest . Es geht also darum, Ressourcen vom Web-Server zu holen ( to fetch ). Die Fetch API ist vollst\u00e4ndig auf Promises aufgebaut. Die zentrale Methode der Fetch API ist fetch() . Das Gute an dieser Methode ist, dass sie gloabl ist im Sinne, dass sie nicht nur von einer Webanwendung selbst, sondern auch z.B. von einem Service Worker verwendet werden kann (sie ist im WindowOrWorkerGlobalScope ). Einf\u00fchrungen zu fetch() finden Sie z.B. hier , hier oder hier . GET-Anfragen mit fetch() \u00b6 Wir starten mit einem einfachen Beispiel und nutzen daf\u00fcr https://httpbin.org , eine Webseite, die viele REST-Endpunkte zum Ausprobieren anbietet. Nach dem \u00d6ffnen dieser Seite im Browser, k\u00f6nnen Sie z.B. mal auf Request inspection klicken - dort sehen wir den Endpunkt /ip , den wir \u00fcber ein GET abfragen werden: 1 2 3 4 5 6 fetch ( 'https://httpbin.org/ip' ) . then ( response => { console . log ( response ); } ); Wir rufen also einmal fetch() auf und \u00fcbergeben dieser Funktion den Endpunkt, von dem eine Ressource geholt werden soll. Die fetch() -Funktion liefert ein Promise -Objekt zur\u00fcck. Deshalb k\u00f6nnen wir auch direkt die then() -Funktion aufrufen und die response (ist egal, wie Sie disen Parameter nennen) auf die Konsole ausgeben. Wenn wir diesen Code ausf\u00fchren, erscheint in der Konsole: Wir bekommen also ein JavaScript-Objekt zur\u00fcck. Wirklich interessiert sind wir aber haupts\u00e4chlich an dem body dieses Objektes. Um darauf geeignet zuzugreifen, konvertieren wir das Objekt zun\u00e4chst in das JSON-Format mithilfe der Anweisung response.json(); . Die json() -Funktion ist eine Standard-JavaScript-Funktion, welche ein JavaScript-Objekt in einen JSON umwandelt. Da then() selbst ein Promise -Objekt zur\u00fcckgibt. wollen wir darauf then() erneut anwenden, um das Prinzip verketteter then() -Funktionen (verketteter asynchroner Verarbeitungen) zu zeigen: 1 2 3 4 5 6 7 8 9 10 11 fetch ( 'https://httpbin.org/ip' ) . then ( response => { return response . json (); } ) . then ( data => { console . log ( data ); } ); In der ersten then() -Funktion (Zeilen 2-6 ) wird also die Response der asynchronen GET https://httpbin.org/ip -Anfrage behandelt und darin wird diese Response in eine JSON umgewandelt (Zeile 4 ). Die R\u00fcckgabe dieser then() -Funktion ist erneut ein Promise . F\u00fcr dieses Promise ist die zweite then() -Funktion (Zeilen 7-11 ). Diese Funktion behandelt das asynchrone Streamen des Response-Body und dessen Umwandlung in ein JSON. Das durch dieses Promise zur\u00fcckgegebene resolve bezeichnen wir in unserem Beispiel als data und geben es auf die Konsole aus. Auf der Konsole erscheint die IP , von der die Anfrage erfolgte, z.B. { origin: \"130.193.115.48\" } Noch zwei kleine Verbesserungen am Code: wenn in der Arrow-Notation Ihre Funktion nur aus einer einzigen return -Anweisung besteht, dann k\u00f6nnen Sie die geschweiften Klammern Ihres Funktionsk\u00f6rpers weglassen und auch das return . D.h. aus response => { return response . json (); } wird response => response . json () Auch das Semikolon entf\u00e4llt. Das gilt aber nur f\u00fcr return -Anweisungen, nicht z.B. wenn die Funktion nur aus einer einzigen Konsolenausgabe besteht. Au\u00dferdem sollten wir auch noch ein catch() -Block einf\u00fcgen, f\u00fcr den Fall, dass ein Fehler auftritt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Den Fehlerfall k\u00f6nnen Sie ausprobieren, indem Sie einfach einen Fehler in die URL einbauen. POST-Anfragen mit fetch() \u00b6 POST -Anfragen werden verwendet, um Daten an den Webserver zu senden. Typischerweise sind das Formulardaten, die z.B. in eine Datenbank eingef\u00fcgt werden sollen. Wenn wir also mithilfe von fetch() eine POST -Anfrage stellen wollen, dann m\u00fcssen wir zwei Dinge beachten: wir m\u00fcssen fetch() explizit mitteilen, dass die verwendete HTTP-Anfrage-Methode POST ist und wir m\u00fcssen die Daten mitschicken. F\u00fcr ein einfaches Beispiel verwenden wir erneut https://httpbin.org , dieses Mal aber den Endpunkt /post , der uns einfach die gesendeten Daten wieder als Response unserer Abfrage zur\u00fcckschickt, also einfach als \"Spiegel\" fungiert. Eine entsprechende fetch() -Anweisung k\u00f6nnte so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Die Zeilen 11-23 sind dabei zun\u00e4chst unver\u00e4ndert geblieben und sehen genauso aus wie die Zeilen 2-14 aus dem obigen GET -Beispiel. Nur die Parameter in der fetch() -Funktion haben sich ge\u00e4ndert. Der erste Parmeter lautet nun 'https://httpbin.org/post' , da wir die Anfrage an diese URL (diesen Endpunkt) stellen. Hinzugekommen ist ein zweiter Parameter, ein JSON: { me t hod : 'POST' , header : { 'Co ntent - Type' : 'applica t io n /jso n ' , 'Accep t ' : 'applica t io n /jso n ' }, body : JSON.s tr i n gi f y( { message : 'jus t a POST mirror' } ) } darin legen wir zun\u00e4chst mithilfe von method die HTTP-Anfrage-Methode fest. Standard ist GET , deshalb brauchten wir das in unserem ersten Beispiel nicht zu tun. Nun geben wir POST an. Au\u00dferdem definieren wir noch Eigenschaften f\u00fcr den header . Wir legen mithilfe von Content-Type fest, welches Format unsere Daten haben, die wir \u00fcbermitteln, n\u00e4mlich application/json . Au\u00dferdem legen wir mithilfe von Accept fest, in welchem Format wir die Daten empfangen wollen, n\u00e4mlich ebenfalls im JSON-Format. Diese Accept -Angabe ist nicht immer notwendig. Die meisten REST-Endpunkte liefern so oder so ein JSON zur\u00fcck. Das h\u00e4ngt von der Definition der REST-API ab. In der body -Eigenschaft definieren wir die Daten, die wir \u00fcbertragen wollen. In diesem Fall im JSON-Format. { message: 'just a POST mirror' } ist ein JavaScript-Objekt, das eine einzige Eigenschaft enth\u00e4lt, n\u00e4mlich message . Mithilfe der JavaScript-Standardfunktion JSON.stringify() wandeln wir dieses JavaScript-Objekt in ein JSON um. Somit wird ein JSON versendet, genau wie wir es im header unter Content-Type angegeben haben. F\u00fchren wir diesen Code aus, erhalten wir auf der Konsole folgende Ausgabe: Man k\u00f6nnte jetzt meinen, dass der Zugriff auf das Response-JSON ( {message: \"just a POST mirror\"} ) einfach \u00fcber response.data oder \u00fcber response.json erfolgen kann. Dem ist aber nicht so, da es sich bei dem body der response um ein Objekt vom Typ ReadableStream handelt. Das ist einerseits gut, denn die Daten vom Server werden asynchron als Stream empfangen, andererseits ist der Zugriff auf die Daten recht aufwendig. Wir werden darauf nochmal intensiver eingehen, wenn wir Bilder vom Backend laden. Ansonsten k\u00f6nnen Sie sich auch schonmal hier informieren oder sich hier und hier . Aber, wie gesagt, wir kommen eh nochmal darauf zur\u00fcck. Wenn Sie sich das zur\u00fcckgelieferte JSON schonmal anschauen wollen, dann ginge das z.B. so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); // show the body, ReadableStream return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); // Uint8Array return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) // also possible: text(), blob(), ... . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } ); Fetch vs. XMLHttpRequest \u00b6 Wir haben eingangs erw\u00e4hnt, dass die Fetch API einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest darstellt. Das sieht man einerseits bereits an der Code-L\u00e4nge. Das ist die Implementierung mit fetch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); und das hier macht genau das Gleiche mithilfe von XMLHttpRequest() : 1 2 3 4 5 6 7 8 9 10 11 12 13 let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); Ein ganz wesentlicher Unterschied liegt aber darin, dass bei Verwendung von XMLHttpRequest() deutlich mehr Sachen im Hintergrund synchron ablaufen, als bei der Fetch API. Das ist der Grund, dass wir bei der Implementierung von service workern die Fetch API verwenden m\u00fcssen und nicht auf das (alte) XMLHttpRequest() zugreifen k\u00f6nnen. fetch() und unser service worker \u00b6 Alle Code-Beispiele von oben (also die Promises und die fetch() -Beispiele) habe ich einfach in die app.js unseres HTW Insta -Beispiels eingetragen und ausprobiert. Das hei\u00dft, die app.js sieht jetzt gerade so aus: app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } ); Au\u00dferdem haben wir ja in unserer Anwendung bereits einen service worker registriert und auch in schon in Ans\u00e4tzen implementiert: sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Ich er\u00e4hne das nur deshalb, weil unsere Konsole bei Ausf\u00fchrung der Anwendung jetzt ungef\u00e4hr so aussieht: Es erscheint also ganz oft die Ausgabe des fetch -Events, genau wie in der sw.js in den Zeilen 10-12 implementiert. Das fetch -Event wird immer dann ausgel\u00f6st, wenn die Anwendung etwas vom Webserver l\u00e4dt. Das sind einerseits alle Ressourcen, die wir in der index.html -datei definiert haben (alle *.js und alle *.css und alle *.png -Dateien), aber auch die fetch() -Anweisungen, die wir in der app.js implementiert haben! Wir werden auf der Konsole auch die fetch -Ereignisse finden, die den Zugriff auf https://httpbin.org/ip bzw. https://httpbin.org/post ausf\u00fchren. Wir merken uns also fetch -Ereignisse werden automatisch ausgel\u00f6st durch das Laden von ressourcen, so wie in den *.html -Dateien der Anwendung definiert, aber auch durch manuell ausgel\u00f6ste (implementierte) fetch() -Anfragen. Das ist wichtig, wenn wir in unserem service worker die fetch -Ereignisse behandeln werden. Success Wir kennen nun Promises und die Fetch API und k\u00f6nnen beides anwenden. Wir werden Promises von nun an permanent verwenden. Insbesondere den consuming code f\u00fcr Promises, als .then().catch() . Mithilfe der Fetch API werden wir alle HTTP-Anfragen an den Server stellen k\u00f6nnen, also GET , POST , PUT und DELETE und dabei das asynchrone Prinzip dieser API bestm\u00f6glich ausnutzen.","title":"Promises & Fetch"},{"location":"promises/#promises-und-die-fetch-api","text":"Wir haben es bereits eingangs des Abschnitts \u00fcber Service Workers angesprochen: JavaScript ist sinhle threaded , d.h. JavaScript l\u00e4uft auf einem einzelnen Thread. Das bedeutet im Prinzip, dass drei Funktionen functionA() , functionB() , functionC() nacheinander auf dem einzelnen Thread ausgef\u00fchrt werden w\u00fcrden, wenn sie nacheinander aufgerufen werden: Das zieht nat\u00fcrlich nach sich, dass sich diese Funktionen in ihrer Ausf\u00fchrung blockieren . Wenn also functionB() bspw. sehr lange braucht, um ausgef\u00fchrt werden zu k\u00f6nnen, dann blockiert diese Funktion die Ausf\u00fchrung von functionC() . Um dies zu vermeiden, wurden in JavaScript sogenannte Callbacks eingef\u00fchrt.","title":"Promises und die Fetch-API"},{"location":"promises/#callbacks","text":"Zun\u00e4chst einmal sind Callbacks Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden. Wir betrachten folgendes Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 let x = function () { console . log ( \"Ausgabe der Funktion x\" ); } let y = function () { console . log ( \"Ausgabe der Funktion y\" ); } let z = function ( callback ) { console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); callback (); console . log ( \"Ausgabe der Funktion z - vor Aufruf von callback\" ); } Wir haben drei Funktionen. Diese werden als anonyme Funktionen definiert, aber die Funktionsdefinitionen werden sofort einer Variablen zugewiesen. Das bedeutet, dass z.B. der Wert der Variablen x die Funktionsdefinition function () { console . log ( \"Ausgabe der Funktion x\" ); } ist. Wenn wir nun z.B. console.log(x) aufrufen, dann erhalten wir folgende Ausgabe auf der Konsole: \u0192 () { console.log ( \"Ausgabe der Funktion x\" ) ; } Wenn wir aber x(); , also sozusagen, die Variable als Funktion aufrufen, dann wird die Funktion ausgef\u00fchrt und wir erhalten auf der Konsole die Ausgabe Ausgabe der Funktion x Wenn wir nun z(x); aufrufen, dann wird die in den Zeilen 9-12 definierte Funktion aufgerufen, wobei der Parameter callback als Wert die Funktionsdefinition von x \u00fcbergeben wird. In Zeile 11 erfolgt dann mithilfe von callback(); eigentlich der Aufruf x(); . Wir k\u00f6nnen aber auch z.B. z(y); aufrufen. Dann wird z nicht die Funktion x , sondern die Funktion y \u00fcbergeben und der Aufruf callback(); in Zeile 11 entspricht somit dem Aufruf y(); . Ein gro\u00dfer Vorteil dieser Callbacks bestehen darin, dass der Aufruf asynchron erfolgt. Schauen wir uns z.B. einmal an, wie die m\u00f6gliche Ausgabe der Aufrufe z ( x ); z ( y ); aussehen k\u00f6nnte : Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion x Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion z - vor Aufruf von callback Ausgabe der Funktion y Ausgabe der Funktion z - vor Aufruf von callback Wichtig ist, dass Callbacks die aufrufende Funktion nicht blockieren, sondern asynchron ausgef\u00fchrt werden. Dieses einfache Beispiel soll das demonstrieren: 1 2 3 4 5 setTimeout ( function () { console . log ( 'Ausgabe A' ); }, 3000 ); console . log ( 'Ausgabe B' ); Wir haben zwei Anweisungen: eine setTimeout() -Anweisung und eine console.log('Ausgabe B'); -Anweisung, die nacheinander aufgerufen werden ( setTimeout() vor console.log() ). Innerhalb der setTimeout() -Anweisung wird eine Funktion als Callback \u00fcbergeben. Innerhalb dieser Funktion erfolgt der Aufruf von console.log('Ausgabe A'); . Das Ausf\u00fchren des Programms ergibt folgende Ausgabe: Ausgabe B Ausgabe A Die Ausgabe von Ausgabe A erfolgt ca. 3 Sekunden nach Ausgabe B . Das liegt daran, dass die Callback -Funktion asynchron ausgef\u00fchrt wird und alle weiteren Ausf\u00fchrungen nicht blockiert. Das bedeutet, dass wir mithilfe von Callbacks eine asynchrone Ausf\u00fchrung unseres JavaScript-Codes erreichen. Der einzelne JavaScript-Thread wird also f\u00fcr den Aufruf der Callbacks verwendet und irgendwann sind diese Callback -Aufrufe beendet. Ein gegenseitiges Blockieren findet nicht statt, sondern es bleibt sogar noch Platz f\u00fcr weitere Aufrufe (hellgr\u00fcne Bereiche im folgenden Bild): Das problem mit diesen Callback ist, dass sie sehr schnell sehr un\u00fcbersichtlich werden. Man spricht von der Callback-H\u00f6lle , in der man sehr schnell ist, sobald gen\u00fcgend viele Callbacks asynchron (nebenl\u00e4ufig) ausgef\u00fchrt werden, diese sogar ineinander verschachtelt sind ( Callbacks in Callbacks ) und man gar nicht wei\u00df, wann welche Callbacks beendet sind. Sobald man aber erst die Ausf\u00fchrung eines Callbacks abwarten muss , weil man die Resultate dieses Callbacks weiterverarbeiten m\u00f6chte, entstehen wieder synchrone Aufrufe und der Vorteil der asynchronen Abarbeitung ist dahin. Um dieses Problem zu l\u00f6sen, wurden Promises entwickelt.","title":"Callbacks"},{"location":"promises/#promises","text":"Ein Promise ist zun\u00e4chst einmal ein JavaScript-Objekt. Es enth\u00e4lt einerseits den Code zum Erzeugen eines Promise -Objektes ( producing code ) und anderseits auch den Code zum Verarbeiten eines solchen Promise -Objektes ( consuming code ). Dabei k\u00f6nnen zwei Sachen verarbeitet werden: entweder das Promise -Objekt wurde erfolgreich abgearbeitet ( resolve ) oder das Promise -Objekt wurde nicht erfolgreich abgearbeitet ( reject ). Die allgemeine Syntax eines solchen Promise -Objektes sieht so aus (siehe z.B. w3scool ): 1 2 3 4 5 6 7 8 9 10 11 12 let myPromise = new Promise ( function ( myResolve , myReject ) { // \"Producing Code\" (May take some time) myResolve (); // when successful myReject (); // when error }); // \"Consuming Code\" (Must wait for a fulfilled Promise) myPromise . then ( function ( value ) { /* code if successful */ }, function ( error ) { /* code if some error */ } ); Betrachten wir das obere Beispiel genauer: in Zeile 1 erstellen wir eine Variable myPromise , die wir nat\u00fcrlich nennen k\u00f6nnen, wie wir m\u00f6chten diese Variable zeigt auf ein Promise -Objekt, das ebenfalls in Zeile 1 mithilfe von new und dem Aufruf des Konstruktors erzeugt wird einem Promise -Objekt (dem Konstruktor) wird immer eine Funktion \u00fcbergeben, der wiederum zwei Callback -Funktionen als Parameter \u00fcbergeben werden die erste Callback -Funktion, die hier myResolve hei\u00dft (aber meistens nur resolve ), wird aufgerufen, wenn das Promise -Objekt erfolgreich abgearbeitet wurde (Zeile 4 ) die zweite Callback -Funktion, die hier myReject hei\u00dft (aber meistens nur reject ), wird aufgerufen, wenn das Promise -Objekt nicht erfolgreich abgearbeitet wurde (Zeile 5 ) den Aufruf des promise -Objektes sehen wir in Zeile 9 . Ein Promise -Objekt durchl\u00e4uft durch den Aufruf 2 der folgenden 3 Zust\u00e4nde: pending : das Promise -Objekt wird abgearbeitet und hat noch kein Resultat ( undefined ), fulfilled : das Promise -Objekt wurde erfolgreich abgearbeitet und liefert den entsprechenden Resultatwert zur\u00fcck oder rejected : das Promise -Objekt wurde nicht erfolgreich abgearbeitet und liefert ein Error -Objekt zur\u00fcck es gibt aber keine M\u00f6glichkeiten, auf diese Zust\u00e4nde eines Promise -Objektes zuzugreifen und auch nicht direkt auf den Resultatwert oder das Fehlerobjekt; stattdessen muss eine entsprechende Funktion des Promise -Objektes aufgerufen werden, die selbst wieder ein Promise -Objekt zur\u00fcckgibt, n\u00e4mlich then() der Aufruf von then() ist ebenfalls in Zeile 9 gezeigt; diese Funktion hat zwei Parameter: dem ersten Parameter wird der Resultatwert \u00fcbergeben (wenn das Promise -Objekt den fulfilled -Zustand erreicht hat) und dem zweiten Parameter wird das Fehlerobjekt \u00fcbergeben (wenn das Promise -Objekt den rejected -Zustand erreicht hat). Beide Parameter sind wiederum Callbacks . Wir werden sehen, dass wir den rejected -Zustand auch mit catch() abfangen k\u00f6nnen, aber dazu kommen wir sp\u00e4ter. Zun\u00e4chst noch einmal zur Vertiefung unser obiges Callback -Beispiel mit setTimeout() als Promise : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise ( function ( resolve , reject ) { setTimeout ( function () { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( function ( value ) { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Die Ausgabe in Zeile 14 hat nichts mit dem Promise zu tun, aber wir lassen sie mal im Code, um das gleiche Beispiel wie oben zu haben. Es erfolgt zun\u00e4chst die Ausgabe Ausgabe B auf der Konsole und 3 Sekunden sp\u00e4ter die Ausgabe resolve -- Ausgabe A . Rein funktional hat sich also nichts ge\u00e4ndert. Wie Sie den Parameter f\u00fcr den resolve -Fall (und dann auch f\u00fcr den reject -Fall) nennen, bleibt ganz Ihnen \u00fcberlassen; hier value (Zeile 8 ). Dieses Mal hei\u00dft unser Promise -Objekt promise und die beiden Callback -Funktionen resolve und reject (Zeile 1 ). Der producing code enth\u00e4lt nur die Implementierung von resolve . In dem Beispiel gibt es also (noch) kein reject . In den Zeilen 7 - 12 sehen wir den consuming code der Promise , auch hier wieder nur f\u00fcr resolve . Es erfolgt die Ausgabe des Wertes, den resolve \u00fcbergeben hat.","title":"Promises"},{"location":"promises/#promises-in-arrow-notation","text":"Weil wir es mitlerweile h\u00e4ufig sehen und weil wir uns auch angew\u00f6hnen wollen, diese selbst zu benutzen, hier das gleiche Beispiel nochmal in Arrow-Notation : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { resolve ( 'resolve -- Ausgabe A' ); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Es ist auch noch zu erw\u00e4hnen, dass Sie nur selten selbst Promises erstellen, sondern diese viel h\u00e4ufiger nutzen werden. Das hei\u00dft, Sie werden nicht so h\u00e4ufig producing code , sondern viel h\u00e4ufiger consuming code schreiben. Beispielsweise gibt die Registrierung eines service workers ein Promise zur\u00fcck: 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); }); Ein gro\u00dfer Vorteil von Promises ist, dass Sie die Verarbeitung verketten k\u00f6nnen. Die then() -Funktion liefert selbst wieder ein Promise zur\u00fcck, so dass Sie erneut dieses Promise mit then() behandeln k\u00f6nnen. Wir kommen darauf in den Anwendungen nochmal zur\u00fcck.","title":"Promises in Arrow-Notation"},{"location":"promises/#der-reject-fall","text":"Wir schauen uns jetzt an, wie wir den Fall am besten behandeln, wenn das Promise nicht in den fulfilled , sondern in den rejected -Zustand \u00fcbergeht, wenn also nicht resolve , sondern reject ausgef\u00fchrt wird. Wir \u00e4ndern unser Beispiel einmal entsprechend: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } // (noch) keine Funktion f\u00fcr error ); console . log ( 'Ausgabe B' ); Wir haben also Zeile 3 auskommentiert ( resolve ) und stattdessen reject eingef\u00fcgt (Zeile 4 ). Im Gegensatz zu resolve geben wir jetzt mal keinen einfachen string , sondern ein JavaScript-Objekt zur\u00fcck (erkennbar an { } ). Wir sind darin v\u00f6llig frei, was zur\u00fcckgegeben wird, aber es bietet sich an, ein Error-Objekt zu erzeugen. Die then() -Behandlung des Promise -Objekt lassen wir zun\u00e4chst unver\u00e4ndert (Zeilen 8-13 ). Wenn wir diesen Code ausf\u00fchren, dann wird erneut Ausgabe B ausgegeben (Zeile 15 - hat nichts mit dem Promise zu tun), aber nach 3 Sekunden erfolgt keine Ausgabe auf der Konsole, sondern stattdessen erscheint auf der Konsole:","title":"Der reject-Fall"},{"location":"promises/#error-behandlung-in-der-then-funktion","text":"Wir behandeln den geworfenen Fehler nicht, da wir in unserer then() -Behandlung bis jetzt nur den resolve -Fall behandeln (Zeilen 9-11 ). Das \u00e4ndern wir nun: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); }, err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); In den Zeilen 12-14 wurde die Behandlung des Fehlerfalls hinzugef\u00fcgt (beachten Sie auch das zus\u00e4tzliche Komma in Zeile 11 ). Wie Sie die Variable err nennen, bleibt Ihnen \u00fcberlassen. Sie bekommt den Wert, den das Promise f\u00fcr den reject -Fall \u00fcbergibt, in unserem Beispiel also ein JavaScript-Objekt: { code : 500 , message : 'A n error occurred' } weil wir das in Zeile 4 so definiert haben. Wir greifen also auf die Werte der Schl\u00fcssel code und message zu und lassen diese auf die Konsole ausgeben (Zeile 13 ). Auf der Konsole erscheint 3 Sekunden nach der Ausgabe Ausgabe B die Ausgabe 500 An error occurred .","title":"Error-Behandlung in der then()-Funktion"},{"location":"promises/#error-behandlung-im-catch-block","text":"Es ist ungew\u00f6hnlich, den Fehlerfall in der then() -Funktion zu behandeln, obwohl es, wie wir gesehen haben, m\u00f6glich ist. Stattdessen verwendet man f\u00fcr den Fehlerfall besser catch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); Mit diesen Wissen k\u00f6nnen wir jetzt auch unsere Registrierung eines service workers etwas zuverl\u00e4ssiger gestalten und f\u00fcgen dort ebenfalls einen catch() -Block ein, auch wenn der Fehlerfall nicht all zu h\u00e4ufig eintreffen d\u00fcrfte: 1 2 3 4 5 6 7 8 9 10 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); }","title":"Error-Behandlung im catch()-Block"},{"location":"promises/#fetch-api","text":"Die Fetch API bietet einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest . Es geht also darum, Ressourcen vom Web-Server zu holen ( to fetch ). Die Fetch API ist vollst\u00e4ndig auf Promises aufgebaut. Die zentrale Methode der Fetch API ist fetch() . Das Gute an dieser Methode ist, dass sie gloabl ist im Sinne, dass sie nicht nur von einer Webanwendung selbst, sondern auch z.B. von einem Service Worker verwendet werden kann (sie ist im WindowOrWorkerGlobalScope ). Einf\u00fchrungen zu fetch() finden Sie z.B. hier , hier oder hier .","title":"Fetch API"},{"location":"promises/#get-anfragen-mit-fetch","text":"Wir starten mit einem einfachen Beispiel und nutzen daf\u00fcr https://httpbin.org , eine Webseite, die viele REST-Endpunkte zum Ausprobieren anbietet. Nach dem \u00d6ffnen dieser Seite im Browser, k\u00f6nnen Sie z.B. mal auf Request inspection klicken - dort sehen wir den Endpunkt /ip , den wir \u00fcber ein GET abfragen werden: 1 2 3 4 5 6 fetch ( 'https://httpbin.org/ip' ) . then ( response => { console . log ( response ); } ); Wir rufen also einmal fetch() auf und \u00fcbergeben dieser Funktion den Endpunkt, von dem eine Ressource geholt werden soll. Die fetch() -Funktion liefert ein Promise -Objekt zur\u00fcck. Deshalb k\u00f6nnen wir auch direkt die then() -Funktion aufrufen und die response (ist egal, wie Sie disen Parameter nennen) auf die Konsole ausgeben. Wenn wir diesen Code ausf\u00fchren, erscheint in der Konsole: Wir bekommen also ein JavaScript-Objekt zur\u00fcck. Wirklich interessiert sind wir aber haupts\u00e4chlich an dem body dieses Objektes. Um darauf geeignet zuzugreifen, konvertieren wir das Objekt zun\u00e4chst in das JSON-Format mithilfe der Anweisung response.json(); . Die json() -Funktion ist eine Standard-JavaScript-Funktion, welche ein JavaScript-Objekt in einen JSON umwandelt. Da then() selbst ein Promise -Objekt zur\u00fcckgibt. wollen wir darauf then() erneut anwenden, um das Prinzip verketteter then() -Funktionen (verketteter asynchroner Verarbeitungen) zu zeigen: 1 2 3 4 5 6 7 8 9 10 11 fetch ( 'https://httpbin.org/ip' ) . then ( response => { return response . json (); } ) . then ( data => { console . log ( data ); } ); In der ersten then() -Funktion (Zeilen 2-6 ) wird also die Response der asynchronen GET https://httpbin.org/ip -Anfrage behandelt und darin wird diese Response in eine JSON umgewandelt (Zeile 4 ). Die R\u00fcckgabe dieser then() -Funktion ist erneut ein Promise . F\u00fcr dieses Promise ist die zweite then() -Funktion (Zeilen 7-11 ). Diese Funktion behandelt das asynchrone Streamen des Response-Body und dessen Umwandlung in ein JSON. Das durch dieses Promise zur\u00fcckgegebene resolve bezeichnen wir in unserem Beispiel als data und geben es auf die Konsole aus. Auf der Konsole erscheint die IP , von der die Anfrage erfolgte, z.B. { origin: \"130.193.115.48\" } Noch zwei kleine Verbesserungen am Code: wenn in der Arrow-Notation Ihre Funktion nur aus einer einzigen return -Anweisung besteht, dann k\u00f6nnen Sie die geschweiften Klammern Ihres Funktionsk\u00f6rpers weglassen und auch das return . D.h. aus response => { return response . json (); } wird response => response . json () Auch das Semikolon entf\u00e4llt. Das gilt aber nur f\u00fcr return -Anweisungen, nicht z.B. wenn die Funktion nur aus einer einzigen Konsolenausgabe besteht. Au\u00dferdem sollten wir auch noch ein catch() -Block einf\u00fcgen, f\u00fcr den Fall, dass ein Fehler auftritt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Den Fehlerfall k\u00f6nnen Sie ausprobieren, indem Sie einfach einen Fehler in die URL einbauen.","title":"GET-Anfragen mit fetch()"},{"location":"promises/#post-anfragen-mit-fetch","text":"POST -Anfragen werden verwendet, um Daten an den Webserver zu senden. Typischerweise sind das Formulardaten, die z.B. in eine Datenbank eingef\u00fcgt werden sollen. Wenn wir also mithilfe von fetch() eine POST -Anfrage stellen wollen, dann m\u00fcssen wir zwei Dinge beachten: wir m\u00fcssen fetch() explizit mitteilen, dass die verwendete HTTP-Anfrage-Methode POST ist und wir m\u00fcssen die Daten mitschicken. F\u00fcr ein einfaches Beispiel verwenden wir erneut https://httpbin.org , dieses Mal aber den Endpunkt /post , der uns einfach die gesendeten Daten wieder als Response unserer Abfrage zur\u00fcckschickt, also einfach als \"Spiegel\" fungiert. Eine entsprechende fetch() -Anweisung k\u00f6nnte so aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); Die Zeilen 11-23 sind dabei zun\u00e4chst unver\u00e4ndert geblieben und sehen genauso aus wie die Zeilen 2-14 aus dem obigen GET -Beispiel. Nur die Parameter in der fetch() -Funktion haben sich ge\u00e4ndert. Der erste Parmeter lautet nun 'https://httpbin.org/post' , da wir die Anfrage an diese URL (diesen Endpunkt) stellen. Hinzugekommen ist ein zweiter Parameter, ein JSON: { me t hod : 'POST' , header : { 'Co ntent - Type' : 'applica t io n /jso n ' , 'Accep t ' : 'applica t io n /jso n ' }, body : JSON.s tr i n gi f y( { message : 'jus t a POST mirror' } ) } darin legen wir zun\u00e4chst mithilfe von method die HTTP-Anfrage-Methode fest. Standard ist GET , deshalb brauchten wir das in unserem ersten Beispiel nicht zu tun. Nun geben wir POST an. Au\u00dferdem definieren wir noch Eigenschaften f\u00fcr den header . Wir legen mithilfe von Content-Type fest, welches Format unsere Daten haben, die wir \u00fcbermitteln, n\u00e4mlich application/json . Au\u00dferdem legen wir mithilfe von Accept fest, in welchem Format wir die Daten empfangen wollen, n\u00e4mlich ebenfalls im JSON-Format. Diese Accept -Angabe ist nicht immer notwendig. Die meisten REST-Endpunkte liefern so oder so ein JSON zur\u00fcck. Das h\u00e4ngt von der Definition der REST-API ab. In der body -Eigenschaft definieren wir die Daten, die wir \u00fcbertragen wollen. In diesem Fall im JSON-Format. { message: 'just a POST mirror' } ist ein JavaScript-Objekt, das eine einzige Eigenschaft enth\u00e4lt, n\u00e4mlich message . Mithilfe der JavaScript-Standardfunktion JSON.stringify() wandeln wir dieses JavaScript-Objekt in ein JSON um. Somit wird ein JSON versendet, genau wie wir es im header unter Content-Type angegeben haben. F\u00fchren wir diesen Code aus, erhalten wir auf der Konsole folgende Ausgabe: Man k\u00f6nnte jetzt meinen, dass der Zugriff auf das Response-JSON ( {message: \"just a POST mirror\"} ) einfach \u00fcber response.data oder \u00fcber response.json erfolgen kann. Dem ist aber nicht so, da es sich bei dem body der response um ein Objekt vom Typ ReadableStream handelt. Das ist einerseits gut, denn die Daten vom Server werden asynchron als Stream empfangen, andererseits ist der Zugriff auf die Daten recht aufwendig. Wir werden darauf nochmal intensiver eingehen, wenn wir Bilder vom Backend laden. Ansonsten k\u00f6nnen Sie sich auch schonmal hier informieren oder sich hier und hier . Aber, wie gesagt, wir kommen eh nochmal darauf zur\u00fcck. Wenn Sie sich das zur\u00fcckgelieferte JSON schonmal anschauen wollen, dann ginge das z.B. so: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); // show the body, ReadableStream return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); // Uint8Array return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) // also possible: text(), blob(), ... . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } );","title":"POST-Anfragen mit fetch()"},{"location":"promises/#fetch-vs-xmlhttprequest","text":"Wir haben eingangs erw\u00e4hnt, dass die Fetch API einen bequemeren und leistungsf\u00e4higeren Ersatz f\u00fcr XMLHttpRequest darstellt. Das sieht man einerseits bereits an der Code-L\u00e4nge. Das ist die Implementierung mit fetch() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); und das hier macht genau das Gleiche mithilfe von XMLHttpRequest() : 1 2 3 4 5 6 7 8 9 10 11 12 13 let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); Ein ganz wesentlicher Unterschied liegt aber darin, dass bei Verwendung von XMLHttpRequest() deutlich mehr Sachen im Hintergrund synchron ablaufen, als bei der Fetch API. Das ist der Grund, dass wir bei der Implementierung von service workern die Fetch API verwenden m\u00fcssen und nicht auf das (alte) XMLHttpRequest() zugreifen k\u00f6nnen.","title":"Fetch vs. XMLHttpRequest"},{"location":"promises/#fetch-und-unser-service-worker","text":"Alle Code-Beispiele von oben (also die Promises und die fetch() -Beispiele) habe ich einfach in die app.js unseres HTW Insta -Beispiels eingetragen und ausprobiert. Das hei\u00dft, die app.js sieht jetzt gerade so aus: app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } let promise = new Promise (( resolve , reject ) => { setTimeout ( () => { // resolve('resolve -- Ausgabe A'); reject ({ code : 500 , message : 'An error occurred' }); }, 3000 ); }); promise . then ( value => { console . log ( value ); } ) . catch ( err => { console . log ( err . code , err . message ); } ); console . log ( 'Ausgabe B' ); fetch ( 'https://httpbin.org/ip' ) . then ( response => response . json () ) . then ( data => { console . log ( data ); } ) . catch ( err => { console . log ( err ); } ); let xhr = new XMLHttpRequest (); xhr . open ( 'GET' , 'https://httpbin.org/ip' ); xhr . responseType = 'json' ; xhr . onload = function () { console . log ( xhr . response ); } xhr . onerror = function () { console . log ( 'error' ); } xhr . send (); fetch ( 'https://httpbin.org/post' , { method : 'POST' , header : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ({ message : 'just a POST mirror' }) }) . then ( response => { console . log ( response ); return response ; } ) . then ( response => { console . log ( response . body ); return response . body ; } ) . then ( body => { const reader = body . getReader (); return new ReadableStream ({ start ( controller ) { return pump (); function pump () { return reader . read (). then (({ done , value }) => { // When no more data needs to be consumed, close the stream if ( done ) { controller . close (); return ; } // Enqueue the next data chunk into our target stream controller . enqueue ( value ); return pump (); }); } } }) }) . then ( stream => new Response ( stream )) . then ( response => response . json ()) . then ( response => { console . log ( response . json ); }) . catch ( err => { console . log ( err ); } ); Au\u00dferdem haben wir ja in unserer Anwendung bereits einen service worker registriert und auch in schon in Ans\u00e4tzen implementiert: sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Ich er\u00e4hne das nur deshalb, weil unsere Konsole bei Ausf\u00fchrung der Anwendung jetzt ungef\u00e4hr so aussieht: Es erscheint also ganz oft die Ausgabe des fetch -Events, genau wie in der sw.js in den Zeilen 10-12 implementiert. Das fetch -Event wird immer dann ausgel\u00f6st, wenn die Anwendung etwas vom Webserver l\u00e4dt. Das sind einerseits alle Ressourcen, die wir in der index.html -datei definiert haben (alle *.js und alle *.css und alle *.png -Dateien), aber auch die fetch() -Anweisungen, die wir in der app.js implementiert haben! Wir werden auf der Konsole auch die fetch -Ereignisse finden, die den Zugriff auf https://httpbin.org/ip bzw. https://httpbin.org/post ausf\u00fchren. Wir merken uns also fetch -Ereignisse werden automatisch ausgel\u00f6st durch das Laden von ressourcen, so wie in den *.html -Dateien der Anwendung definiert, aber auch durch manuell ausgel\u00f6ste (implementierte) fetch() -Anfragen. Das ist wichtig, wenn wir in unserem service worker die fetch -Ereignisse behandeln werden. Success Wir kennen nun Promises und die Fetch API und k\u00f6nnen beides anwenden. Wir werden Promises von nun an permanent verwenden. Insbesondere den consuming code f\u00fcr Promises, als .then().catch() . Mithilfe der Fetch API werden wir alle HTTP-Anfragen an den Server stellen k\u00f6nnen, also GET , POST , PUT und DELETE und dabei das asynchrone Prinzip dieser API bestm\u00f6glich ausnutzen.","title":"fetch() und unser service worker"},{"location":"pushnotes/","text":"Push Notifications \u00b6 Hint Aktueller Stand vor Push Notifications: Frontend Backend Collection post Collection post.files Collection post.chunks Push Notifications sind sinnvoll, um die Nutzerin einer App \u00fcber Neuigkeiten zu informieren, sogar dann, wenn die Anwendung (und der Browser!) geschlossen ist (sind). Mit Push Notifications k\u00f6nnen Nutzerinnen wieder \"zur\u00fcck an die App geholt\" werden, d.h. mithilfe von Push Notifications kann man daf\u00fcr sorgen, dass Nutzerinnen die App wieder \u00f6ffnen, um sich die Neuigkeiten genauer anzuschauen. Die Neuigkeiten k\u00f6nnen neue Tweets, E-Mails, Nachrichten, Anrufe usw. sein. Das Prinzip, das f\u00fcr die Push-Benachrichtungen umgesetzt wird, sieht auf den ersten Blick etwas kompliziert aus: Im Zentrum stehen zun\u00e4chst die Webanwendung und der Service Worker. Die Webanwendung meldet sich bei den Push-Benachrichtigungen an und der Service Worker verwaltet diese. Jeder Browser hat eine eigenen \"eingebauten\" Push Server . Eine Push-Anmeldung ( Push Subscription ) erlaubt den Zugriff auf einen Push-API-Endpunkt auf den Push-Server. Die eigentliche Push-Benachrichtigung kommt jedoch vom eigenen Server. Er sendet die Push-Nachricht an den In-Browser Push Server , dieser l\u00f6st damit ein push -Ereignis beim Service Worker aus und der Service Worker schickt die Push-Benachrichtigung an die Webanwendung. Wir schauen uns im Folgenden alle diese Schritte im Detail an. Anzeigen von Benachrichtigungen \u00b6 Wir beginnen mit dem Anzeigen (der Darstellung) von Push-Benachrichtigungen in einer Webanwendung. Dieser Abschnitt hat noch nichts mit dem push -Ereignis zu tun! Wir ben\u00f6tigen zum Anzeigen nicht mal einen Service Worker. Es geht aber auch \u00fcber den Service Worker - und das wird sp\u00e4ter auch bei der Verwendung der Push-API notwendig. Die hier verwendete Notification-API wird von fast allen Browsern unterst\u00fctzt. Hier ist auch eine gute \u00dcbersicht dar\u00fcber, wie diese Notification-API verwendet wird. Benachrichtigungen einschalten \u00b6 Bevor wir das Anzeigen von (Push-)Benachrichtigungen betrachten, m\u00fcssen wir diese zuerst erlauben. In unserer Anwendung gibt es dazu den Button BENACHRICHTIGUNGEN EIN . In der index.html ist dieser Button zwei Mal definiert, einmal f\u00fcr einen schmalen Viewport und einmal f\u00fcr einen breiten. F\u00fcr beide Varianten sieht die Implementierung so aus: < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > F\u00fcr einen schmalen Viewport ist der Button dann unter dem Hamburger Men\u00fc in der linken oberen Ecke erreichbar. Beiden Buttons ist die CSS-Klasse enable-notifications zugewiesen. Wir sorgen zuerst daf\u00fcr, dass dieser Button nur angezeigt wird, wenn der Browser die Notification-API unterst\u00fctzt. Wenn nicht, dann w\u00e4re der Button funktionslos und wir br\u00e4uchten ihn nicht. Wir schalten ihn deshalb in der app.css zun\u00e4chst im Standartwert aus: /src/css/app.css 1 2 3 4 5 6 7 8 9 10 11 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } . enable-notifications { display : none ; } In der app.js pr\u00fcfen wir, ob der Browser die Notification-API unterst\u00fctzt und schalten f\u00fcr diesen Fall die Buttons wieder ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // notifications granted } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } In Zeile 1 erstellen wir uns eine Variable enableNotificationsButtons , die auf ein Array aller Buttons mit der CSS-Klasse enable-notifications zeigt. In Zeile 25 pr\u00fcfen wir nun, ob der Browser die Notification -API unterst\u00fctzt. Wenn ja, dann schalten wir alle Buttons aus dem enableNotificationsButtons -Array wieder auf sichtbar (von display: none auf display: inline-block ) und wir melden jeden dieser Buttons an die Ereignisbehandlung des click -Ereignisses an (Zeile 28 ). Die Behandlung des click -Ereignisses erfolgt in der Methode askForNotificationPermission() , die in den Zeilen 14-23 definiert ist. Da diese Methode nur dann aufgerufen wird, wenn der Browser die Notification -API unterst\u00fctzt, kann diese API darin verwendet werden. Mit der Funktion requestPermission() wird die Nutzerin gefragt, ob sie Benachrichtigungen zulassen m\u00f6chte. Diese Methode gibt ein Promise zur\u00fcck, dessen result die Werte granted , denied oder default haben kann. Werden Benachrichtigungen nicht erlaubt (Zeile 17 ), k\u00f6nnen wir nichts weiter tun. Die Nutzerin wird dann auch nicht erneut gefragt. Die Benachrichtigungen bleiben f\u00fcr die Webanwendung ausgeschaltet (Zeile 18 ). Wenn wir die Anwendung nun ausf\u00fchren (Reload nach Application --> Storage --> Clear Storage oder die Versionsnummern der Caches im Service Worker \u00e4ndern), dann erhalten wir nach dem Klicken auf den BENACHRICHTIGUNGEN EIN -Button folgende Abfrage: Wenn wir auf Zulassen klicken, dann erscheint in der Konsole User Chaice granted (Zeile 16 ). Beachten Sie, dass Sie nicht erneut gefragt werden, ob Benachrichtungen zugelassen werden sollen oder nicht. Erneutes Klicken auf den Button bewirkt (selbst nach einem Reload der Anwendung) keine erneute Abfrage. Deshalb w\u00e4re es eigentlich auch sinnvoll, den Button wieder zu verstecken, d.h. auf display: none zu setzen. Um die Benachrichtigungen zu verwalten, k\u00f6nnen Sie in Chrome chrome://settings/content/notifications eingeben. Dort sehen Sie eine Auflistung aller Webanwendungen, die Sie besucht haben und die von Ihnen eine Erlaubnis zur Benachrichtung gewollt haben. Sie k\u00f6nnen dort die jeweiligen Einstellungen wieder \u00e4nder, z.B. auch f\u00fcr die hier entwickelte Anwendung. Benachrichtigungen anzeigen \u00b6 Jetzt erstellen wir unsere erste Benachrichtigung mithilfe der Notification -API. Die einfachste Form der Notification wird durch die Verwendung des parametrisierten Konstruktors von Notification ( new Notification('Nachricht') ) erstellt. Wir f\u00fcgen die app.js eine solche einfache Benachrichtigung f\u00fcr den Fall, dass Benachrichtigungen erlaubt werden, ein: /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { new Notification ( 'Successfully subscribed!' ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { displayConfirmNotification (); } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Wenn wir die Anwendung nun erneut ausf\u00fchren und auf den Button klicken, dann werden wir zwar nicht erneut gefragt, ob wir Benachrichtigungen zulassen oder blockieren wollen, aber da wir Benachrichtungen bereits zugelassen haben, erscheint nun die folgende Benachrichtigung: Der einfache Aufruf des Notification -Konstruktors mit einer einfachen Nachricht (Zeile 15 ) erzeugt auch die einfachste Form der Benachrichtigung. Dem Konstruktor lassen sich aber als zweiten Parameter noch JavaScript-Objekt f\u00fcr options \u00fcbergeben. Darin kann ein weiterer Text ( body ) definiert werden und z.B. auch ein eigenes icon . Wir betrachten das sp\u00e4ter noch etwas genauer, erstmal nur eine weitere Nachricht: /src/js/app.js 14 15 16 17 function displayConfirmNotification () { let options = { body : 'You successfully subscribed to our Notification service!' }; new Notification ( 'Successfully subscribed!' , options ); } ergibt dann die Benachrichtigung: Benachrichtigungen im Service Worker erstellen \u00b6 Im jetzigen Stand werden die Benachrichtungen aus der Webanwendung heraus erstellt. Das ist auch v\u00f6llig ok. Die Notification -API l\u00e4sst sich sowohl in der Webanwendung verwenden, als auch im Service Worker. Da sp\u00e4ter aber die Push-Benachrichtigungen vom Service Worker verwaltet werden, wechseln wir jetzt auch f\u00fcr die einfachen Benachrichtigungen zum Service Worker, d.h. wir lassen die Benachrichtigungen nun nicht mehr durch die Webanwendung erstellen, sondern durch den Service Worker. Dazu passen wir unsere app.js wie folgt an: /src/js/app.js 14 15 16 17 18 19 20 21 22 23 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Der Service Worker besitzt eine eigene Funktion showNotification() , die intern ein Notification -Objekt erzeugt und der die gleiche Parameterliste \u00fcbergeben werden kann, wie dem Notification -Konstruktor. Nach Reload und Klicken des Buttons sehen wir nun folgende Benachrichtigung: Die Nachricht wurde extra um (from SW) erg\u00e4nzt, um kenntlich zu machen, dass die Benachrichtigung nun vom Service Worker angesto\u00dfen wird. Weitere Optionen f\u00fcr die Benachrichtigungen \u00b6 Benachrichtigungen sind ein System-Feature , d.h. ihre Gestaltung hat etwas mit dem Ger\u00e4t zu tun, in dem diese Benachrichtigungen erscheinen. Es ist kein Browser-Feature . Benachrichtigungen sehen auf dem Mac anders aus, als unter Windows oder unter Linux und auf dem iPhone anders, als auf einem Android-Ger\u00e4t. Es gibt ziemlich viele m\u00f6gliche Optionen f\u00fcr eine solche Benachrichtigung, aber die unterschiedlichen Systeme beachten diese Optionen mal mehr und mal weniger. Wir werden hier der Vollst\u00e4ndigkeit halber einige Optionen benennen, aber am meisten sieht man von diesen Optionen auf einem Android-Ger\u00e4t. /src/js/app.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Auf dem Mac hat neben der icon -Option nur noch die actions -Option eine Auswirkung. Die Benachrichtigung sieht nun so aus (auf dem Mac): Man sieht das icon und unter dem Icon wird durch das Hovern mit der Maus ein Men\u00fc sichtbar, das die definierten actions enth\u00e4lt. mit image kann die gesamte Benachrichtigung mit einem Bild unterlegt werden (sieht man bei Android), mit vibrate kann die Benachrichtigung durch das Vibrieren des Ger\u00e4tes signalisiert werden. In unserem Beispiel vibriert das Ger\u00e4t 100 Millisekunden, dann ist 50 Millisekunden Pause und dann vibriert es nochmal f\u00fcr 200 Millisekunden. mit tag k\u00f6nnen Benachrichtigungen mit einer Art id versehen werden. Wenn meherere Benachrichtigungen mit demselben tag vorliegen, dann wird nur die zuletzt eingegangene Benachrichtigung angezeigt. Ansonsten erscheinen alle Benachrichtigungen untereinander. renotify geh\u00f6rt zu tag . Wenn der Wert true ist, dann wird die Nutzerin auch dann informiert, wenn eine neue Nachricht zum selben tag angekommen ist. Sonst nicht. Eine \u00dcbersicht \u00fcber alle Optionen findet sich hier . Wenn Sie ein Android-Ger\u00e4t besitzen, dann k\u00f6nnen Sie es an den Rechner andocken (USB-Anschluss - dazu m\u00fcssen Sie den USB-Zugriff erlauben) und in den Devloper Tools rechts oben unter den drei senkrechten Punkten den Men\u00fcpunkt More tools und dort Remote devices ausw\u00e4hlen und k\u00f6nnen dann ausprobieren, wie die Benachrichtigungen unter einem Android-Ger\u00e4t aussehen. Anleitung f\u00fcr Edge , Anleitung f\u00fcr Chrome , Anleitung f\u00fcr Firefox . Auf die unter actions definierten Aktionen kann innerhalb des Service Workers sogar reagiert werden: /sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Der Service Worker kann das notificationclick -Ereignis behandeln. Ebenso kann der Service Worker das Ereignis behandeln, das ausgel\u00f6st wird, wenn eine Benachrichtigung geschlossen wird: /sw.js 155 156 157 self . addEventListener ( 'notificationclose' , event => { console . log ( 'notification was closed' , event ); }); Wir wollen uns aber mit den Benachrichtigungen gar nicht weiter im Detail besch\u00e4ftigen, sondern lieber mit Push-Notationen. Kenntnisse \u00fcber Benachrichtigungen sind aber eine gute Voraussetzung, um zu den Push-Notifikationen \u00fcberzugehen. Push-Benachrichtigungen \u00b6 Das Konzept der Benachrichtigung wird auch bei den Push-Nachrichten verwendet. Um Push-Nachrichten zu empfangen, muss man sich jedoch zun\u00e4chst f\u00fcr den Empfang registrieren (siehe in der Abbildung oben neue Push Subscription erstellen ). Anmelden an Push-Nachrichten (Subscription) \u00b6 Die Anmeldung an die Push-Nachrichten geschieht in der Webanwendung. Wir passen dazu unsere app.js an und f\u00fcgen eine Funktion configurePushSubscription() ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } navigator . serviceWorker . ready . then ( sw => { return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription } else { // already subscribed } }); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // displayConfirmNotification(); configurePushSubscription (); } }); } if ( 'Notification' in window && 'serviceWorker' in navigator ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Die Methode configurePushSubscription() wird nun anstelle von displayConfirmNotifivcation() in der askForNotificationPermission() aufgerufen (Zeilen 62-63 ). Das liegt daran, dass die Notification.requestPermission() -Funktion auch f\u00fcr die Erlaubnis von Push-Nachrichten verwendet wird. Mit der Erlaubnis von Benachrichtigungen wird also auch gleichzeitig die Erlaubnis von Push-Nachrichten erteilt. Da die Push-Benachrichtigungen \u00fcber den Service Worker verwaltet werden, wird in configurePushSubscription() zun\u00e4chst gepr\u00fcft, ob der Browser \u00fcberhaupt Service Worker unterst\u00fctzt (Zeile 39 ). Wenn nicht, wird die Methode sofort verlassen (Zeile 40 ). Da wir aber auch in die Abfrage nach der Notification-API (Zeile 68 ) noch die Abfrage nach dem serviceWorker hinzugef\u00fcgt haben, w\u00e4re der Button BENACHRICHTUNGEN EIN gar nicht sichtbar, wenn der Service Worker nicht im Browser unterst\u00fctzt w\u00fcrde. Dann w\u00fcrde auch nie die Funktion configurePushSubscription() aufgerufen. Wir lassen Zeilen 39-41 trotzdem sicherheitshalber drin. In Zeile 45 verwendet der Service Worker die PushManager-API . Eine der drei Methoden, die diese API zur Verf\u00fcgung stellt, ist die getSubscription() -Methode. Diese Methode gibt eine Promise mit einer existierenden Subscription zur\u00fcck. Wenn keine Subscription existiert, ist der R\u00fcckgabewert null . Ist der R\u00fcckgabewert null , dann erzeugen wir eine neue Subscription (Zeile 49 ). Erzeugen einer neuen Subscription \u00b6 Das Erezugen einer Subscription ist zun\u00e4chst einfach. Daf\u00fcr gibt es in der PushManager-API die Methode subscribe() . /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription swReg . pushManager . subscribe (); } else { // already subscribed } }); } Da wir in dem zweiten then() -Block keinen Zugriff mehr auf die Variable sw haben (wir geben die Promise von getSubscription() zur\u00fcck, nicht aber sw ), ben\u00f6tigen wir eine Variable, in der wir die Referenz auf den Service Worker speichern und auf die wir in der gesamten Funktion Zugriff haben. Die Promise navigator.serviceWorker.ready gibt etwas mehr als den Service Worker zur\u00fcck, eine sogenannte Service Worker Registration (siehe ready und Srvice Worker Registration ). Wir nennen unsere Variable deshalb swReg (Zeile 43 ). Die subscribe() -Funktion wird in Zeile 52 aufgerufen. Wir haben nun eine neue Subscription erstellt. Eine solche Subscription enth\u00e4lt den Endpunkt ( Push-API Endpunkt in der Abbildung ganz oben) des In-Browser Push Servers , an den die Push-Nachrichten gesendet werden und der f\u00fcr eine neue Push-Nachricht das push -Ereignis beim Service Worker ausl\u00f6st. Mit der Kenntnis des Endpunktes kann nun aber jede beliebige Anwendung eine Push-Nachricht an den In-Browser Push Server senden. Damit kann es passieren, dass Push-Nachrichten erstellt werden, die gar nicht von dem eigenen Backend kommen. Deshalb m\u00fcssen wir diese Informationen \u00fcber den Endpunkt sch\u00fctzen . Schutz der Subscription \u00b6 Der subscribe() -Methode k\u00f6nnen Optionen (als JavaScript-Objekt) \u00fcbergeben werden, welche zwei Eigenschaften enthalten k\u00f6nnen: userVisibleOnly ; kann true oder false sein. Wenn true , dann k\u00f6nnen nur Nachrichten gesendet werden, die \"sichtbar\" f\u00fcr den User sind, d.h. es k\u00f6nnen keine Aktionen (Java-Skripte o.\u00e4.) als Nachrichten gesendet werden und applicationServerKey : das ist ein Base64-ArrayBuffer, der einen Schl\u00fcssel enth\u00e4lt. Das Vorgehen daf\u00fcr ist z.B. hier , aber auch hier gut beschrieben. Die Grundidee dabei ist, dass wir sicherstellen wollen, dass nur Nachrichten, die von unserem Backend kommen, von dem In-Browser Push Server an unsere Webanwendung weitergeleitet werden. Dazu m\u00fcssen wir unser Backend erweitern. Backend erweitern \u00b6 Um unser Backend f\u00fcr das Senden von Push-Nachrichten einzurichten, ben\u00f6tigen wir das Modul web-push . Wir wechesln im Terminal in unseren Backend-Ordner und f\u00fchren dort npm install --save web-push aus. Die --save -Option wird seit npm 5.0.0 nicht mehr ben\u00f6tigt. Die Abh\u00e4ngigkeiten werden auch so in der package.json gespeichert. In diese package.json des Backends f\u00fcgen wir ein weiteres script hinzu: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"web-push\" : \"web-push\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/jfreiheit/IKT-PWA-Backend.git\" }, \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"dotenv\" : \"^16.0.0\" , \"express\" : \"^4.18.0\" , \"gridfs-stream\" : \"^1.1.1\" , \"mongoose\" : \"^6.3.1\" , \"multer\" : \"^1.4.4\" , \"multer-gridfs-storage\" : \"^5.0.2\" , \"web-push\" : \"^3.5.0\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Das erm\u00f6glicht uns, npm run web-push auszuf\u00fchren. Das f\u00fchrt allerdings zu einem Fehler, zeigt uns aber an, welche Optionen wir nutzen k\u00f6nnten: Usage: web-push send-notification --endpoint = <url> [ --key = <browser key> ] [ --auth = <auth secret> ] [ --payload = <message> ] [ --ttl = <seconds> ] [ --encoding = <encoding type> ] [ --vapid-subject = <vapid subject> ] [ --vapid-pubkey = <public key url base64> ] [ --vapid-pvtkey = <private key url base64> ] [ --gcm-api-key = <api key> ] web-push generate-vapid-keys [ --json ] Die send-notification -Option in Verbindung mit dem endpoint werden wir sp\u00e4ter verwenden, um Push-Nachrichten zu senden. Zun\u00e4chst ben\u00f6tigen wir den \u00f6ffentlichen und den privaten Schl\u00fcssel zur Verschl\u00fcsselung der Kommunikation mit dem In-Browser Push Server . Dazu verwenden wir die Option generate-vapid-keys und geben in das Terminal npm run web-push generate-vapid-keys ein. Wir erhalten eine Ausgabe in der Form ======================================= Public Key: BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY Private Key: TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4 ======================================= Public Key in der app.js \u00b6 Wir kopieren zun\u00e4chst den \u00f6ffentlichen ( public ) Schl\u00fcssel und speichern in in unsere app.js der Webanwendung: /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; swReg . pushManager . subscribe ({ userVisibleOnly : true , }); } else { // already subscribed } }); } Hier k\u00f6nnen wir auch schonmal die Option userVisibleOnly: true definieren (Zeile 54 - geschweifte Klammern nicht vergessen). Wie oben bereits erw\u00e4hnt, stellen wir den \u00f6ffentlichen Schl\u00fcssel als ein Base64- ArrayBuffer zur Verf\u00fcgung. Dazu ben\u00f6tigen wir eine Funktion urlBase64ToUint8Array(base64String) , die wir z.B. hier oder auch hier finden und die wir z.B. ebenfalls in die app.js einf\u00fcgen k\u00f6nnen (wenn Ihnen die app.js zu voll wird, k\u00f6nnen Sie sie auch in die db.js einf\u00fcgen): /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 function urlBase64ToUint8Array ( base64String ) { var padding = '=' . repeat (( 4 - base64String . length % 4 ) % 4 ); var base64 = ( base64String + padding ) . replace ( /\\-/g , '+' ) . replace ( /_/g , '/' ); var rawData = window . atob ( base64 ); var outputArray = new Uint8Array ( rawData . length ); for ( var i = 0 ; i < rawData . length ; ++ i ) { outputArray [ i ] = rawData . charCodeAt ( i ); } return outputArray ; } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }); } else { // already subscribed } }); } In Zeile 68 verwenden die neue Funktion, um den \u00f6ffentlichen Schl\u00fcssel in ein Base64-ArrayBuffer zu konvertieren und weisen diesen convertedVapidPublicKey der Eigenschaft applicationServerKey in den Optionen der subscribe() -methode zu (Zeile 71 ). Damit ist die Konfiguration der Subscription im Prinzip abgeschlossen. Allerdings m\u00fcssen wir diese Subscription nun auch noch unserem Backend mitteilen. Dazu sorgen wir zun\u00e4chst daf\u00fcr, dass die Subscription an den n\u00e4chsten then() -Block weitergegeben wird ( return swReg ) und senden diese im then() -Block an das Backend: /src/js/app.js 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); return swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }) } else { // already subscribed } }) . then ( newSub => { return fetch ( 'http://localhost:3000/subscription' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ( newSub ) }) . then ( response => { if ( response . ok ) { displayConfirmNotification (); } }) }); } Den Aufbau einer solchen POST-fetch() -Anfrage kennen wir schon. Wenn das Backend ein ok zur\u00fccksendet, dann rufen wir die displayConfirmNotatification() auf, die wir f\u00fcr Benachrichtigungen erstellt hatten. Aber diesen Endpunkt, den wir beim Backend verwenden, n\u00e4mlich POST http://localhost:3000/subscription , den m\u00fcssen wir erst noch im Backend einrichten. Neuer Endpunkt im Backend \u00b6 Wir wechseln wieder zu unserem Backend und \u00f6ffnen dort die server.js , um einen neuen Endpunkt zu definieren: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const downloadRoute = require ( './routes/download.routes' ); const deleteRoute = require ( './routes/delete.routes' ); const subscriptionRoute = require ( './routes/subscription.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/image' , uploadRoutes ); app . use ( '/download' , downloadRoute ); app . use ( '/delete' , deleteRoute ); app . use ( '/subscription' , subscriptionRoute ); app . listen ( process . env . PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ process . env . PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); Die Subscriptions wollen wir unter dem Endpunkt /subscription verwalten lassen. Wir erstellen uns eine neue Datei routes/subscription.routes.js mit routes/subscription.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const express = require ( 'express' ); const webpush = require ( 'web-push' ); const router = express . Router (); const publicVapidKey = 'BLp3BGxSyYIv3rfy07KC-saKtiCVI073LWw5Eh24gHoRGV7hhT1kVwo6gnhjrUszZguRy8b9lGroKNRy9iCUcCI' ; const privateVapidKey = '9HPDFyx8Xd3lu2ctDHGdf3TNSjDUU2nsAuwwLe2d_6A' ; router . post ( '/' , async ( req , res ) => { const subscription = req . body ; console . log ( 'subscription' , subscription ); res . status ( 201 ). json ({ message : 'subscription received' }); webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); }); module . exports = router ; Diese subscriptionRoute ist auch bereits in der server.js importiert worden (siehe dort Zeile 7 ). Bei der Implementierung sind wir vorgegangen, wie z.B. hier oder hier beschrieben. Bei den Schl\u00fcsseln m\u00fcssen Sie nat\u00fcrlich Ihre einsetzen (die mit web-push generate-vapid-keys erzeugten). Wenn wir nun das Backend ausf\u00fchren und auch die Webanwendung und auf den Button BENACHRICHTIGEN EIN klicken, dann erhalten wir eine Nachricht, die durch die displayConfirmNotification() -Methode ausgel\u00f6st wurde. Wir haben uns erfolgreich an die Push-Benachrichtigung angemeldet. Bitte beachten Sie die Ausgabe auf die Konsole im Backend, die wir durch die Zeile 10 console.log('subscription', subscription); erzeugt haben. Sie zeigt etwas in der Art: subscription { endpoint: 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , expirationTime: null, keys: { p256dh: 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , auth: 'fJRvyO_fnPXsYeDkMy_jAA' } } Das Wort subscription haben wir davor gesetzt, aber das subscription -Objekt besitzt drei Eigenschaften: endpoint : das ist genau der Endpunkt des In-Browser Push Servers (hier wegen Chrome nat\u00fcrlich irgendetwas bei Google). An diesen Endpunkt werden die Push-Notifikationen gesendet. expirationTime : spielt hier keine Rolle, ist ja auch null . Kann man nutzen, wenn man JSON Web Tokens verwendet und diesen eine Haltbarkeitsdauer zuweist. keys : das sind unsere Authentifikationsdaten beim In-Browser Push Server . Diese Daten zusammen mit dem privaten Schl\u00fcssel werden ben\u00f6tigt, um sich an dem Endpunkt zu authentifizieren. Achtung! Sie m\u00fcssen ab jetzt vermeiden, Ihren Service Worker auf unregister zu setzen. Eine Subscription existiert f\u00fcr einen Browser und auch f\u00fcr einen Service Worker! Update von Service Worker ist kein Problem, aber unregister f\u00fchrt zu Problemen - also lieber jetzt erstmal nicht mehr! Falls Sie bereits eine subscription erzeugt haben, diese aber nicht mehr verwenden wollen, dann k\u00f6nnen Sie in der app.js einmal folgenden Code ausf\u00fchren: /src/js/app.js 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 . then ( sub => { if ( sub === null ) { console . log ( 'sub==null' ) // create a new subscription let vapidPublicKey = 'BLp3BGxSyYIv3rfy07KC-saKtiCVI073LWw5Eh24gHoRGV7hhT1kVwo6gnhjrUszZguRy8b9lGroKNRy9iCUcCI' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); return swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }); } else { /* zum Testen, falls subscription bereits existierte, * aber neue erstellt werden soll */ sub . unsubscribe () . then ( () => { console . log ( 'unsubscribed()' , sub ) }) } Das bewirkt, dass die existierende subscription gel\u00f6scht wird. Haben Sie diesen Code einmal ausgef\u00fchrt, dann kommentieren Sie die Zeilen 80-83 wieder aus. beim n\u00e4chsten Mal wir die neue subscription registriert ( subscribe() ) und danach wird der (dann wieder leere) else -Zwei ausgef\u00fchrt. Push-Nachrichten senden \u00b6 Wir haben uns nun erfolgreich f\u00fcr den Empfang von Push-Nachrichten \"registriert\". Wir haben in app.js allerdings noch nicht implementiert, was passieren soll, wenn wir bereits registriert sind (siehe oben Listing von app.js Zeile // already subscribed ). Wir wollen aber trotzdem schonmal Push-Nachrichten senden. Dazu passen wir im Backend die posts.routes.js wie folgt an: posts.routes.js (Auszug) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import webpush from 'web-push' ; const publicVapidKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; const privateVapidKey = 'TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4' ; const pushSubscription = { endpoint : 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , keys : { auth : 'fJRvyO_fnPXsYeDkMy_jAA' , p256dh : 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , } }; function sendNotification () { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); // res.status(201).json({ message: 'push notification sent'}); } // POST one post router . post ( '/' , upload . single ( 'file' ), async ( req , res ) => { // req.file is the `file` file if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }); } else { console . log ( 'req.body' , req . body ); console . log ( 'req.file' , req . file ); const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . file . filename }) await newPost . save (); sendNotification (); return res . send ( newPost ); } }) Wir definieren eine Variable pushSubscription , die genau alle Werte der Subscription oben enth\u00e4lt ( expirationTime lassen wir weg). Diese Informationen holen wir uns sp\u00e4ter noch automatisch. Au\u00dferdem definieren wir eine neue Funktion sendNotification() . Darin verwenden wir aus dem web-push -Package die Funktion setVapidDetail() . Diese Funktion bekommt als ersten Parameter eine id \u00fcbergeben, typischerweise (so wie hier beschrieben) einen String beginnend mit mailto: und der E-Mail-Adresse. Als zweiten Parameter wird der \u00f6ffentliche Vapid-Schl\u00fcssel als einfacher String \u00fcbergeben und als dritter Parameter der private Vapid-Schl\u00fcssel als einfacher String. Dann kann man f\u00fcr die Nachricht einen sogenannten payload festlegen, der ein beliebiges JSON ist (kann auch ein einfacher String sein). Dieser payload ist der Inhalt der Push-Nachricht. Wir haben in diesem Fall einen title und einen content festgelegt. Das Senden der eigentlichen Nachricht an den In-Browser Push Server erfolgt mithilfe der Funktion sendNotification() aus dem web-push -Package. Dieser wird das gesamte JavaScript-Objekt pushSubscription sowie der payload \u00fcbergeben. Die Funktion sendNotification() wird also immer dann aufgerufen, wenn in der Datenbank ein neuer Post gespeichert wird. Wir k\u00f6nnen die Funktion insofern testen, als dass wir neue Daten eingeben, entweder \u00fcber Postman oder \u00fcber unsere Webanwendung \u00fcber das Formular (diese Daten landen ja auch beim Backend). Allerdings k\u00f6nnen wir uns dabei nur von der Fehlerfreiheit der Ausf\u00fchrungen \u00fcberzeugen (und im Backend erscheint im Terminal push notification sent ). Die Push-Nachricht ist nun beim In-Browser Push Server . Wir m\u00fcssen jetzt aber im Service Worker zun\u00e4chst das push -Event behandeln, um die Benachrichtigung tats\u00e4chlich im Ger\u00e4t zu erhalten. Das push -Ereignis behandeln \u00b6 Das push -Ereignis wird vom In-Browser Push Server ausgel\u00f6st, wann immer eine neue Push-Benachrichtigung dort eintrifft. Das kann ant\u00fcrlich auch dann passieren, wenn die Webanwendung geschlossen ist. Das Behandeln des push -Ereignisses ist deshalb Aufgabe des Service Workers. Wir erweitern also die sw.js um die Behandlung des push -Events: sw.js 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); Die Ereignisbehandlung im Service Worker haben wir nun schon ein paar Mal gemacht. Wir geben zuerst das event selbst einmal auf der Konsole aus. Es handelt sich um ein PushEvent . Dann erstellen wir uns Dummy- data , falls der Empfang der Push-Nachricht vom Server nicht klappen sollte. Wenn aber doch, dann schreiben wir die Variable data mit den Daten aus dem PushEvent (siehe oben im Backend payload - die Daten sollten also title und content enthalten). Wir lesen die data aus dem event -Objekt aus und wandeln diese mithilfe von JSON.parse() in ein JSON um. Dann erzeugen wir, so wie in Abschnitt Weitere Optionen f\u00fcr die Benachrichtigungen beschrieben, die Benachrichtigung. Beachten Sie noch, dass self auf den Service Worker zeigt und self.registration verwendet wird, um auf das ServiceWorkerRegistration zuzugreifen, welches \u00fcber die Methode showNotification() verf\u00fcgt. Wenn wir nun neue Daten \u00fcber das Formular eingeben, erscheint Eine Webseite \u00f6ffnen \u00b6 Jetzt fehlt eigentlich nur noch, dass wir in der Push-Benachrichtung eine Aktion vorsehen, die das \u00d6ffnen unserer Webanwendung erm\u00f6glicht. Das typische Szenario ist ja, dass die Webanwendung geschlossen ist und dass im Backend eine Daten\u00e4nderung stattfindet und wir daraufhin eine Push-Nachricht erhalten. Nun wollen wir gerne auf diese Push-Nachricht klicken und damit soll die Anwendung ge\u00f6ffnet werden, die uns das neue Datum anzeigt. Daf\u00fcr haben wir auch schon alles vorbereitet - Service Worker reagieren wir bereits auf das Ereignis, dass auf die Benachrichtigung geklickt wird: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Die confirm -Antwort erfolgt nur, wenn nach der Zulassung der Berechtigung gefragt wird. Wir behandeln die anderen F\u00e4lle. sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( 'http://localhost:8080' ); client . focus (); } else { clients . openWindow ( 'http://localhost:8080' ); } notification . close (); }) ); } }); Mit clients greift der Service Worker auf alle Fenster (Anwendungen, Browser) zu, \u00fcber die er Kontrolle hat (siehe Clients ). Die Funktion matcAll() gibt ihm alle diese Clients als ein Array zur\u00fcck. Mit der JavaScript-Funktion find() laufen wir durch das Array und geben alle die Clients (genauer vom Typ WindowClient zur\u00fcck, f\u00fcr die gilt, dass sie sichtbar - im Sinne von erreichbar - sind. Diejenigen Clients, die nicht erreichbar sind, werden gar nicht erst zur\u00fcckgegeben. F\u00fcr alle anderen gilt, dass sie entweder bereits ge\u00f6ffnet sind oder nicht. Diejenigen (Browser), die bereits ge\u00f6ffnet sind, navigieren zur URL http://localhost:8080 und die anderen werden mit dieser URL ge\u00f6ffnet. Wenn nun neue Daten eingegeben werden, dann erscheint eine Push-Notifikation und wenn wir darauf klicken, dann \u00f6ffnet sich unsere Anwendung. Eine gute M\u00f6glichkeit, das zu Testen, besteht in der Verwendung unseres Frontends, das wir f\u00fcr die Eingabe der Daten erstellt haben. Schlie\u00dfen Sie die HTW-Insta -Anwendung, \u00f6ffnen Sie das andere Frontend, geben Sie Daten ein und speichern diese. Es erscheint eine Push-Notifikation, auf die Sie klicken k\u00f6nnen und die HTW-Insta -Anwendung wird im browser mit den neuen Daten ge\u00f6ffnet. Diejenigen, die ihr Android-Ger\u00e4t anschlie\u00dfenm k\u00f6nnen, sollten es auch unbedingt dar\u00fcber probieren. Hier noch eine kleine Verbesserung davon, weil wir ja die URL hart in den Code geschrieben haben. Wir k\u00f6nnen im Backend beim Senden der Notification eine weitere Eigenschaft hinzuf\u00fcgen: sub.controller.js 20 21 22 23 24 25 26 27 28 29 30 sendNotification : () => { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' , openUrl : '/help' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); } und diese der Benachrichtigung mitgeben: sw.js 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' , openUrl : '/' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , data : { url : data . openUrl } }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); und diese Informationen dann statt der festen URL verwenden: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( notification . data . url ); client . focus (); } else { clients . openWindow ( notification . data . url ); } notification . close (); }) ); } }); Wenn Sie jetzt auf die Push-Nachricht klicken, sollte sich die help -Seite der Anwendung \u00f6ffnen. Success Wir haben zun\u00e4chst gelernt, dass Benachrichtigungen und Push-benachrichtigungen zwei grunds\u00e4tzlich verschiedene Dinge sind. Benachrichtigungen ist das, was man als Nachricht \"sieht\". Push-Notifikationen werden an den In-Browser Push Server vom Backend gesendet. Dieser Server l\u00f6st daraufhin ein push -Ereignis beim Service Worker aus, wenn die Webanwendung sich f\u00fcr den Empfang von Push-Nachrichten . registriert hat. Die Registrierung ist etwas aufwendig, muss aber nur einmal erledigt werden. Mit den Push-Nachrichten kennen wir nun eine weitere progressive Funktionalit\u00e4t. Bis dahin waren Push-Nachrichten nur nativen Apps vorbehalten.","title":"Push Notifications"},{"location":"pushnotes/#push-notifications","text":"Hint Aktueller Stand vor Push Notifications: Frontend Backend Collection post Collection post.files Collection post.chunks Push Notifications sind sinnvoll, um die Nutzerin einer App \u00fcber Neuigkeiten zu informieren, sogar dann, wenn die Anwendung (und der Browser!) geschlossen ist (sind). Mit Push Notifications k\u00f6nnen Nutzerinnen wieder \"zur\u00fcck an die App geholt\" werden, d.h. mithilfe von Push Notifications kann man daf\u00fcr sorgen, dass Nutzerinnen die App wieder \u00f6ffnen, um sich die Neuigkeiten genauer anzuschauen. Die Neuigkeiten k\u00f6nnen neue Tweets, E-Mails, Nachrichten, Anrufe usw. sein. Das Prinzip, das f\u00fcr die Push-Benachrichtungen umgesetzt wird, sieht auf den ersten Blick etwas kompliziert aus: Im Zentrum stehen zun\u00e4chst die Webanwendung und der Service Worker. Die Webanwendung meldet sich bei den Push-Benachrichtigungen an und der Service Worker verwaltet diese. Jeder Browser hat eine eigenen \"eingebauten\" Push Server . Eine Push-Anmeldung ( Push Subscription ) erlaubt den Zugriff auf einen Push-API-Endpunkt auf den Push-Server. Die eigentliche Push-Benachrichtigung kommt jedoch vom eigenen Server. Er sendet die Push-Nachricht an den In-Browser Push Server , dieser l\u00f6st damit ein push -Ereignis beim Service Worker aus und der Service Worker schickt die Push-Benachrichtigung an die Webanwendung. Wir schauen uns im Folgenden alle diese Schritte im Detail an.","title":"Push Notifications"},{"location":"pushnotes/#anzeigen-von-benachrichtigungen","text":"Wir beginnen mit dem Anzeigen (der Darstellung) von Push-Benachrichtigungen in einer Webanwendung. Dieser Abschnitt hat noch nichts mit dem push -Ereignis zu tun! Wir ben\u00f6tigen zum Anzeigen nicht mal einen Service Worker. Es geht aber auch \u00fcber den Service Worker - und das wird sp\u00e4ter auch bei der Verwendung der Push-API notwendig. Die hier verwendete Notification-API wird von fast allen Browsern unterst\u00fctzt. Hier ist auch eine gute \u00dcbersicht dar\u00fcber, wie diese Notification-API verwendet wird.","title":"Anzeigen von Benachrichtigungen"},{"location":"pushnotes/#benachrichtigungen-einschalten","text":"Bevor wir das Anzeigen von (Push-)Benachrichtigungen betrachten, m\u00fcssen wir diese zuerst erlauben. In unserer Anwendung gibt es dazu den Button BENACHRICHTIGUNGEN EIN . In der index.html ist dieser Button zwei Mal definiert, einmal f\u00fcr einen schmalen Viewport und einmal f\u00fcr einen breiten. F\u00fcr beide Varianten sieht die Implementierung so aus: < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > F\u00fcr einen schmalen Viewport ist der Button dann unter dem Hamburger Men\u00fc in der linken oberen Ecke erreichbar. Beiden Buttons ist die CSS-Klasse enable-notifications zugewiesen. Wir sorgen zuerst daf\u00fcr, dass dieser Button nur angezeigt wird, wenn der Browser die Notification-API unterst\u00fctzt. Wenn nicht, dann w\u00e4re der Button funktionslos und wir br\u00e4uchten ihn nicht. Wir schalten ihn deshalb in der app.css zun\u00e4chst im Standartwert aus: /src/css/app.css 1 2 3 4 5 6 7 8 9 10 11 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } . enable-notifications { display : none ; } In der app.js pr\u00fcfen wir, ob der Browser die Notification-API unterst\u00fctzt und schalten f\u00fcr diesen Fall die Buttons wieder ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // notifications granted } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } In Zeile 1 erstellen wir uns eine Variable enableNotificationsButtons , die auf ein Array aller Buttons mit der CSS-Klasse enable-notifications zeigt. In Zeile 25 pr\u00fcfen wir nun, ob der Browser die Notification -API unterst\u00fctzt. Wenn ja, dann schalten wir alle Buttons aus dem enableNotificationsButtons -Array wieder auf sichtbar (von display: none auf display: inline-block ) und wir melden jeden dieser Buttons an die Ereignisbehandlung des click -Ereignisses an (Zeile 28 ). Die Behandlung des click -Ereignisses erfolgt in der Methode askForNotificationPermission() , die in den Zeilen 14-23 definiert ist. Da diese Methode nur dann aufgerufen wird, wenn der Browser die Notification -API unterst\u00fctzt, kann diese API darin verwendet werden. Mit der Funktion requestPermission() wird die Nutzerin gefragt, ob sie Benachrichtigungen zulassen m\u00f6chte. Diese Methode gibt ein Promise zur\u00fcck, dessen result die Werte granted , denied oder default haben kann. Werden Benachrichtigungen nicht erlaubt (Zeile 17 ), k\u00f6nnen wir nichts weiter tun. Die Nutzerin wird dann auch nicht erneut gefragt. Die Benachrichtigungen bleiben f\u00fcr die Webanwendung ausgeschaltet (Zeile 18 ). Wenn wir die Anwendung nun ausf\u00fchren (Reload nach Application --> Storage --> Clear Storage oder die Versionsnummern der Caches im Service Worker \u00e4ndern), dann erhalten wir nach dem Klicken auf den BENACHRICHTIGUNGEN EIN -Button folgende Abfrage: Wenn wir auf Zulassen klicken, dann erscheint in der Konsole User Chaice granted (Zeile 16 ). Beachten Sie, dass Sie nicht erneut gefragt werden, ob Benachrichtungen zugelassen werden sollen oder nicht. Erneutes Klicken auf den Button bewirkt (selbst nach einem Reload der Anwendung) keine erneute Abfrage. Deshalb w\u00e4re es eigentlich auch sinnvoll, den Button wieder zu verstecken, d.h. auf display: none zu setzen. Um die Benachrichtigungen zu verwalten, k\u00f6nnen Sie in Chrome chrome://settings/content/notifications eingeben. Dort sehen Sie eine Auflistung aller Webanwendungen, die Sie besucht haben und die von Ihnen eine Erlaubnis zur Benachrichtung gewollt haben. Sie k\u00f6nnen dort die jeweiligen Einstellungen wieder \u00e4nder, z.B. auch f\u00fcr die hier entwickelte Anwendung.","title":"Benachrichtigungen einschalten"},{"location":"pushnotes/#benachrichtigungen-anzeigen","text":"Jetzt erstellen wir unsere erste Benachrichtigung mithilfe der Notification -API. Die einfachste Form der Notification wird durch die Verwendung des parametrisierten Konstruktors von Notification ( new Notification('Nachricht') ) erstellt. Wir f\u00fcgen die app.js eine solche einfache Benachrichtigung f\u00fcr den Fall, dass Benachrichtigungen erlaubt werden, ein: /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { new Notification ( 'Successfully subscribed!' ); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { displayConfirmNotification (); } }); } if ( 'Notification' in window ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Wenn wir die Anwendung nun erneut ausf\u00fchren und auf den Button klicken, dann werden wir zwar nicht erneut gefragt, ob wir Benachrichtigungen zulassen oder blockieren wollen, aber da wir Benachrichtungen bereits zugelassen haben, erscheint nun die folgende Benachrichtigung: Der einfache Aufruf des Notification -Konstruktors mit einer einfachen Nachricht (Zeile 15 ) erzeugt auch die einfachste Form der Benachrichtigung. Dem Konstruktor lassen sich aber als zweiten Parameter noch JavaScript-Objekt f\u00fcr options \u00fcbergeben. Darin kann ein weiterer Text ( body ) definiert werden und z.B. auch ein eigenes icon . Wir betrachten das sp\u00e4ter noch etwas genauer, erstmal nur eine weitere Nachricht: /src/js/app.js 14 15 16 17 function displayConfirmNotification () { let options = { body : 'You successfully subscribed to our Notification service!' }; new Notification ( 'Successfully subscribed!' , options ); } ergibt dann die Benachrichtigung:","title":"Benachrichtigungen anzeigen"},{"location":"pushnotes/#benachrichtigungen-im-service-worker-erstellen","text":"Im jetzigen Stand werden die Benachrichtungen aus der Webanwendung heraus erstellt. Das ist auch v\u00f6llig ok. Die Notification -API l\u00e4sst sich sowohl in der Webanwendung verwenden, als auch im Service Worker. Da sp\u00e4ter aber die Push-Benachrichtigungen vom Service Worker verwaltet werden, wechseln wir jetzt auch f\u00fcr die einfachen Benachrichtigungen zum Service Worker, d.h. wir lassen die Benachrichtigungen nun nicht mehr durch die Webanwendung erstellen, sondern durch den Service Worker. Dazu passen wir unsere app.js wie folgt an: /src/js/app.js 14 15 16 17 18 19 20 21 22 23 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Der Service Worker besitzt eine eigene Funktion showNotification() , die intern ein Notification -Objekt erzeugt und der die gleiche Parameterliste \u00fcbergeben werden kann, wie dem Notification -Konstruktor. Nach Reload und Klicken des Buttons sehen wir nun folgende Benachrichtigung: Die Nachricht wurde extra um (from SW) erg\u00e4nzt, um kenntlich zu machen, dass die Benachrichtigung nun vom Service Worker angesto\u00dfen wird.","title":"Benachrichtigungen im Service Worker erstellen"},{"location":"pushnotes/#weitere-optionen-fur-die-benachrichtigungen","text":"Benachrichtigungen sind ein System-Feature , d.h. ihre Gestaltung hat etwas mit dem Ger\u00e4t zu tun, in dem diese Benachrichtigungen erscheinen. Es ist kein Browser-Feature . Benachrichtigungen sehen auf dem Mac anders aus, als unter Windows oder unter Linux und auf dem iPhone anders, als auf einem Android-Ger\u00e4t. Es gibt ziemlich viele m\u00f6gliche Optionen f\u00fcr eine solche Benachrichtigung, aber die unterschiedlichen Systeme beachten diese Optionen mal mehr und mal weniger. Wir werden hier der Vollst\u00e4ndigkeit halber einige Optionen benennen, aber am meisten sieht man von diesen Optionen auf einem Android-Ger\u00e4t. /src/js/app.js 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } Auf dem Mac hat neben der icon -Option nur noch die actions -Option eine Auswirkung. Die Benachrichtigung sieht nun so aus (auf dem Mac): Man sieht das icon und unter dem Icon wird durch das Hovern mit der Maus ein Men\u00fc sichtbar, das die definierten actions enth\u00e4lt. mit image kann die gesamte Benachrichtigung mit einem Bild unterlegt werden (sieht man bei Android), mit vibrate kann die Benachrichtigung durch das Vibrieren des Ger\u00e4tes signalisiert werden. In unserem Beispiel vibriert das Ger\u00e4t 100 Millisekunden, dann ist 50 Millisekunden Pause und dann vibriert es nochmal f\u00fcr 200 Millisekunden. mit tag k\u00f6nnen Benachrichtigungen mit einer Art id versehen werden. Wenn meherere Benachrichtigungen mit demselben tag vorliegen, dann wird nur die zuletzt eingegangene Benachrichtigung angezeigt. Ansonsten erscheinen alle Benachrichtigungen untereinander. renotify geh\u00f6rt zu tag . Wenn der Wert true ist, dann wird die Nutzerin auch dann informiert, wenn eine neue Nachricht zum selben tag angekommen ist. Sonst nicht. Eine \u00dcbersicht \u00fcber alle Optionen findet sich hier . Wenn Sie ein Android-Ger\u00e4t besitzen, dann k\u00f6nnen Sie es an den Rechner andocken (USB-Anschluss - dazu m\u00fcssen Sie den USB-Zugriff erlauben) und in den Devloper Tools rechts oben unter den drei senkrechten Punkten den Men\u00fcpunkt More tools und dort Remote devices ausw\u00e4hlen und k\u00f6nnen dann ausprobieren, wie die Benachrichtigungen unter einem Android-Ger\u00e4t aussehen. Anleitung f\u00fcr Edge , Anleitung f\u00fcr Chrome , Anleitung f\u00fcr Firefox . Auf die unter actions definierten Aktionen kann innerhalb des Service Workers sogar reagiert werden: /sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Der Service Worker kann das notificationclick -Ereignis behandeln. Ebenso kann der Service Worker das Ereignis behandeln, das ausgel\u00f6st wird, wenn eine Benachrichtigung geschlossen wird: /sw.js 155 156 157 self . addEventListener ( 'notificationclose' , event => { console . log ( 'notification was closed' , event ); }); Wir wollen uns aber mit den Benachrichtigungen gar nicht weiter im Detail besch\u00e4ftigen, sondern lieber mit Push-Notationen. Kenntnisse \u00fcber Benachrichtigungen sind aber eine gute Voraussetzung, um zu den Push-Notifikationen \u00fcberzugehen.","title":"Weitere Optionen f\u00fcr die Benachrichtigungen"},{"location":"pushnotes/#push-benachrichtigungen","text":"Das Konzept der Benachrichtigung wird auch bei den Push-Nachrichten verwendet. Um Push-Nachrichten zu empfangen, muss man sich jedoch zun\u00e4chst f\u00fcr den Empfang registrieren (siehe in der Abbildung oben neue Push Subscription erstellen ).","title":"Push-Benachrichtigungen"},{"location":"pushnotes/#anmelden-an-push-nachrichten-subscription","text":"Die Anmeldung an die Push-Nachrichten geschieht in der Webanwendung. Wir passen dazu unsere app.js an und f\u00fcgen eine Funktion configurePushSubscription() ein. /src/js/app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 let enableNotificationsButtons = document . querySelectorAll ( '.enable-notifications' ); if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then (() => { console . log ( 'service worker registriert' ) }) . catch ( err => { console . log ( err ); } ); } function displayConfirmNotification () { if ( 'serviceWorker' in navigator ) { let options = { body : 'You successfully subscribed to our Notification service!' , icon : '/src/images/icons/fiw96x96.png' , image : '/src/images/htw-sm.jpg' , lang : 'de-DE' , vibrate : [ 100 , 50 , 200 ], badge : '/src/images/icons/fiw96x96.png' , tag : 'confirm-notification' , renotify : true , actions : [ { action : 'confirm' , title : 'Ok' , icon : '/src/images/icons/fiw96x96.png' }, { action : 'cancel' , title : 'Cancel' , icon : '/src/images/icons/fiw96x96.png' }, ] }; navigator . serviceWorker . ready . then ( sw => { sw . showNotification ( 'Successfully subscribed (from SW)!' , options ); }); } } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } navigator . serviceWorker . ready . then ( sw => { return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription } else { // already subscribed } }); } function askForNotificationPermission () { Notification . requestPermission ( result => { console . log ( 'User choice' , result ); if ( result !== 'granted' ) { console . log ( 'No notification permission granted' ); } else { // displayConfirmNotification(); configurePushSubscription (); } }); } if ( 'Notification' in window && 'serviceWorker' in navigator ) { for ( let button of enableNotificationsButtons ) { button . style . display = 'inline-block' ; button . addEventListener ( 'click' , askForNotificationPermission ); } } Die Methode configurePushSubscription() wird nun anstelle von displayConfirmNotifivcation() in der askForNotificationPermission() aufgerufen (Zeilen 62-63 ). Das liegt daran, dass die Notification.requestPermission() -Funktion auch f\u00fcr die Erlaubnis von Push-Nachrichten verwendet wird. Mit der Erlaubnis von Benachrichtigungen wird also auch gleichzeitig die Erlaubnis von Push-Nachrichten erteilt. Da die Push-Benachrichtigungen \u00fcber den Service Worker verwaltet werden, wird in configurePushSubscription() zun\u00e4chst gepr\u00fcft, ob der Browser \u00fcberhaupt Service Worker unterst\u00fctzt (Zeile 39 ). Wenn nicht, wird die Methode sofort verlassen (Zeile 40 ). Da wir aber auch in die Abfrage nach der Notification-API (Zeile 68 ) noch die Abfrage nach dem serviceWorker hinzugef\u00fcgt haben, w\u00e4re der Button BENACHRICHTUNGEN EIN gar nicht sichtbar, wenn der Service Worker nicht im Browser unterst\u00fctzt w\u00fcrde. Dann w\u00fcrde auch nie die Funktion configurePushSubscription() aufgerufen. Wir lassen Zeilen 39-41 trotzdem sicherheitshalber drin. In Zeile 45 verwendet der Service Worker die PushManager-API . Eine der drei Methoden, die diese API zur Verf\u00fcgung stellt, ist die getSubscription() -Methode. Diese Methode gibt eine Promise mit einer existierenden Subscription zur\u00fcck. Wenn keine Subscription existiert, ist der R\u00fcckgabewert null . Ist der R\u00fcckgabewert null , dann erzeugen wir eine neue Subscription (Zeile 49 ).","title":"Anmelden an Push-Nachrichten (Subscription)"},{"location":"pushnotes/#erzeugen-einer-neuen-subscription","text":"Das Erezugen einer Subscription ist zun\u00e4chst einfach. Daf\u00fcr gibt es in der PushManager-API die Methode subscribe() . /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription swReg . pushManager . subscribe (); } else { // already subscribed } }); } Da wir in dem zweiten then() -Block keinen Zugriff mehr auf die Variable sw haben (wir geben die Promise von getSubscription() zur\u00fcck, nicht aber sw ), ben\u00f6tigen wir eine Variable, in der wir die Referenz auf den Service Worker speichern und auf die wir in der gesamten Funktion Zugriff haben. Die Promise navigator.serviceWorker.ready gibt etwas mehr als den Service Worker zur\u00fcck, eine sogenannte Service Worker Registration (siehe ready und Srvice Worker Registration ). Wir nennen unsere Variable deshalb swReg (Zeile 43 ). Die subscribe() -Funktion wird in Zeile 52 aufgerufen. Wir haben nun eine neue Subscription erstellt. Eine solche Subscription enth\u00e4lt den Endpunkt ( Push-API Endpunkt in der Abbildung ganz oben) des In-Browser Push Servers , an den die Push-Nachrichten gesendet werden und der f\u00fcr eine neue Push-Nachricht das push -Ereignis beim Service Worker ausl\u00f6st. Mit der Kenntnis des Endpunktes kann nun aber jede beliebige Anwendung eine Push-Nachricht an den In-Browser Push Server senden. Damit kann es passieren, dass Push-Nachrichten erstellt werden, die gar nicht von dem eigenen Backend kommen. Deshalb m\u00fcssen wir diese Informationen \u00fcber den Endpunkt sch\u00fctzen .","title":"Erzeugen einer neuen Subscription"},{"location":"pushnotes/#schutz-der-subscription","text":"Der subscribe() -Methode k\u00f6nnen Optionen (als JavaScript-Objekt) \u00fcbergeben werden, welche zwei Eigenschaften enthalten k\u00f6nnen: userVisibleOnly ; kann true oder false sein. Wenn true , dann k\u00f6nnen nur Nachrichten gesendet werden, die \"sichtbar\" f\u00fcr den User sind, d.h. es k\u00f6nnen keine Aktionen (Java-Skripte o.\u00e4.) als Nachrichten gesendet werden und applicationServerKey : das ist ein Base64-ArrayBuffer, der einen Schl\u00fcssel enth\u00e4lt. Das Vorgehen daf\u00fcr ist z.B. hier , aber auch hier gut beschrieben. Die Grundidee dabei ist, dass wir sicherstellen wollen, dass nur Nachrichten, die von unserem Backend kommen, von dem In-Browser Push Server an unsere Webanwendung weitergeleitet werden. Dazu m\u00fcssen wir unser Backend erweitern.","title":"Schutz der Subscription"},{"location":"pushnotes/#backend-erweitern","text":"Um unser Backend f\u00fcr das Senden von Push-Nachrichten einzurichten, ben\u00f6tigen wir das Modul web-push . Wir wechesln im Terminal in unseren Backend-Ordner und f\u00fchren dort npm install --save web-push aus. Die --save -Option wird seit npm 5.0.0 nicht mehr ben\u00f6tigt. Die Abh\u00e4ngigkeiten werden auch so in der package.json gespeichert. In diese package.json des Backends f\u00fcgen wir ein weiteres script hinzu: package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 { \"name\" : \"backend\" , \"version\" : \"1.0.0\" , \"description\" : \"Backend REST-API\" , \"main\" : \"server.js\" , \"scripts\" : { \"watch\" : \"nodemon ./server.js\" , \"test\" : \"echo \\\"Error: no test specified\\\" && exit 1\" , \"web-push\" : \"web-push\" }, \"keywords\" : [ \"rest\" , \"api\" , \"backend\" , \"mongodb\" ], \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/jfreiheit/IKT-PWA-Backend.git\" }, \"author\" : \"J. Freiheit\" , \"license\" : \"ISC\" , \"dependencies\" : { \"cors\" : \"^2.8.5\" , \"dotenv\" : \"^16.0.0\" , \"express\" : \"^4.18.0\" , \"gridfs-stream\" : \"^1.1.1\" , \"mongoose\" : \"^6.3.1\" , \"multer\" : \"^1.4.4\" , \"multer-gridfs-storage\" : \"^5.0.2\" , \"web-push\" : \"^3.5.0\" }, \"devDependencies\" : { \"nodemon\" : \"^2.0.16\" } } Das erm\u00f6glicht uns, npm run web-push auszuf\u00fchren. Das f\u00fchrt allerdings zu einem Fehler, zeigt uns aber an, welche Optionen wir nutzen k\u00f6nnten: Usage: web-push send-notification --endpoint = <url> [ --key = <browser key> ] [ --auth = <auth secret> ] [ --payload = <message> ] [ --ttl = <seconds> ] [ --encoding = <encoding type> ] [ --vapid-subject = <vapid subject> ] [ --vapid-pubkey = <public key url base64> ] [ --vapid-pvtkey = <private key url base64> ] [ --gcm-api-key = <api key> ] web-push generate-vapid-keys [ --json ] Die send-notification -Option in Verbindung mit dem endpoint werden wir sp\u00e4ter verwenden, um Push-Nachrichten zu senden. Zun\u00e4chst ben\u00f6tigen wir den \u00f6ffentlichen und den privaten Schl\u00fcssel zur Verschl\u00fcsselung der Kommunikation mit dem In-Browser Push Server . Dazu verwenden wir die Option generate-vapid-keys und geben in das Terminal npm run web-push generate-vapid-keys ein. Wir erhalten eine Ausgabe in der Form ======================================= Public Key: BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY Private Key: TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4 =======================================","title":"Backend erweitern"},{"location":"pushnotes/#public-key-in-der-appjs","text":"Wir kopieren zun\u00e4chst den \u00f6ffentlichen ( public ) Schl\u00fcssel und speichern in in unsere app.js der Webanwendung: /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; swReg . pushManager . subscribe ({ userVisibleOnly : true , }); } else { // already subscribed } }); } Hier k\u00f6nnen wir auch schonmal die Option userVisibleOnly: true definieren (Zeile 54 - geschweifte Klammern nicht vergessen). Wie oben bereits erw\u00e4hnt, stellen wir den \u00f6ffentlichen Schl\u00fcssel als ein Base64- ArrayBuffer zur Verf\u00fcgung. Dazu ben\u00f6tigen wir eine Funktion urlBase64ToUint8Array(base64String) , die wir z.B. hier oder auch hier finden und die wir z.B. ebenfalls in die app.js einf\u00fcgen k\u00f6nnen (wenn Ihnen die app.js zu voll wird, k\u00f6nnen Sie sie auch in die db.js einf\u00fcgen): /src/js/app.js 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 function urlBase64ToUint8Array ( base64String ) { var padding = '=' . repeat (( 4 - base64String . length % 4 ) % 4 ); var base64 = ( base64String + padding ) . replace ( /\\-/g , '+' ) . replace ( /_/g , '/' ); var rawData = window . atob ( base64 ); var outputArray = new Uint8Array ( rawData . length ); for ( var i = 0 ; i < rawData . length ; ++ i ) { outputArray [ i ] = rawData . charCodeAt ( i ); } return outputArray ; } function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }); } else { // already subscribed } }); } In Zeile 68 verwenden die neue Funktion, um den \u00f6ffentlichen Schl\u00fcssel in ein Base64-ArrayBuffer zu konvertieren und weisen diesen convertedVapidPublicKey der Eigenschaft applicationServerKey in den Optionen der subscribe() -methode zu (Zeile 71 ). Damit ist die Konfiguration der Subscription im Prinzip abgeschlossen. Allerdings m\u00fcssen wir diese Subscription nun auch noch unserem Backend mitteilen. Dazu sorgen wir zun\u00e4chst daf\u00fcr, dass die Subscription an den n\u00e4chsten then() -Block weitergegeben wird ( return swReg ) und senden diese im then() -Block an das Backend: /src/js/app.js 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 function configurePushSubscription () { if ( ! ( 'serviceWorker' in navigator )) { return } let swReg ; navigator . serviceWorker . ready . then ( sw => { swReg = sw ; return sw . pushManager . getSubscription (); }) . then ( sub => { if ( sub === null ) { // create a new subscription let vapidPublicKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); return swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }) } else { // already subscribed } }) . then ( newSub => { return fetch ( 'http://localhost:3000/subscription' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }, body : JSON . stringify ( newSub ) }) . then ( response => { if ( response . ok ) { displayConfirmNotification (); } }) }); } Den Aufbau einer solchen POST-fetch() -Anfrage kennen wir schon. Wenn das Backend ein ok zur\u00fccksendet, dann rufen wir die displayConfirmNotatification() auf, die wir f\u00fcr Benachrichtigungen erstellt hatten. Aber diesen Endpunkt, den wir beim Backend verwenden, n\u00e4mlich POST http://localhost:3000/subscription , den m\u00fcssen wir erst noch im Backend einrichten.","title":"Public Key in der app.js"},{"location":"pushnotes/#neuer-endpunkt-im-backend","text":"Wir wechseln wieder zu unserem Backend und \u00f6ffnen dort die server.js , um einen neuen Endpunkt zu definieren: server.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 const express = require ( 'express' ); const cors = require ( 'cors' ); const postsRoutes = require ( './routes/posts.routes' ); const uploadRoutes = require ( './routes/upload.routes' ); const downloadRoute = require ( './routes/download.routes' ); const deleteRoute = require ( './routes/delete.routes' ); const subscriptionRoute = require ( './routes/subscription.routes' ); const mongoose = require ( 'mongoose' ); require ( 'dotenv' ). config (); const app = express (); app . use ( express . json ()); app . use ( cors ()); app . use ( '/posts' , postsRoutes ); app . use ( '/image' , uploadRoutes ); app . use ( '/download' , downloadRoute ); app . use ( '/delete' , deleteRoute ); app . use ( '/subscription' , subscriptionRoute ); app . listen ( process . env . PORT , ( error ) => { if ( error ) { console . log ( error ); } else { console . log ( `server running on http://localhost: ${ process . env . PORT } ` ); } }); // connect to mongoDB mongoose . connect ( process . env . DB_CONNECTION , { useNewUrlParser : true , useUnifiedTopology : true }); const db = mongoose . connection ; db . on ( 'error' , console . error . bind ( console , 'connection error:' )); db . once ( 'open' , () => { console . log ( 'connected to DB' ); }); Die Subscriptions wollen wir unter dem Endpunkt /subscription verwalten lassen. Wir erstellen uns eine neue Datei routes/subscription.routes.js mit routes/subscription.routes.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const express = require ( 'express' ); const webpush = require ( 'web-push' ); const router = express . Router (); const publicVapidKey = 'BLp3BGxSyYIv3rfy07KC-saKtiCVI073LWw5Eh24gHoRGV7hhT1kVwo6gnhjrUszZguRy8b9lGroKNRy9iCUcCI' ; const privateVapidKey = '9HPDFyx8Xd3lu2ctDHGdf3TNSjDUU2nsAuwwLe2d_6A' ; router . post ( '/' , async ( req , res ) => { const subscription = req . body ; console . log ( 'subscription' , subscription ); res . status ( 201 ). json ({ message : 'subscription received' }); webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); }); module . exports = router ; Diese subscriptionRoute ist auch bereits in der server.js importiert worden (siehe dort Zeile 7 ). Bei der Implementierung sind wir vorgegangen, wie z.B. hier oder hier beschrieben. Bei den Schl\u00fcsseln m\u00fcssen Sie nat\u00fcrlich Ihre einsetzen (die mit web-push generate-vapid-keys erzeugten). Wenn wir nun das Backend ausf\u00fchren und auch die Webanwendung und auf den Button BENACHRICHTIGEN EIN klicken, dann erhalten wir eine Nachricht, die durch die displayConfirmNotification() -Methode ausgel\u00f6st wurde. Wir haben uns erfolgreich an die Push-Benachrichtigung angemeldet. Bitte beachten Sie die Ausgabe auf die Konsole im Backend, die wir durch die Zeile 10 console.log('subscription', subscription); erzeugt haben. Sie zeigt etwas in der Art: subscription { endpoint: 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , expirationTime: null, keys: { p256dh: 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , auth: 'fJRvyO_fnPXsYeDkMy_jAA' } } Das Wort subscription haben wir davor gesetzt, aber das subscription -Objekt besitzt drei Eigenschaften: endpoint : das ist genau der Endpunkt des In-Browser Push Servers (hier wegen Chrome nat\u00fcrlich irgendetwas bei Google). An diesen Endpunkt werden die Push-Notifikationen gesendet. expirationTime : spielt hier keine Rolle, ist ja auch null . Kann man nutzen, wenn man JSON Web Tokens verwendet und diesen eine Haltbarkeitsdauer zuweist. keys : das sind unsere Authentifikationsdaten beim In-Browser Push Server . Diese Daten zusammen mit dem privaten Schl\u00fcssel werden ben\u00f6tigt, um sich an dem Endpunkt zu authentifizieren. Achtung! Sie m\u00fcssen ab jetzt vermeiden, Ihren Service Worker auf unregister zu setzen. Eine Subscription existiert f\u00fcr einen Browser und auch f\u00fcr einen Service Worker! Update von Service Worker ist kein Problem, aber unregister f\u00fchrt zu Problemen - also lieber jetzt erstmal nicht mehr! Falls Sie bereits eine subscription erzeugt haben, diese aber nicht mehr verwenden wollen, dann k\u00f6nnen Sie in der app.js einmal folgenden Code ausf\u00fchren: /src/js/app.js 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 . then ( sub => { if ( sub === null ) { console . log ( 'sub==null' ) // create a new subscription let vapidPublicKey = 'BLp3BGxSyYIv3rfy07KC-saKtiCVI073LWw5Eh24gHoRGV7hhT1kVwo6gnhjrUszZguRy8b9lGroKNRy9iCUcCI' ; let convertedVapidPublicKey = urlBase64ToUint8Array ( vapidPublicKey ); return swReg . pushManager . subscribe ({ userVisibleOnly : true , applicationServerKey : convertedVapidPublicKey , }); } else { /* zum Testen, falls subscription bereits existierte, * aber neue erstellt werden soll */ sub . unsubscribe () . then ( () => { console . log ( 'unsubscribed()' , sub ) }) } Das bewirkt, dass die existierende subscription gel\u00f6scht wird. Haben Sie diesen Code einmal ausgef\u00fchrt, dann kommentieren Sie die Zeilen 80-83 wieder aus. beim n\u00e4chsten Mal wir die neue subscription registriert ( subscribe() ) und danach wird der (dann wieder leere) else -Zwei ausgef\u00fchrt.","title":"Neuer Endpunkt im Backend"},{"location":"pushnotes/#push-nachrichten-senden","text":"Wir haben uns nun erfolgreich f\u00fcr den Empfang von Push-Nachrichten \"registriert\". Wir haben in app.js allerdings noch nicht implementiert, was passieren soll, wenn wir bereits registriert sind (siehe oben Listing von app.js Zeile // already subscribed ). Wir wollen aber trotzdem schonmal Push-Nachrichten senden. Dazu passen wir im Backend die posts.routes.js wie folgt an: posts.routes.js (Auszug) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import webpush from 'web-push' ; const publicVapidKey = 'BCGnTHY7-DB07ySIj5hAYQBd5J3lXskcLMuAkqTTkneKB21tXyUP7uCaWJUjIPRpfecn73lMHpwANFw-0LsXEtY' ; const privateVapidKey = 'TNVDKlHHGBZ66aKyCTxru630t6RL_xictOKA3n0lgM4' ; const pushSubscription = { endpoint : 'https://fcm.googleapis.com/fcm/send/cMdUtRW4H9o:APA91bG8p3o-Ta31e1yMrqdvonJCyf3xbPfIFtpS2UbX9PcJwkeNKoQjZhEAWo5nad7eR3NgRQR8__3wk591j7DKWJLGzwWgJYm_GgipU0gTvMRpWA6TpmCtrD9OCo1mB0jZQrTj5a_5' , keys : { auth : 'fJRvyO_fnPXsYeDkMy_jAA' , p256dh : 'BDhH_TBG4l-PU3wJnT6wHqsPeYusbPqOiw7VvJvupXDC3JZOIIOiz2Ml8ZaZD9wJuGnXs9BFqINEzrFStsjkk6c' , } }; function sendNotification () { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); // res.status(201).json({ message: 'push notification sent'}); } // POST one post router . post ( '/' , upload . single ( 'file' ), async ( req , res ) => { // req.file is the `file` file if ( req . file === undefined ) { return res . send ({ \"message\" : \"no file selected\" }); } else { console . log ( 'req.body' , req . body ); console . log ( 'req.file' , req . file ); const newPost = new Post ({ title : req . body . title , location : req . body . location , image_id : req . file . filename }) await newPost . save (); sendNotification (); return res . send ( newPost ); } }) Wir definieren eine Variable pushSubscription , die genau alle Werte der Subscription oben enth\u00e4lt ( expirationTime lassen wir weg). Diese Informationen holen wir uns sp\u00e4ter noch automatisch. Au\u00dferdem definieren wir eine neue Funktion sendNotification() . Darin verwenden wir aus dem web-push -Package die Funktion setVapidDetail() . Diese Funktion bekommt als ersten Parameter eine id \u00fcbergeben, typischerweise (so wie hier beschrieben) einen String beginnend mit mailto: und der E-Mail-Adresse. Als zweiten Parameter wird der \u00f6ffentliche Vapid-Schl\u00fcssel als einfacher String \u00fcbergeben und als dritter Parameter der private Vapid-Schl\u00fcssel als einfacher String. Dann kann man f\u00fcr die Nachricht einen sogenannten payload festlegen, der ein beliebiges JSON ist (kann auch ein einfacher String sein). Dieser payload ist der Inhalt der Push-Nachricht. Wir haben in diesem Fall einen title und einen content festgelegt. Das Senden der eigentlichen Nachricht an den In-Browser Push Server erfolgt mithilfe der Funktion sendNotification() aus dem web-push -Package. Dieser wird das gesamte JavaScript-Objekt pushSubscription sowie der payload \u00fcbergeben. Die Funktion sendNotification() wird also immer dann aufgerufen, wenn in der Datenbank ein neuer Post gespeichert wird. Wir k\u00f6nnen die Funktion insofern testen, als dass wir neue Daten eingeben, entweder \u00fcber Postman oder \u00fcber unsere Webanwendung \u00fcber das Formular (diese Daten landen ja auch beim Backend). Allerdings k\u00f6nnen wir uns dabei nur von der Fehlerfreiheit der Ausf\u00fchrungen \u00fcberzeugen (und im Backend erscheint im Terminal push notification sent ). Die Push-Nachricht ist nun beim In-Browser Push Server . Wir m\u00fcssen jetzt aber im Service Worker zun\u00e4chst das push -Event behandeln, um die Benachrichtigung tats\u00e4chlich im Ger\u00e4t zu erhalten.","title":"Push-Nachrichten senden"},{"location":"pushnotes/#das-push-ereignis-behandeln","text":"Das push -Ereignis wird vom In-Browser Push Server ausgel\u00f6st, wann immer eine neue Push-Benachrichtigung dort eintrifft. Das kann ant\u00fcrlich auch dann passieren, wenn die Webanwendung geschlossen ist. Das Behandeln des push -Ereignisses ist deshalb Aufgabe des Service Workers. Wir erweitern also die sw.js um die Behandlung des push -Events: sw.js 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); Die Ereignisbehandlung im Service Worker haben wir nun schon ein paar Mal gemacht. Wir geben zuerst das event selbst einmal auf der Konsole aus. Es handelt sich um ein PushEvent . Dann erstellen wir uns Dummy- data , falls der Empfang der Push-Nachricht vom Server nicht klappen sollte. Wenn aber doch, dann schreiben wir die Variable data mit den Daten aus dem PushEvent (siehe oben im Backend payload - die Daten sollten also title und content enthalten). Wir lesen die data aus dem event -Objekt aus und wandeln diese mithilfe von JSON.parse() in ein JSON um. Dann erzeugen wir, so wie in Abschnitt Weitere Optionen f\u00fcr die Benachrichtigungen beschrieben, die Benachrichtigung. Beachten Sie noch, dass self auf den Service Worker zeigt und self.registration verwendet wird, um auf das ServiceWorkerRegistration zuzugreifen, welches \u00fcber die Methode showNotification() verf\u00fcgt. Wenn wir nun neue Daten \u00fcber das Formular eingeben, erscheint","title":"Das push-Ereignis behandeln"},{"location":"pushnotes/#eine-webseite-offnen","text":"Jetzt fehlt eigentlich nur noch, dass wir in der Push-Benachrichtung eine Aktion vorsehen, die das \u00d6ffnen unserer Webanwendung erm\u00f6glicht. Das typische Szenario ist ja, dass die Webanwendung geschlossen ist und dass im Backend eine Daten\u00e4nderung stattfindet und wir daraufhin eine Push-Nachricht erhalten. Nun wollen wir gerne auf diese Push-Nachricht klicken und damit soll die Anwendung ge\u00f6ffnet werden, die uns das neue Datum anzeigt. Daf\u00fcr haben wir auch schon alles vorbereitet - Service Worker reagieren wir bereits auf das Ereignis, dass auf die Benachrichtigung geklickt wird: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); } }); Die confirm -Antwort erfolgt nur, wenn nach der Zulassung der Berechtigung gefragt wird. Wir behandeln die anderen F\u00e4lle. sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( 'http://localhost:8080' ); client . focus (); } else { clients . openWindow ( 'http://localhost:8080' ); } notification . close (); }) ); } }); Mit clients greift der Service Worker auf alle Fenster (Anwendungen, Browser) zu, \u00fcber die er Kontrolle hat (siehe Clients ). Die Funktion matcAll() gibt ihm alle diese Clients als ein Array zur\u00fcck. Mit der JavaScript-Funktion find() laufen wir durch das Array und geben alle die Clients (genauer vom Typ WindowClient zur\u00fcck, f\u00fcr die gilt, dass sie sichtbar - im Sinne von erreichbar - sind. Diejenigen Clients, die nicht erreichbar sind, werden gar nicht erst zur\u00fcckgegeben. F\u00fcr alle anderen gilt, dass sie entweder bereits ge\u00f6ffnet sind oder nicht. Diejenigen (Browser), die bereits ge\u00f6ffnet sind, navigieren zur URL http://localhost:8080 und die anderen werden mit dieser URL ge\u00f6ffnet. Wenn nun neue Daten eingegeben werden, dann erscheint eine Push-Notifikation und wenn wir darauf klicken, dann \u00f6ffnet sich unsere Anwendung. Eine gute M\u00f6glichkeit, das zu Testen, besteht in der Verwendung unseres Frontends, das wir f\u00fcr die Eingabe der Daten erstellt haben. Schlie\u00dfen Sie die HTW-Insta -Anwendung, \u00f6ffnen Sie das andere Frontend, geben Sie Daten ein und speichern diese. Es erscheint eine Push-Notifikation, auf die Sie klicken k\u00f6nnen und die HTW-Insta -Anwendung wird im browser mit den neuen Daten ge\u00f6ffnet. Diejenigen, die ihr Android-Ger\u00e4t anschlie\u00dfenm k\u00f6nnen, sollten es auch unbedingt dar\u00fcber probieren. Hier noch eine kleine Verbesserung davon, weil wir ja die URL hart in den Code geschrieben haben. Wir k\u00f6nnen im Backend beim Senden der Notification eine weitere Eigenschaft hinzuf\u00fcgen: sub.controller.js 20 21 22 23 24 25 26 27 28 29 30 sendNotification : () => { webpush . setVapidDetails ( 'mailto:freiheit@htw-berlin.de' , publicVapidKey , privateVapidKey ); const payload = JSON . stringify ({ title : 'New Push Notification' , content : 'New data in database!' , openUrl : '/help' }); webpush . sendNotification ( pushSubscription , payload ) . catch ( err => console . error ( err )); console . log ( 'push notification sent' ); } und diese der Benachrichtigung mitgeben: sw.js 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 self . addEventListener ( 'push' , event => { console . log ( 'push notification received' , event ); let data = { title : 'Test' , content : 'Fallback message' , openUrl : '/' }; if ( event . data ) { data = JSON . parse ( event . data . text ()); } let options = { body : data . content , icon : '/src/images/icons/fiw96x96.png' , data : { url : data . openUrl } }; event . waitUntil ( self . registration . showNotification ( data . title , options ) ); }); und diese Informationen dann statt der festen URL verwenden: sw.js 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 self . addEventListener ( 'notificationclick' , event => { let notification = event . notification ; let action = event . action ; console . log ( notification ); if ( action === 'confirm' ) { console . log ( 'confirm was chosen' ); notification . close (); } else { console . log ( action ); event . waitUntil ( clients . matchAll () // clients sind alle Windows (Browser), fuer die der Service Worker verantwortlich ist . then ( clientsArray => { let client = clientsArray . find ( c => { return c . visibilityState === 'visible' ; }); if ( client !== undefined ) { client . navigate ( notification . data . url ); client . focus (); } else { clients . openWindow ( notification . data . url ); } notification . close (); }) ); } }); Wenn Sie jetzt auf die Push-Nachricht klicken, sollte sich die help -Seite der Anwendung \u00f6ffnen. Success Wir haben zun\u00e4chst gelernt, dass Benachrichtigungen und Push-benachrichtigungen zwei grunds\u00e4tzlich verschiedene Dinge sind. Benachrichtigungen ist das, was man als Nachricht \"sieht\". Push-Notifikationen werden an den In-Browser Push Server vom Backend gesendet. Dieser Server l\u00f6st daraufhin ein push -Ereignis beim Service Worker aus, wenn die Webanwendung sich f\u00fcr den Empfang von Push-Nachrichten . registriert hat. Die Registrierung ist etwas aufwendig, muss aber nur einmal erledigt werden. Mit den Push-Nachrichten kennen wir nun eine weitere progressive Funktionalit\u00e4t. Bis dahin waren Push-Nachrichten nur nativen Apps vorbehalten.","title":"Eine Webseite \u00f6ffnen"},{"location":"serviceworker/","text":"Service Workers \u00b6 Wir betrachten einen wichtigen Grundbaustein, der solche Funktionalit\u00e4ten, wie Push-Notifikationen, Hintergrund-Synchronisationen und die M\u00f6glichkeit, auch offline die Anwendung auszuf\u00fchren, erst erm\u00f6glicht: sogenannte Service Workers . Ein service worker ist zun\u00e4chst einmal ein Skript (in JavaScript), welches im Browser im Hintergrund l\u00e4uft, unabh\u00e4ngig von der Webseite. Ein service worker stellt Funktionalit\u00e4ten, wie Push-Notifikationen oder Hintergrund-Synchronisationen zur Verf\u00fcgung, \u00e4hnlich einer API. Entstanden sind service worker aus der Verwendung des Application Caches . Die service worker API w\u00e4chst kontinuierlich und bietet zunehmend weitere Funktionalit\u00e4ten. Service worker haben einige n\u00fctzliche Eigenschaften: Ein service worker kann zwar nicht direkt das DOM einer Seite manipulieren, kann aber auf Requests der Seite mit Responses reagieren und die Seite selbst kann darufhin ihr DOM \u00e4ndern. Ein service worker ist ein \"programmierbarer\" Proxy, der steuert, wie Requests von der Webseite behandelt werden. Service workers verwenden die IndexDB API , um client-seitig strukturierte Daten persistent zu speichern. Service workers verwenden Promises . Wir werden uns deshalb Promises detailliert anschauen. Die folgenden Abbildungen verdeutlichen die Arbeitsweise eines service workers . Zun\u00e4chst \u00fcberlegen wir uns nochmal, wie \"normales\" JavaScript in Webanwendungen ausgef\u00fchrt wird. Die JS-Skripte werden mit den HTML-Seiten geladen. Sie stellen Funktionen bereit, die entweder durch Nutzerinteraktionen (z.B. click ) oder durch Lifecycle -Events (z.B. onload ) ausgel\u00f6st und aufgerufen werden. Diese Funktionen laufen alle in einem einzigen Thread: . Service worker laufen auf einem eigenen Thread. Service worker werden an HTML-Seiten registriert, laufen aber g\u00e4nzlich unabh\u00e4ngig von ihnen. Sie laufen sogar dann, wenn die HTML-Seiten geschlossen sind. Service worker laufen im Hintergrund , es handelt sich um Hintergrundprozesse . Service worker sind zwar JavaScript, manipulieren aber nicht den DOM. Sie sind nicht an HTML-Seiten gebunden, sondern an eine Domain. Service worker reagieren ebenfalls auf Ereignisse, aber andere, als wir sie von Webanwendungen kennnen, z.B. auf Push-Notifikationen. . Service worker laufen einfach im Hintergrund und warten auf Ereignisse. Welche Ereignisse k\u00f6nnen das sein? Ereignisse, auf die Service Worker reagieren k\u00f6nnen \u00b6 Wir betrachten hier einige der Ereignisse, auf die service worker reagieren k\u00f6nnen, auf die sie also \"h\u00f6ren\". Fetch \u00b6 Wann immer der Browser etwas vom Webserver l\u00e4dt, f\u00fchrt er ein fetch -Ereignis aus. Das kann eine HTML-Seite, aber auch ein Bild ( img ), eine CSS-Datei oder eine JavScript-Datei sein. Ein service worker kann auf ein solches Ereignis reagieren. Tats\u00e4chlich agiert der service worker als ein Proxy , der zwischen dem Browser und dem Webserver steht und die fetch -Anfragen ( requests ) des Browsers empf\u00e4ngt und eventuell an den Webserver weiterleitet. Eventuell leitet er die Anfrage auch nicht weiter, sondern beantwortet sie mit einer Resource aus dem eigen Cache. F\u00fcr die fetch -Ereignisse wird die Fetch-API verwendet, auf die wir sp\u00e4ter noch ausf\u00fchrlich zu sprechen kommen. Wichtig ist an dieser Stelle zu erw\u00e4hnen, dass ein (asynchrones) XMLHttpRequest kein fetch -Ereignis darstellt. Eine Single-Page-Application, die Ressourcen vom Browser nachl\u00e4dt, ruft dabei keine (weiteren) fetch -Ereignisse auf. Push-Notifikationen \u00b6 Push-Notifikationen werden von einem (anderen) Server gesendet und k\u00f6nnen durch service worker verwaltet werden. Jeder Browser verf\u00fcgt \u00fcber eigene Push-Web-Server. Es k\u00f6nnen von jedem beliebigen Server Push-Nachrichten an diese Push-Web-Server gesendet werden. Der service worker kann auf solche Ereignisse reagieren. Wichtig ist hier zu wiederholen, dass service worker auch dann (im Hintergrund) arbeiten, wenn die Webanwendung selbst geschlossen ist. Sie k\u00f6nnen trotzdem erkennen, wenn Push-Nachrichten eingehen und darauf geeignet reagieren. Auch hier wirken service worker wieder wie ein Proxy , n\u00e4mlich f\u00fcr die Push-Web-Server. Der service worker kann z.B. eine Nachricht auf dem Startbildschirm des Smartphones erzeugen. Mit dieser Nachricht kann die Nutzerin dann etwas machen und l\u00f6st dabei das folgende Ereiegnis aus: Notification interaction \u00b6 Klickt eine Nutzerin auf die (Push-)Nachricht, die vom service worker erzeugt wurde, wird ein entsprechendes Ereignis ausgel\u00f6st, auf das wiederum der service worker reagieren kann, z.B. eine Webseite aufrufen und \u00f6ffnen oder eine Anwendung. Auch hier ist es wieder wichtig, dass das ein service worker erledigt und nicht ein JavaScript, welches zu einer Webanwendung geh\u00f6rt, da es ja sein kann, dass diese Webanwendung geschlossen ist. Hintergrund-Synchronisation \u00b6 Es kann passieren, dass in einer Webanwendung Ereignisse ausgef\u00fchrt werden, jedoch keine Verbindung zum Internet besteht. Typischerweise werden die Ausf\u00fchrungen solcher Ereignisse, die offline ausgef\u00fchrt werden, ebenfalls durch service worker erledigt. Sobald der Browser wieder mit dem Internet verbunden ist, l\u00f6st er ein Ereignis aus. Auf dieses Ereignis kann der service worker reagieren und die Ereignisse, die er offline gespeichert und beantwortet hat, nun im Hintergrund online ausf\u00fchren, so dass eine Hintergrund-Synchronisation erfolgt. Service-worker-Lifecycle-Ereignisse \u00b6 Ein service worker durchl\u00e4uft selbst einen eigenen \"Lebenszyklus\". Wir kennen Liefecycle-Events bereits aus Angular, z.B. ngOnInit() oder auch von Webseiten ( load ). Solche Lifecycle-Events existieren auch f\u00fcr service worker. Wir werden sie uns sp\u00e4ter im Detail anschauen. Zuerst betrachten wir aber zur Einf\u00fchrung ein einfaches Beispiel f\u00fcr die Verwendung eines service workers (wie wir gleich im Anschluss dikutieren werden, handelt es sich eigentlich um einen web worker ). Einfaches Beispiel service worker \u00b6 Wir betrachten ein erstes einfaches Beispiel f\u00fcr die Verwendung eines service workers. Wir erstellen folgende index.html . index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <!DOCTYPE HTML> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker </ title > </ head > < body > < p > Gr\u00f6\u00dfte Primzahl bisher: < output id = \"result\" ></ output ></ p > < script > var worker = new Worker ( 'worker.js' ); worker . onmessage = function ( event ) { document . getElementById ( 'result' ). textContent = event . data ; }; </ script > </ body > </ html > In Zeile 10 wird mithilfe des Worker -Kunstruktors ein Worker -Objekt erzeugt. Dem Konstruktor wird die Implementierung des workers \u00fcbergeben, genauer gesagt, die Implementierung des Event-Handlers f\u00fcr onmessage des Worker -Objektes. Die Implementierung des onmessage -Event-Handlers sieht typischerweise so aus, dass der service worker mit einer postMessage antwortet und diese an die Seite \u00fcbergibt. In unserem Beispiel ist die Implementierung wie folgt: worker.js 1 2 3 4 5 6 7 8 9 var n = 1 ; search : while ( true ) { n += 1 ; for ( var i = 2 ; i <= Math . sqrt ( n ); i += 1 ) if ( n % i == 0 ) continue search ; // found a prime! postMessage ( n ); } Zeile 8 enth\u00e4lt die postMessage . Darin wird eine Zahl n an die Seite geschickt, sobald sie berechnet wurde. Es handelt sich bei der Berechnung um eine Primzahlberechnung. Das hei\u00dft, der service worker arbeitet im Hintergrund und \"sucht\" neue Primzahlen. Sobald der service worker eine neue Primzahl gefunden hat, schickt er diese mithilfe der postMessage() -Funktion an die Webseite. Dadurch wird das onmessage -Ereignis (genauer gesagt, handelt es sich um das message -Event) behandelt. Wann immer onmessage auftritt, aktualisiert die Seite, genauer gesagt, der textContent des <output> -Elementes mit der id= \"result\" (siehe Zeilen 11-13 in index.html ). Dieses Beispiel ist extra einfach gehalten. genauer gesagt, handelt es sich bei dem Beispiel \"nur\" um einen web worker . Das W3C unterscheidet zwischen service workers und web workers . Der Unterschied zwischen web worker und * service worker* wird z.B. hier beschrieben. Web worker vs. service worker \u00b6 Wir verwenden f\u00fcr die Unterscheidung zwischen web worker und service worker haupts\u00e4chlich dieses Dokument . Darin finden wir auch folgendes Bild zur Beschreibung eines web workers: Ein web worker hat kein spezifisches Einsatzszenario, au\u00dfer dass er unabh\u00e4ngig von Hauptthread der Anwendung l\u00e4uft und Nachrichten mittels postMessage() an die Anwendung schicken kann. Demgegen\u00fcber ist ein service worker ein spezieller web worker , der als Proxy zwischen Anwendung und dem Netzwerk bzw. dem Cache agiert. Service workers verf\u00fcgen \u00fcber mehr Funktionalit\u00e4ten als web workers . Dazu geh\u00f6ren einerseits die Ereignisse, auf die service workers reagieren k\u00f6nnen: install und activate (sogenannte Lifecycle events ), fetch und weitere Ereignisse, die durch Erweiterungen spezifiziert werden, z.B. push , notificationclick , notificationclose , sync , canmakepayment , paymentrequest usw. (sogenannte Functional events ) sowie message und messageerror vom Web worker und andererseits die Status, in denen sich ein service worker befinden kann: parsed , installing , installed , activating , activated und redundant (initial: parsed ) Die prinzipielle Idee der Registrierung eines service workers sieht so aus: Die beiden Lifecycle-Events install und activate sind bereits eingezeichnet. Dabei ist zu betonen, dass ein service worker erst dann aktiviert werden kann, wenn kein anderer service worker mehr (in der gleichen Dom\u00e4ne/im gleichen Scope) l\u00e4uft. Ein anderer service worker, der eventuell noch l\u00e4uft, muss erst geschlossen werden, bevor der neue service worker das activate -Ereignis ausl\u00f6sen kann. Damit ein solcher \"alter\" service worker geschlossen werden kann, m\u00fcssen zumindest alle Tabs im Browser, in denen die Webanwendung l\u00e4uft, geschlossen werden. Selbst dann l\u00e4uft der service worker aber immernoch weiter. Er muss explizit geschlossen werden. Das zeigen wir sp\u00e4ter. Registrierung eines service workers \u00b6 W\u00e4hrend wir f\u00fcr das einfache Beispiel mit dem web worker noch den Worker() -Konstruktor verwendet haben, erfolgt die Registrierung eines service workers mittels navigator.serviceWorker.register('./sw.js') , wobei in sw.js der service worker implementiert ist. Wir schauen uns die prinzipielle Registrierung an: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 <! DOCTYPE HTML > < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker < /title> < /head> < body > < p > \u00d6ffne die developer tools < /p> < script > if ( 'serviceWorker' in navigator ) { // Register a service worker hosted at the root of the // site using the default scope. navigator . serviceWorker . register ( './sw.js' ). then ( function ( registration ) { console . log ( 'Service worker registration succeeded:' , registration ); console . log ( 'Scope ist ' + registration . scope ); // At this point, you can optionally do something // with registration. See https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration }). catch ( function ( error ) { console . log ( 'Service worker registration failed:' , error ); }); // Independent of the registration, let's also display // information about whether the current page is controlled // by an existing service worker, and when that // controller changes. // First, do a one-off check if there's currently a // service worker in control. if ( navigator . serviceWorker . controller ) { console . log ( 'This page is currently controlled by:' , navigator . serviceWorker . controller ); } // Then, register a handler to detect when a new or // updated service worker takes control. navigator . serviceWorker . oncontrollerchange = function () { console . log ( 'This page is now controlled by:' , navigator . serviceWorker . controller ); }; } else { console . log ( 'Service workers are not supported.' ); } < /script> < /body> < /html> Wir haben hier die registrierung des service workers innerhalb des <script> -Elementes. Besser (und das werden wir sp\u00e4ter auch immer machen) ist die Erstellung einer eigenen .js -Datei daf\u00fcr. Wenn wir die Developer Tools \u00f6ffnen, sehen wir auf der Console folgende Ausgabe: F\u00fcr diejenigen, f\u00fcr die das Registrierungs-Beispiel oben zu lang ist, hier die Version von W3C : 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); }); Registrierung eines service workers in HTW-Insta \u00b6 Nun, da wir wissen, wie die Registrierung eines service workers prinzipiell funktioniert, f\u00fcgen wir unserem HTW-Insta -Beispiel einen solchen hinzu. Den aktuellen Stand der Anwendung finden Sie unter IKT-PWA-02 . Das ist die Version, in der bereits das Web-App-Manifest enthalten ist. Zun\u00e4chst beachten wir noch einen besonderen Eintrag in der package.json : package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"name\" : \"IKT-PWA-02\" , \"version\" : \"1.0.0\" , \"description\" : \"Grundger\u00fcst einer PWA mit Web-App-Manifest\" , \"main\" : \"index.js\" , \"scripts\" : { \"start\" : \"http-server -c-1\" }, \"keywords\" : [ \"pwa\" , \"progressive\" , \"web\" , \"app\" , \"ikt\" , \"htw\" , \"fiw\" ], \"author\" : \"J. freiheit\" , \"license\" : \"ISC\" , \"devDependencies\" : { \"http-server\" : \"^14.1.0\" } } In Zeile 7 wird definiert, dass wir bei Aufruf des npm start -Befehls den Webserver http-server starten. Das Argument -c-1 besagt, dass wir f\u00fcr diesen Server nicht den Browser-Cache verwenden wollen. Jede datei, die wir somit vom Webserver anfordern, wird somit auch tats\u00e4chlich neu geladen. Stattdessen wollen wir n\u00e4mlich nur den Cache des service workers verwenden. F\u00fcr unseren service worker erstellen wir uns im public -Ordner eine Datei sw.js . Da der service worker im public -Ordner angelegt wird, ist sein Scope unsere komplette Webanwendung. Wollten wir z.B. einen service worker, der nur f\u00fcr unsere Hilfe-Seiten zust\u00e4ndig ist, so h\u00e4tten wir die Datei im help -Ordner erzeugt. Um unseren service worker zu registrieren, m\u00fcssen wir ihn in alle unsere HTML-Seiten einbinden. Wir haben die /public/index.html -Datei und die /public/help/index.html . Dort k\u00f6nnten wir innerhalb des eines <script> -Elementes die Registrierung durchf\u00fchren. Da wir aber bereits in beiden Dateien die Datei public/src/js/app.js einbinden, erledigen wir die Registrierung einfach dort. Dann ist sie nur an einer Stelle und wir m\u00fcssen die HTML-Dateien nicht anpassen. In die /public/src/js/app.js schreiben wir nun Folgendes: /public/src/js/app.js 1 2 3 4 5 6 7 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then ( function () { console . log ( 'service worker registriert' ) }); } Starten unserer Anwendung und Aufruf im Browser ergibt die Ausgabe service worker registriert in der Konsole der DevTools. Im Zusammenhang mit service workern gibt es folgendes zu beachten: service worker funktionieren nur mit https oder auf localhost! Wundern Sie sich also nicht, wenn Ihr service worker nicht funktioniert, sobald Sie Ihre Anwendung auf einem Webserver ausf\u00fchren, der https nicht unterst\u00fctzt. Anleitungen, wie Sie einen Webserver f\u00fcr https konfigurieren, finden Sie z.B. hier . Schauen Sie ansonsten auch hier und hier . Service worker: Life-Cycle-Ereignisse behandeln \u00b6 Nun implementieren wir den service worker. Wir haben ihn bereits registriert, aber die Datei sw.js ist noch leer. Die grundlegende Idee eines service workers ist es, Ereignisse zu behandeln. Wir werden unserem service worker also eine Reihe von addEventListener() -Funktionen hinzuf\u00fcgen. Diese Funktion kennen wir bereits aus \"normalem\" JavaScript-Code. Dort haben h\u00e4ufig so etwas wie addEventListener('click', function() { /* ... */ }) geschrieben. Das click -Ereignis hat aber keine Relevanz f\u00fcr service worker, da ein service worker keine Auswirkungen auf das DOM hat. Vielmehr reagiert ein service worker auf Ereignisse, die wir bereits oben beschrieben haben. Wir f\u00fcgen unserem service worker Ereignisbehandlungen hinzu: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , function ( event ) { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , function ( event ) { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Wir melden uns also an zwei Ereignisse an: an das install -Ereignis und das activate -Ereignis. Beide Ereignisse sind auch gut hier beschrieben. Beide Ereignisbehandlungen sind zun\u00e4chst einfache Ausgaben auf die Konsole. Zwei Sachen sind noch erw\u00e4hnenswert: erstens wird self verwendet, um auf den service worker zu referenzieren. F\u00fcr Erl\u00e4uterungen \u00fcber den Unterschied von this und self k\u00f6nnen Sie sich z.B. hier informieren. Grunds\u00e4tzlich ist es so, dass mit self auf den gesamten Scope referenziert wird. In Webanwendungen ist der Scope h\u00e4ufig window , hier ist es aber die Domain, die den Scope des service workers beschreibt. Wir referenzieren also nicht auf den service worker selbst, sondern auf seinen Scope. Die zweite erw\u00e4hnenswerte Sache steht in Zeile 7 . Wenn ein service worker registriert ist, dann \"kontrolliert\" er nicht automatisch alle Webseiten in seiner Domain. Erst durch das Neuladen dieser Seiten gelangen sie unter seine Kontrolle. Mithilfe der claim() -Funktion aus dem Interface Clients \u00fcbernimmt der service worker die Kontrolle aber sofort, d.h. ohne ein Neuladen der Site. Einzige Ausnahme ist die Seite, die aktuell im Browser gezeigt wird. F\u00fcr diese muss tats\u00e4chlich ein Reload durchgef\u00fchrt werden. Weitere Informationen dazu finden Sie auch hier . Wenn wir die Anwendung nun starten und dann im Browser aufrufen, erhalten wir folgende Ausgabe auf der Konsole: Wir sehen, dass das install -Ereignis ausgel\u00f6st wurde, aber offensichtlich nicht das activate -Ereignis. Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Darum k\u00fcmmern wir uns im folgenden Abschnitt. Noch eine kurze Bemerkung zur Reihenfolge der Ausgaben auf der Konsole. Auf der Konsole haben wir folgende Ausgaben: service worker registriert service worker --> installing ... Das verwundert wahrscheinlich, weil das install -Event ausgel\u00f6st wird, bevor der service worker (existiert und) registriert werden kann. Also m\u00fcssten die Ausgaben eigentlich in der anderen Reihenfolge erscheinen. Wir erinnern uns (siehe zweite Abbildung ganz oben in diesem Kapitel): der service worker l\u00e4uft auf einem anderen Thread, als das \"normale\" JavaScript unserer Webanwendung. Also laufen app.js und sw.js auf verschiedenen Threads. In welchem dieser beiden Threads nun zuerst eine Ausgabe erfolgt, h\u00e4ngt von vielen verschiedenen Faktoren ab, l\u00e4sst sich aber auch nicht beeinflussen. Dieses Mal war es so, dass der app.js -Thread schneller mit der Ausgabe war, als der sw.js -Thread. Das kann beim n\u00e4chsten Mal schon anders sein. Wichtig ist, dass wir wissen, dass diese beiden Threads g\u00e4nzlich nebenl\u00e4ufig und unabh\u00e4ngig voneinander laufen. Sollten sich dabei Ausgaben \"\u00fcberholen\", dann ist das kein Bug, sondern ein Feature. Service worker aktualisieren und aktivieren \u00b6 Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Dazu werfen wir einen Blick in unsere DevTools. Wir w\u00e4hlen den Reiter Application und dann im linken Men\u00fc unter Application den Men\u00fcpunkt Service Woorkers : Wir sehen, dass der service worker im Status des Aktivierens ist, aber noch darauf wartet, aktiviert zu sein ( waiting to activate ). Hierzu ist es wichtig zu wissen: solange Sie im Browser (mindestens) einen Tab mit Ihrer Webanwendung offen haben, wird ein neuer service worker zwar installiert und registriert, aber nicht aktiviert, das liegt daran, dass die offene Seite eventuell noch mit einem alten service worker kommuniziert (evtl. hat der alte service worker noch etwas im Cache, das mit der Webanwendung synchronisiert werden m\u00fcsste). Wenn wir den Tab mit unserer Anwendung schlie\u00dfen und ihn erneut \u00f6ffnen, dann sehen wir: Es wurden also sowohl das install - als auch das activate -Ereignis ausgel\u00f6st. Auf der Konsole erscheint entsprechend: Wenn Sie Ihren service worker aktualisiert haben, m\u00fcssen Sie alle Tabs Ihrer Webanwendung schlie\u00dfen und erneut \u00f6ffnen, um den neuen service worker zu aktivieren! Beherzigen Sie die obige Ausgabe. Es kann Ihnen sehr viel Implementierungskummer bereiten, wenn Sie es nicht tun. Sie ver\u00e4ndern Ihren Code im service worker, aber die \u00c4nderungen sind nicht wirksam? Dann haben Sie vielleicht nur ein Reload Ihrer Webanwendung durchgef\u00fchrt - das reicht aber f\u00fcr den aktualisierten service worker nicht ! Aber zum Gl\u00fcck bieten die DevTools Hilfe, so dass Sie w\u00e4hrend der Entwicklung doch nicht immer den Tab schlie\u00dfen und neu \u00f6ffnen m\u00fcssen. Betrachten wir nochmals die folgende Abbildung: Sie haben drei M\u00f6glichkeiten, den service zu aktivieren: Markieren Sie die Checkbox links neben Update on reload . Dann wird durch das Reload Ihrer Webanwendung der aktualisierte service worker aktiviert. Klicken Sie auf den Link Update oder Klicken Sie auf den Link skipWaiting . Mit einem der drei Hilfen oben vermeiden Sie das Schlie\u00dfen und Neu\u00f6ffnen des Tabs und der Webanwendung. Am einfachsten ist die erste Variante. Dann m\u00fcssen Sie nur noch Reloaden und ansonsten weiter gar nichts machen. Arrow-Notation verwenden \u00b6 Wenn wir uns die Implementierung des service workers anschauen, dann sehen wir, dass wir etwas \"old school\" unterwegs sind, also so ca. 2017 ;-). Wir sollten anstelle der function() -Notation lieber die Arrow -Notation verwenden, um ein bisschen mehr up-to-date zu sein ;-). Zu Arrow-Notation siehe auch Hilfen\u2192Arrow-Notation . Unsere service worker Implementierung sieht dann so aus: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Die neuere Notation \u00e4ndert an der Funktionalit\u00e4t nat\u00fcrlich nichts. Service worker: andere Ereignisse behandeln \u00b6 Bis jetzt haben wir nur Life-Cycle-Events behandelt. Jetzt schauen wir uns einmal das fetch -Ereignis an. Wir wissen bereits , dass das fetch -Ereignis immer dann ausgel\u00f6st wird, wenn etwas vom Webserver geladen wird, wenn also CSS-Dateien oder ein Bild oder JavaScript-Dateien geladen werden. Wir behandeln ein solches Ereignis wiederum mit einer einfachen Konsolen-Ausgabe: /public/src/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Falls wir in den DevTools unter Application \u2192 Application \u2192 Service Workers das H\u00e4kchen bei Update on Reload gesetzt hatten, m\u00fcssen wir tats\u00e4chlich nur ein Reload der Webanwendung durchf\u00fchren und wir sehen auf der Konsole, dass das fetch -Event selbst f\u00fcr unsere bis jetzt sehr kleine Anwendung recht h\u00e4ufig aufgerufen wird: Wenn Sie in die jeweiligen FetchEvent -Objekte hineinklicken, welche Ressourcen jeweils per GET vom Webserver geladen werden. Anwendung mit einem Android-Ger\u00e4t verbinden \u00b6 Ich kann es leider (bis jetzt noch) nicht ausprobieren, aber hier ist beschrieben, wie Sie die Anwendung auf einem Android-Ger\u00e4t aufrufen k\u00f6nnen. Nun, da wir service worker verwenden, sollte es funktionieren. Das hier mag auch hilfreich sein. Anwendung auf Ihrem iPhone aufrufen \u00b6 Um die Anwendung auf Ihrem iPhone aufzurufen, m\u00fcssen Sie sich zun\u00e4chst nur anschauen, was im Terminal ausgegeben wird, nachdem Sie npm start aufgerufen haben: Starting up http-server, serving ./public Available on: http://127.0.0.1:8080 htpp://192.168.1.24:8080 Hit CTRL-C to stop the server Rufen Sie in Ihrem iPhone einen Browser auf (z.B. Safari oder Chrome) und geben dort di ezweite der beiden URLs ein (also htpp://192.168.1.24:8080 ). Die Anwendung wird ausgef\u00fchrt. iOS unterst\u00fctzt aber leider (noch) nicht, dass Sie ein Start-Icon daf\u00fcr auf den Startbildschirm ablegen.","title":"Service worker"},{"location":"serviceworker/#service-workers","text":"Wir betrachten einen wichtigen Grundbaustein, der solche Funktionalit\u00e4ten, wie Push-Notifikationen, Hintergrund-Synchronisationen und die M\u00f6glichkeit, auch offline die Anwendung auszuf\u00fchren, erst erm\u00f6glicht: sogenannte Service Workers . Ein service worker ist zun\u00e4chst einmal ein Skript (in JavaScript), welches im Browser im Hintergrund l\u00e4uft, unabh\u00e4ngig von der Webseite. Ein service worker stellt Funktionalit\u00e4ten, wie Push-Notifikationen oder Hintergrund-Synchronisationen zur Verf\u00fcgung, \u00e4hnlich einer API. Entstanden sind service worker aus der Verwendung des Application Caches . Die service worker API w\u00e4chst kontinuierlich und bietet zunehmend weitere Funktionalit\u00e4ten. Service worker haben einige n\u00fctzliche Eigenschaften: Ein service worker kann zwar nicht direkt das DOM einer Seite manipulieren, kann aber auf Requests der Seite mit Responses reagieren und die Seite selbst kann darufhin ihr DOM \u00e4ndern. Ein service worker ist ein \"programmierbarer\" Proxy, der steuert, wie Requests von der Webseite behandelt werden. Service workers verwenden die IndexDB API , um client-seitig strukturierte Daten persistent zu speichern. Service workers verwenden Promises . Wir werden uns deshalb Promises detailliert anschauen. Die folgenden Abbildungen verdeutlichen die Arbeitsweise eines service workers . Zun\u00e4chst \u00fcberlegen wir uns nochmal, wie \"normales\" JavaScript in Webanwendungen ausgef\u00fchrt wird. Die JS-Skripte werden mit den HTML-Seiten geladen. Sie stellen Funktionen bereit, die entweder durch Nutzerinteraktionen (z.B. click ) oder durch Lifecycle -Events (z.B. onload ) ausgel\u00f6st und aufgerufen werden. Diese Funktionen laufen alle in einem einzigen Thread: . Service worker laufen auf einem eigenen Thread. Service worker werden an HTML-Seiten registriert, laufen aber g\u00e4nzlich unabh\u00e4ngig von ihnen. Sie laufen sogar dann, wenn die HTML-Seiten geschlossen sind. Service worker laufen im Hintergrund , es handelt sich um Hintergrundprozesse . Service worker sind zwar JavaScript, manipulieren aber nicht den DOM. Sie sind nicht an HTML-Seiten gebunden, sondern an eine Domain. Service worker reagieren ebenfalls auf Ereignisse, aber andere, als wir sie von Webanwendungen kennnen, z.B. auf Push-Notifikationen. . Service worker laufen einfach im Hintergrund und warten auf Ereignisse. Welche Ereignisse k\u00f6nnen das sein?","title":"Service Workers"},{"location":"serviceworker/#ereignisse-auf-die-service-worker-reagieren-konnen","text":"Wir betrachten hier einige der Ereignisse, auf die service worker reagieren k\u00f6nnen, auf die sie also \"h\u00f6ren\".","title":"Ereignisse, auf die Service Worker reagieren k\u00f6nnen"},{"location":"serviceworker/#fetch","text":"Wann immer der Browser etwas vom Webserver l\u00e4dt, f\u00fchrt er ein fetch -Ereignis aus. Das kann eine HTML-Seite, aber auch ein Bild ( img ), eine CSS-Datei oder eine JavScript-Datei sein. Ein service worker kann auf ein solches Ereignis reagieren. Tats\u00e4chlich agiert der service worker als ein Proxy , der zwischen dem Browser und dem Webserver steht und die fetch -Anfragen ( requests ) des Browsers empf\u00e4ngt und eventuell an den Webserver weiterleitet. Eventuell leitet er die Anfrage auch nicht weiter, sondern beantwortet sie mit einer Resource aus dem eigen Cache. F\u00fcr die fetch -Ereignisse wird die Fetch-API verwendet, auf die wir sp\u00e4ter noch ausf\u00fchrlich zu sprechen kommen. Wichtig ist an dieser Stelle zu erw\u00e4hnen, dass ein (asynchrones) XMLHttpRequest kein fetch -Ereignis darstellt. Eine Single-Page-Application, die Ressourcen vom Browser nachl\u00e4dt, ruft dabei keine (weiteren) fetch -Ereignisse auf.","title":"Fetch"},{"location":"serviceworker/#push-notifikationen","text":"Push-Notifikationen werden von einem (anderen) Server gesendet und k\u00f6nnen durch service worker verwaltet werden. Jeder Browser verf\u00fcgt \u00fcber eigene Push-Web-Server. Es k\u00f6nnen von jedem beliebigen Server Push-Nachrichten an diese Push-Web-Server gesendet werden. Der service worker kann auf solche Ereignisse reagieren. Wichtig ist hier zu wiederholen, dass service worker auch dann (im Hintergrund) arbeiten, wenn die Webanwendung selbst geschlossen ist. Sie k\u00f6nnen trotzdem erkennen, wenn Push-Nachrichten eingehen und darauf geeignet reagieren. Auch hier wirken service worker wieder wie ein Proxy , n\u00e4mlich f\u00fcr die Push-Web-Server. Der service worker kann z.B. eine Nachricht auf dem Startbildschirm des Smartphones erzeugen. Mit dieser Nachricht kann die Nutzerin dann etwas machen und l\u00f6st dabei das folgende Ereiegnis aus:","title":"Push-Notifikationen"},{"location":"serviceworker/#notification-interaction","text":"Klickt eine Nutzerin auf die (Push-)Nachricht, die vom service worker erzeugt wurde, wird ein entsprechendes Ereignis ausgel\u00f6st, auf das wiederum der service worker reagieren kann, z.B. eine Webseite aufrufen und \u00f6ffnen oder eine Anwendung. Auch hier ist es wieder wichtig, dass das ein service worker erledigt und nicht ein JavaScript, welches zu einer Webanwendung geh\u00f6rt, da es ja sein kann, dass diese Webanwendung geschlossen ist.","title":"Notification interaction"},{"location":"serviceworker/#hintergrund-synchronisation","text":"Es kann passieren, dass in einer Webanwendung Ereignisse ausgef\u00fchrt werden, jedoch keine Verbindung zum Internet besteht. Typischerweise werden die Ausf\u00fchrungen solcher Ereignisse, die offline ausgef\u00fchrt werden, ebenfalls durch service worker erledigt. Sobald der Browser wieder mit dem Internet verbunden ist, l\u00f6st er ein Ereignis aus. Auf dieses Ereignis kann der service worker reagieren und die Ereignisse, die er offline gespeichert und beantwortet hat, nun im Hintergrund online ausf\u00fchren, so dass eine Hintergrund-Synchronisation erfolgt.","title":"Hintergrund-Synchronisation"},{"location":"serviceworker/#service-worker-lifecycle-ereignisse","text":"Ein service worker durchl\u00e4uft selbst einen eigenen \"Lebenszyklus\". Wir kennen Liefecycle-Events bereits aus Angular, z.B. ngOnInit() oder auch von Webseiten ( load ). Solche Lifecycle-Events existieren auch f\u00fcr service worker. Wir werden sie uns sp\u00e4ter im Detail anschauen. Zuerst betrachten wir aber zur Einf\u00fchrung ein einfaches Beispiel f\u00fcr die Verwendung eines service workers (wie wir gleich im Anschluss dikutieren werden, handelt es sich eigentlich um einen web worker ).","title":"Service-worker-Lifecycle-Ereignisse"},{"location":"serviceworker/#einfaches-beispiel-service-worker","text":"Wir betrachten ein erstes einfaches Beispiel f\u00fcr die Verwendung eines service workers. Wir erstellen folgende index.html . index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <!DOCTYPE HTML> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker </ title > </ head > < body > < p > Gr\u00f6\u00dfte Primzahl bisher: < output id = \"result\" ></ output ></ p > < script > var worker = new Worker ( 'worker.js' ); worker . onmessage = function ( event ) { document . getElementById ( 'result' ). textContent = event . data ; }; </ script > </ body > </ html > In Zeile 10 wird mithilfe des Worker -Kunstruktors ein Worker -Objekt erzeugt. Dem Konstruktor wird die Implementierung des workers \u00fcbergeben, genauer gesagt, die Implementierung des Event-Handlers f\u00fcr onmessage des Worker -Objektes. Die Implementierung des onmessage -Event-Handlers sieht typischerweise so aus, dass der service worker mit einer postMessage antwortet und diese an die Seite \u00fcbergibt. In unserem Beispiel ist die Implementierung wie folgt: worker.js 1 2 3 4 5 6 7 8 9 var n = 1 ; search : while ( true ) { n += 1 ; for ( var i = 2 ; i <= Math . sqrt ( n ); i += 1 ) if ( n % i == 0 ) continue search ; // found a prime! postMessage ( n ); } Zeile 8 enth\u00e4lt die postMessage . Darin wird eine Zahl n an die Seite geschickt, sobald sie berechnet wurde. Es handelt sich bei der Berechnung um eine Primzahlberechnung. Das hei\u00dft, der service worker arbeitet im Hintergrund und \"sucht\" neue Primzahlen. Sobald der service worker eine neue Primzahl gefunden hat, schickt er diese mithilfe der postMessage() -Funktion an die Webseite. Dadurch wird das onmessage -Ereignis (genauer gesagt, handelt es sich um das message -Event) behandelt. Wann immer onmessage auftritt, aktualisiert die Seite, genauer gesagt, der textContent des <output> -Elementes mit der id= \"result\" (siehe Zeilen 11-13 in index.html ). Dieses Beispiel ist extra einfach gehalten. genauer gesagt, handelt es sich bei dem Beispiel \"nur\" um einen web worker . Das W3C unterscheidet zwischen service workers und web workers . Der Unterschied zwischen web worker und * service worker* wird z.B. hier beschrieben.","title":"Einfaches Beispiel service worker"},{"location":"serviceworker/#web-worker-vs-service-worker","text":"Wir verwenden f\u00fcr die Unterscheidung zwischen web worker und service worker haupts\u00e4chlich dieses Dokument . Darin finden wir auch folgendes Bild zur Beschreibung eines web workers: Ein web worker hat kein spezifisches Einsatzszenario, au\u00dfer dass er unabh\u00e4ngig von Hauptthread der Anwendung l\u00e4uft und Nachrichten mittels postMessage() an die Anwendung schicken kann. Demgegen\u00fcber ist ein service worker ein spezieller web worker , der als Proxy zwischen Anwendung und dem Netzwerk bzw. dem Cache agiert. Service workers verf\u00fcgen \u00fcber mehr Funktionalit\u00e4ten als web workers . Dazu geh\u00f6ren einerseits die Ereignisse, auf die service workers reagieren k\u00f6nnen: install und activate (sogenannte Lifecycle events ), fetch und weitere Ereignisse, die durch Erweiterungen spezifiziert werden, z.B. push , notificationclick , notificationclose , sync , canmakepayment , paymentrequest usw. (sogenannte Functional events ) sowie message und messageerror vom Web worker und andererseits die Status, in denen sich ein service worker befinden kann: parsed , installing , installed , activating , activated und redundant (initial: parsed ) Die prinzipielle Idee der Registrierung eines service workers sieht so aus: Die beiden Lifecycle-Events install und activate sind bereits eingezeichnet. Dabei ist zu betonen, dass ein service worker erst dann aktiviert werden kann, wenn kein anderer service worker mehr (in der gleichen Dom\u00e4ne/im gleichen Scope) l\u00e4uft. Ein anderer service worker, der eventuell noch l\u00e4uft, muss erst geschlossen werden, bevor der neue service worker das activate -Ereignis ausl\u00f6sen kann. Damit ein solcher \"alter\" service worker geschlossen werden kann, m\u00fcssen zumindest alle Tabs im Browser, in denen die Webanwendung l\u00e4uft, geschlossen werden. Selbst dann l\u00e4uft der service worker aber immernoch weiter. Er muss explizit geschlossen werden. Das zeigen wir sp\u00e4ter.","title":"Web worker vs. service worker"},{"location":"serviceworker/#registrierung-eines-service-workers","text":"W\u00e4hrend wir f\u00fcr das einfache Beispiel mit dem web worker noch den Worker() -Konstruktor verwendet haben, erfolgt die Registrierung eines service workers mittels navigator.serviceWorker.register('./sw.js') , wobei in sw.js der service worker implementiert ist. Wir schauen uns die prinzipielle Registrierung an: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 <! DOCTYPE HTML > < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Erstes Beispiel service worker < /title> < /head> < body > < p > \u00d6ffne die developer tools < /p> < script > if ( 'serviceWorker' in navigator ) { // Register a service worker hosted at the root of the // site using the default scope. navigator . serviceWorker . register ( './sw.js' ). then ( function ( registration ) { console . log ( 'Service worker registration succeeded:' , registration ); console . log ( 'Scope ist ' + registration . scope ); // At this point, you can optionally do something // with registration. See https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration }). catch ( function ( error ) { console . log ( 'Service worker registration failed:' , error ); }); // Independent of the registration, let's also display // information about whether the current page is controlled // by an existing service worker, and when that // controller changes. // First, do a one-off check if there's currently a // service worker in control. if ( navigator . serviceWorker . controller ) { console . log ( 'This page is currently controlled by:' , navigator . serviceWorker . controller ); } // Then, register a handler to detect when a new or // updated service worker takes control. navigator . serviceWorker . oncontrollerchange = function () { console . log ( 'This page is now controlled by:' , navigator . serviceWorker . controller ); }; } else { console . log ( 'Service workers are not supported.' ); } < /script> < /body> < /html> Wir haben hier die registrierung des service workers innerhalb des <script> -Elementes. Besser (und das werden wir sp\u00e4ter auch immer machen) ist die Erstellung einer eigenen .js -Datei daf\u00fcr. Wenn wir die Developer Tools \u00f6ffnen, sehen wir auf der Console folgende Ausgabe: F\u00fcr diejenigen, f\u00fcr die das Registrierungs-Beispiel oben zu lang ist, hier die Version von W3C : 1 2 3 4 5 6 7 8 9 10 // scope defaults to the path the script sits in // \"/\" in this example navigator . serviceWorker . register ( \"/serviceworker.js\" ). then ( registration => { console . log ( \"success!\" ); if ( registration . installing ) { registration . installing . postMessage ( \"Howdy from your installing page.\" ); } }, err => { console . error ( \"Installing the worker failed!\" , err ); });","title":"Registrierung eines service workers"},{"location":"serviceworker/#registrierung-eines-service-workers-in-htw-insta","text":"Nun, da wir wissen, wie die Registrierung eines service workers prinzipiell funktioniert, f\u00fcgen wir unserem HTW-Insta -Beispiel einen solchen hinzu. Den aktuellen Stand der Anwendung finden Sie unter IKT-PWA-02 . Das ist die Version, in der bereits das Web-App-Manifest enthalten ist. Zun\u00e4chst beachten wir noch einen besonderen Eintrag in der package.json : package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \"name\" : \"IKT-PWA-02\" , \"version\" : \"1.0.0\" , \"description\" : \"Grundger\u00fcst einer PWA mit Web-App-Manifest\" , \"main\" : \"index.js\" , \"scripts\" : { \"start\" : \"http-server -c-1\" }, \"keywords\" : [ \"pwa\" , \"progressive\" , \"web\" , \"app\" , \"ikt\" , \"htw\" , \"fiw\" ], \"author\" : \"J. freiheit\" , \"license\" : \"ISC\" , \"devDependencies\" : { \"http-server\" : \"^14.1.0\" } } In Zeile 7 wird definiert, dass wir bei Aufruf des npm start -Befehls den Webserver http-server starten. Das Argument -c-1 besagt, dass wir f\u00fcr diesen Server nicht den Browser-Cache verwenden wollen. Jede datei, die wir somit vom Webserver anfordern, wird somit auch tats\u00e4chlich neu geladen. Stattdessen wollen wir n\u00e4mlich nur den Cache des service workers verwenden. F\u00fcr unseren service worker erstellen wir uns im public -Ordner eine Datei sw.js . Da der service worker im public -Ordner angelegt wird, ist sein Scope unsere komplette Webanwendung. Wollten wir z.B. einen service worker, der nur f\u00fcr unsere Hilfe-Seiten zust\u00e4ndig ist, so h\u00e4tten wir die Datei im help -Ordner erzeugt. Um unseren service worker zu registrieren, m\u00fcssen wir ihn in alle unsere HTML-Seiten einbinden. Wir haben die /public/index.html -Datei und die /public/help/index.html . Dort k\u00f6nnten wir innerhalb des eines <script> -Elementes die Registrierung durchf\u00fchren. Da wir aber bereits in beiden Dateien die Datei public/src/js/app.js einbinden, erledigen wir die Registrierung einfach dort. Dann ist sie nur an einer Stelle und wir m\u00fcssen die HTML-Dateien nicht anpassen. In die /public/src/js/app.js schreiben wir nun Folgendes: /public/src/js/app.js 1 2 3 4 5 6 7 if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( '/sw.js' ) . then ( function () { console . log ( 'service worker registriert' ) }); } Starten unserer Anwendung und Aufruf im Browser ergibt die Ausgabe service worker registriert in der Konsole der DevTools. Im Zusammenhang mit service workern gibt es folgendes zu beachten: service worker funktionieren nur mit https oder auf localhost! Wundern Sie sich also nicht, wenn Ihr service worker nicht funktioniert, sobald Sie Ihre Anwendung auf einem Webserver ausf\u00fchren, der https nicht unterst\u00fctzt. Anleitungen, wie Sie einen Webserver f\u00fcr https konfigurieren, finden Sie z.B. hier . Schauen Sie ansonsten auch hier und hier .","title":"Registrierung eines service workers in HTW-Insta"},{"location":"serviceworker/#service-worker-life-cycle-ereignisse-behandeln","text":"Nun implementieren wir den service worker. Wir haben ihn bereits registriert, aber die Datei sw.js ist noch leer. Die grundlegende Idee eines service workers ist es, Ereignisse zu behandeln. Wir werden unserem service worker also eine Reihe von addEventListener() -Funktionen hinzuf\u00fcgen. Diese Funktion kennen wir bereits aus \"normalem\" JavaScript-Code. Dort haben h\u00e4ufig so etwas wie addEventListener('click', function() { /* ... */ }) geschrieben. Das click -Ereignis hat aber keine Relevanz f\u00fcr service worker, da ein service worker keine Auswirkungen auf das DOM hat. Vielmehr reagiert ein service worker auf Ereignisse, die wir bereits oben beschrieben haben. Wir f\u00fcgen unserem service worker Ereignisbehandlungen hinzu: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , function ( event ) { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , function ( event ) { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Wir melden uns also an zwei Ereignisse an: an das install -Ereignis und das activate -Ereignis. Beide Ereignisse sind auch gut hier beschrieben. Beide Ereignisbehandlungen sind zun\u00e4chst einfache Ausgaben auf die Konsole. Zwei Sachen sind noch erw\u00e4hnenswert: erstens wird self verwendet, um auf den service worker zu referenzieren. F\u00fcr Erl\u00e4uterungen \u00fcber den Unterschied von this und self k\u00f6nnen Sie sich z.B. hier informieren. Grunds\u00e4tzlich ist es so, dass mit self auf den gesamten Scope referenziert wird. In Webanwendungen ist der Scope h\u00e4ufig window , hier ist es aber die Domain, die den Scope des service workers beschreibt. Wir referenzieren also nicht auf den service worker selbst, sondern auf seinen Scope. Die zweite erw\u00e4hnenswerte Sache steht in Zeile 7 . Wenn ein service worker registriert ist, dann \"kontrolliert\" er nicht automatisch alle Webseiten in seiner Domain. Erst durch das Neuladen dieser Seiten gelangen sie unter seine Kontrolle. Mithilfe der claim() -Funktion aus dem Interface Clients \u00fcbernimmt der service worker die Kontrolle aber sofort, d.h. ohne ein Neuladen der Site. Einzige Ausnahme ist die Seite, die aktuell im Browser gezeigt wird. F\u00fcr diese muss tats\u00e4chlich ein Reload durchgef\u00fchrt werden. Weitere Informationen dazu finden Sie auch hier . Wenn wir die Anwendung nun starten und dann im Browser aufrufen, erhalten wir folgende Ausgabe auf der Konsole: Wir sehen, dass das install -Ereignis ausgel\u00f6st wurde, aber offensichtlich nicht das activate -Ereignis. Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Darum k\u00fcmmern wir uns im folgenden Abschnitt. Noch eine kurze Bemerkung zur Reihenfolge der Ausgaben auf der Konsole. Auf der Konsole haben wir folgende Ausgaben: service worker registriert service worker --> installing ... Das verwundert wahrscheinlich, weil das install -Event ausgel\u00f6st wird, bevor der service worker (existiert und) registriert werden kann. Also m\u00fcssten die Ausgaben eigentlich in der anderen Reihenfolge erscheinen. Wir erinnern uns (siehe zweite Abbildung ganz oben in diesem Kapitel): der service worker l\u00e4uft auf einem anderen Thread, als das \"normale\" JavaScript unserer Webanwendung. Also laufen app.js und sw.js auf verschiedenen Threads. In welchem dieser beiden Threads nun zuerst eine Ausgabe erfolgt, h\u00e4ngt von vielen verschiedenen Faktoren ab, l\u00e4sst sich aber auch nicht beeinflussen. Dieses Mal war es so, dass der app.js -Thread schneller mit der Ausgabe war, als der sw.js -Thread. Das kann beim n\u00e4chsten Mal schon anders sein. Wichtig ist, dass wir wissen, dass diese beiden Threads g\u00e4nzlich nebenl\u00e4ufig und unabh\u00e4ngig voneinander laufen. Sollten sich dabei Ausgaben \"\u00fcberholen\", dann ist das kein Bug, sondern ein Feature.","title":"Service worker: Life-Cycle-Ereignisse behandeln"},{"location":"serviceworker/#service-worker-aktualisieren-und-aktivieren","text":"Warum wurde das activate -Ereignis nicht ausgel\u00f6st? Dazu werfen wir einen Blick in unsere DevTools. Wir w\u00e4hlen den Reiter Application und dann im linken Men\u00fc unter Application den Men\u00fcpunkt Service Woorkers : Wir sehen, dass der service worker im Status des Aktivierens ist, aber noch darauf wartet, aktiviert zu sein ( waiting to activate ). Hierzu ist es wichtig zu wissen: solange Sie im Browser (mindestens) einen Tab mit Ihrer Webanwendung offen haben, wird ein neuer service worker zwar installiert und registriert, aber nicht aktiviert, das liegt daran, dass die offene Seite eventuell noch mit einem alten service worker kommuniziert (evtl. hat der alte service worker noch etwas im Cache, das mit der Webanwendung synchronisiert werden m\u00fcsste). Wenn wir den Tab mit unserer Anwendung schlie\u00dfen und ihn erneut \u00f6ffnen, dann sehen wir: Es wurden also sowohl das install - als auch das activate -Ereignis ausgel\u00f6st. Auf der Konsole erscheint entsprechend: Wenn Sie Ihren service worker aktualisiert haben, m\u00fcssen Sie alle Tabs Ihrer Webanwendung schlie\u00dfen und erneut \u00f6ffnen, um den neuen service worker zu aktivieren! Beherzigen Sie die obige Ausgabe. Es kann Ihnen sehr viel Implementierungskummer bereiten, wenn Sie es nicht tun. Sie ver\u00e4ndern Ihren Code im service worker, aber die \u00c4nderungen sind nicht wirksam? Dann haben Sie vielleicht nur ein Reload Ihrer Webanwendung durchgef\u00fchrt - das reicht aber f\u00fcr den aktualisierten service worker nicht ! Aber zum Gl\u00fcck bieten die DevTools Hilfe, so dass Sie w\u00e4hrend der Entwicklung doch nicht immer den Tab schlie\u00dfen und neu \u00f6ffnen m\u00fcssen. Betrachten wir nochmals die folgende Abbildung: Sie haben drei M\u00f6glichkeiten, den service zu aktivieren: Markieren Sie die Checkbox links neben Update on reload . Dann wird durch das Reload Ihrer Webanwendung der aktualisierte service worker aktiviert. Klicken Sie auf den Link Update oder Klicken Sie auf den Link skipWaiting . Mit einem der drei Hilfen oben vermeiden Sie das Schlie\u00dfen und Neu\u00f6ffnen des Tabs und der Webanwendung. Am einfachsten ist die erste Variante. Dann m\u00fcssen Sie nur noch Reloaden und ansonsten weiter gar nichts machen.","title":"Service worker aktualisieren und aktivieren"},{"location":"serviceworker/#arrow-notation-verwenden","text":"Wenn wir uns die Implementierung des service workers anschauen, dann sehen wir, dass wir etwas \"old school\" unterwegs sind, also so ca. 2017 ;-). Wir sollten anstelle der function() -Notation lieber die Arrow -Notation verwenden, um ein bisschen mehr up-to-date zu sein ;-). Zu Arrow-Notation siehe auch Hilfen\u2192Arrow-Notation . Unsere service worker Implementierung sieht dann so aus: /public/src/sw.js 1 2 3 4 5 6 7 8 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) Die neuere Notation \u00e4ndert an der Funktionalit\u00e4t nat\u00fcrlich nichts.","title":"Arrow-Notation verwenden"},{"location":"serviceworker/#service-worker-andere-ereignisse-behandeln","text":"Bis jetzt haben wir nur Life-Cycle-Events behandelt. Jetzt schauen wir uns einmal das fetch -Ereignis an. Wir wissen bereits , dass das fetch -Ereignis immer dann ausgel\u00f6st wird, wenn etwas vom Webserver geladen wird, wenn also CSS-Dateien oder ein Bild oder JavaScript-Dateien geladen werden. Wir behandeln ein solches Ereignis wiederum mit einer einfachen Konsolen-Ausgabe: /public/src/sw.js 1 2 3 4 5 6 7 8 9 10 11 12 self . addEventListener ( 'install' , event => { console . log ( 'service worker --> installing ...' , event ); }) self . addEventListener ( 'activate' , event => { console . log ( 'service worker --> activating ...' , event ); return self . clients . claim (); }) self . addEventListener ( 'fetch' , event => { console . log ( 'service worker --> fetching ...' , event ); }) Falls wir in den DevTools unter Application \u2192 Application \u2192 Service Workers das H\u00e4kchen bei Update on Reload gesetzt hatten, m\u00fcssen wir tats\u00e4chlich nur ein Reload der Webanwendung durchf\u00fchren und wir sehen auf der Konsole, dass das fetch -Event selbst f\u00fcr unsere bis jetzt sehr kleine Anwendung recht h\u00e4ufig aufgerufen wird: Wenn Sie in die jeweiligen FetchEvent -Objekte hineinklicken, welche Ressourcen jeweils per GET vom Webserver geladen werden.","title":"Service worker: andere Ereignisse behandeln"},{"location":"serviceworker/#anwendung-mit-einem-android-gerat-verbinden","text":"Ich kann es leider (bis jetzt noch) nicht ausprobieren, aber hier ist beschrieben, wie Sie die Anwendung auf einem Android-Ger\u00e4t aufrufen k\u00f6nnen. Nun, da wir service worker verwenden, sollte es funktionieren. Das hier mag auch hilfreich sein.","title":"Anwendung mit einem Android-Ger\u00e4t verbinden"},{"location":"serviceworker/#anwendung-auf-ihrem-iphone-aufrufen","text":"Um die Anwendung auf Ihrem iPhone aufzurufen, m\u00fcssen Sie sich zun\u00e4chst nur anschauen, was im Terminal ausgegeben wird, nachdem Sie npm start aufgerufen haben: Starting up http-server, serving ./public Available on: http://127.0.0.1:8080 htpp://192.168.1.24:8080 Hit CTRL-C to stop the server Rufen Sie in Ihrem iPhone einen Browser auf (z.B. Safari oder Chrome) und geben dort di ezweite der beiden URLs ein (also htpp://192.168.1.24:8080 ). Die Anwendung wird ausgef\u00fchrt. iOS unterst\u00fctzt aber leider (noch) nicht, dass Sie ein Start-Icon daf\u00fcr auf den Startbildschirm ablegen.","title":"Anwendung auf Ihrem iPhone aufrufen"},{"location":"tools/","text":"Werkzeuge \u00b6 Chrome \u00b6 Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen. Integrated Development Environment (IDE) \u00b6 F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Node.js \u00b6 Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner. Android Studio \u00b6 Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)). https f\u00fcr localhost \u00b6 f\u00fcr Mac siehe hier https f\u00fcr Webserver \u00b6 siehe hier siehe hier Ngrok \u00b6 Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft. Icons erzeugen und in die manifest.json eintragen \u00b6 Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier . WebApp-Manifest-Generator \u00b6 Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier . Workbox \u00b6 Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt. MongoDB \u00b6 Es gibt zwei M\u00f6glichkeiten, MongoDB zu verwenden: entweder Sie nutzen das Cloud-Angebot, also eine Remote-MongoDB. Diese nennt sich MongoDB Atlas . Oder Sie installieren sich die MongoDB \"on-premise\", also lokal auf Ihrem Rechner. Dazu w\u00e4hlen Sie unter mongodb.com den Reiter Products on dort unter Community Edition den Link Community Server . Dann landen Sie auf https://www.mongodb.com/try/download/community . Dort k\u00f6nnen Sie sich die MongoDB herunterladen und installieren. Installationsanleitungen finden Sie unter https://www.mongodb.com/docs/manual/installation/ . Wichtig ist, dass die MongoDB einmalig mit mongod starten. MongoDB Compass \u00b6 Um sich Ihre MongoDB-Datenbanken anzuschauen (und auch, um Operationen darauf auszuf\u00fchren), empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach. Insomnia REST \u00b6 Eine gute Alternative zu Postman ist Insomnia . Sehr empfehlenswert! Aber Postman auch. Interssante Links zu PWA \u00b6 PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Tools"},{"location":"tools/#werkzeuge","text":"","title":"Werkzeuge"},{"location":"tools/#chrome","text":"Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren.","title":"Chrome"},{"location":"tools/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen.","title":"Lighthouse"},{"location":"tools/#integrated-development-environment-ide","text":"F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten.","title":"Integrated Development Environment (IDE)"},{"location":"tools/#nodejs","text":"Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner.","title":"Node.js"},{"location":"tools/#android-studio","text":"Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)).","title":"Android Studio"},{"location":"tools/#https-fur-localhost","text":"f\u00fcr Mac siehe hier","title":"https f\u00fcr localhost"},{"location":"tools/#https-fur-webserver","text":"siehe hier siehe hier","title":"https f\u00fcr Webserver"},{"location":"tools/#ngrok","text":"Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft.","title":"Ngrok"},{"location":"tools/#icons-erzeugen-und-in-die-manifestjson-eintragen","text":"Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier .","title":"Icons erzeugen und in die manifest.json eintragen"},{"location":"tools/#webapp-manifest-generator","text":"Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier .","title":"WebApp-Manifest-Generator"},{"location":"tools/#workbox","text":"Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt.","title":"Workbox"},{"location":"tools/#mongodb","text":"Es gibt zwei M\u00f6glichkeiten, MongoDB zu verwenden: entweder Sie nutzen das Cloud-Angebot, also eine Remote-MongoDB. Diese nennt sich MongoDB Atlas . Oder Sie installieren sich die MongoDB \"on-premise\", also lokal auf Ihrem Rechner. Dazu w\u00e4hlen Sie unter mongodb.com den Reiter Products on dort unter Community Edition den Link Community Server . Dann landen Sie auf https://www.mongodb.com/try/download/community . Dort k\u00f6nnen Sie sich die MongoDB herunterladen und installieren. Installationsanleitungen finden Sie unter https://www.mongodb.com/docs/manual/installation/ . Wichtig ist, dass die MongoDB einmalig mit mongod starten.","title":"MongoDB"},{"location":"tools/#mongodb-compass","text":"Um sich Ihre MongoDB-Datenbanken anzuschauen (und auch, um Operationen darauf auszuf\u00fchren), empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach.","title":"MongoDB Compass"},{"location":"tools/#insomnia-rest","text":"Eine gute Alternative zu Postman ist Insomnia . Sehr empfehlenswert! Aber Postman auch.","title":"Insomnia REST"},{"location":"tools/#interssante-links-zu-pwa","text":"PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Interssante Links zu PWA"}]}