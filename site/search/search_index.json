{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aktuelle Trends der IKT \u00b6 Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT ! Grober Inhalt \u00b6 Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Woche Themen (Vorlesung) Aufgabe (Stand) Abgabe \u00dcbung bis 1. 10.-14.04.2023 Einf\u00fchrung und Organisatorisches - - 2. 17.-21.04.2023 Grundger\u00fcst und Application Manifest - 30.04.2023 3. 24.-28.04.2023 Service workers - 07.05.2023 4. 01.-05.05.2023 Promises und Fetch API - 14.05.2023 5. 08.-12.05.2023 Service workers und Caching - 21.05.2023 6. 15.-19.05.2023 MongoDB und Backend - 28.05.2023 7. 22.-26.05.2023 Bilder-Up- und Download (Backend) - 04.06.2023 8. 29.-02.06.2023 IndexedDB - 11.06.2023 9. 05.-09.06.2023 Kamera - 18.06.2023 10. 12.-16.06.2023 Geolocation Datenbank - 11. 19.-23.06.2023 Hintergrundsynchronisation Backend - 12. 26.-30.06.2023 Push-Notifikationen Backend - 13. 03.-06.07.2023 Wiederholung Frontend - 14. 10.-14.07.2023 Wiederholung Frontend - Gespr\u00e4che 1.PZ 26.07.2023 (Abgabe 25.07.2023) - Gespr\u00e4che 2.PZ 27.09.2023 (Abgabe 26.09.2023) - Organisatorisches \u00b6 Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie am Ende des Semesters die L\u00f6sung Ihrer Semesteraufgabe abgeben. Diese Aufgabe zusammen mit einem Gespr\u00e4ch, das wir \u00fcber Ihre L\u00f6sung f\u00fchren, wird bewertet. Die Bewertung entspricht dann der Modulnote. Die \u00dcbungen sind daf\u00fcr vorgesehen, dass Sie im Semester sukzessive Ihre L\u00f6sung erstellen k\u00f6nnen. Wir beantworten in den \u00dcbungen Ihre Fragen und l\u00f6sen gemeinsam Probleme. Jede Woche gibt es ein Thema, das Sie selbst\u00e4ndig durcharbeiten und dann angepasst in Ihre L\u00f6sung integrieren k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt! Semesteraufgabe \u00b6 Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein ( mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein - aber nicht Firebase!), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden, eine aussagekr\u00e4ftige README.md -Datei enthalten, die sowohl die Anwendung (Screenshots) gut pr\u00e4sentiert, als auch alle Anweisungen zur Installation. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und deployed, kann es auch eine 1,0 werden. Die Anwendung muss in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Home"},{"location":"#aktuelle-trends-der-ikt","text":"Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT !","title":"Aktuelle Trends der IKT"},{"location":"#grober-inhalt","text":"Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Woche Themen (Vorlesung) Aufgabe (Stand) Abgabe \u00dcbung bis 1. 10.-14.04.2023 Einf\u00fchrung und Organisatorisches - - 2. 17.-21.04.2023 Grundger\u00fcst und Application Manifest - 30.04.2023 3. 24.-28.04.2023 Service workers - 07.05.2023 4. 01.-05.05.2023 Promises und Fetch API - 14.05.2023 5. 08.-12.05.2023 Service workers und Caching - 21.05.2023 6. 15.-19.05.2023 MongoDB und Backend - 28.05.2023 7. 22.-26.05.2023 Bilder-Up- und Download (Backend) - 04.06.2023 8. 29.-02.06.2023 IndexedDB - 11.06.2023 9. 05.-09.06.2023 Kamera - 18.06.2023 10. 12.-16.06.2023 Geolocation Datenbank - 11. 19.-23.06.2023 Hintergrundsynchronisation Backend - 12. 26.-30.06.2023 Push-Notifikationen Backend - 13. 03.-06.07.2023 Wiederholung Frontend - 14. 10.-14.07.2023 Wiederholung Frontend - Gespr\u00e4che 1.PZ 26.07.2023 (Abgabe 25.07.2023) - Gespr\u00e4che 2.PZ 27.09.2023 (Abgabe 26.09.2023) -","title":"Grober Inhalt"},{"location":"#organisatorisches","text":"Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie am Ende des Semesters die L\u00f6sung Ihrer Semesteraufgabe abgeben. Diese Aufgabe zusammen mit einem Gespr\u00e4ch, das wir \u00fcber Ihre L\u00f6sung f\u00fchren, wird bewertet. Die Bewertung entspricht dann der Modulnote. Die \u00dcbungen sind daf\u00fcr vorgesehen, dass Sie im Semester sukzessive Ihre L\u00f6sung erstellen k\u00f6nnen. Wir beantworten in den \u00dcbungen Ihre Fragen und l\u00f6sen gemeinsam Probleme. Jede Woche gibt es ein Thema, das Sie selbst\u00e4ndig durcharbeiten und dann angepasst in Ihre L\u00f6sung integrieren k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!","title":"Organisatorisches"},{"location":"#semesteraufgabe","text":"Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein ( mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein - aber nicht Firebase!), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden, eine aussagekr\u00e4ftige README.md -Datei enthalten, die sowohl die Anwendung (Screenshots) gut pr\u00e4sentiert, als auch alle Anweisungen zur Installation. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und deployed, kann es auch eine 1,0 werden. Die Anwendung muss in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Semesteraufgabe"},{"location":"openapi/","text":"OpenAPI \u00b6 Folgende Endpunkte: GET /expenses POST /expense DELETE /expense/:id GET /expenses/date/:from/:to GET /expenses/range/:from/:to \u00f6ffne https://app.swaggerhub.com/home registrieren und einloggen Create New","title":"OpenAPI"},{"location":"openapi/#openapi","text":"Folgende Endpunkte: GET /expenses POST /expense DELETE /expense/:id GET /expenses/date/:from/:to GET /expenses/range/:from/:to \u00f6ffne https://app.swaggerhub.com/home registrieren und einloggen Create New","title":"OpenAPI"},{"location":"tools/","text":"Werkzeuge \u00b6 Chrome \u00b6 Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen. Integrated Development Environment (IDE) \u00b6 F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Node.js \u00b6 Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner. Android Studio \u00b6 Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)). https f\u00fcr localhost \u00b6 f\u00fcr Mac siehe hier https f\u00fcr Webserver \u00b6 siehe hier siehe hier Ngrok \u00b6 Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft. Icons erzeugen und in die manifest.json eintragen \u00b6 Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier . WebApp-Manifest-Generator \u00b6 Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier . Workbox \u00b6 Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt. MongoDB \u00b6 Es gibt zwei M\u00f6glichkeiten, MongoDB zu verwenden: entweder Sie nutzen das Cloud-Angebot, also eine Remote-MongoDB. Diese nennt sich MongoDB Atlas . Oder Sie installieren sich die MongoDB \"on-premise\", also lokal auf Ihrem Rechner. Dazu w\u00e4hlen Sie unter mongodb.com den Reiter Products on dort unter Community Edition den Link Community Server . Dann landen Sie auf https://www.mongodb.com/try/download/community . Dort k\u00f6nnen Sie sich die MongoDB herunterladen und installieren. Installationsanleitungen finden Sie unter https://www.mongodb.com/docs/manual/installation/ . Wichtig ist, dass die MongoDB einmalig mit mongod starten. MongoDB Compass \u00b6 Um sich Ihre MongoDB-Datenbanken anzuschauen (und auch, um Operationen darauf auszuf\u00fchren), empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach. Insomnia REST \u00b6 Eine gute Alternative zu Postman ist Insomnia . Sehr empfehlenswert! Aber Postman auch. Interssante Links zu PWA \u00b6 PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Tools"},{"location":"tools/#werkzeuge","text":"","title":"Werkzeuge"},{"location":"tools/#chrome","text":"Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren.","title":"Chrome"},{"location":"tools/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen.","title":"Lighthouse"},{"location":"tools/#integrated-development-environment-ide","text":"F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten.","title":"Integrated Development Environment (IDE)"},{"location":"tools/#nodejs","text":"Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner.","title":"Node.js"},{"location":"tools/#android-studio","text":"Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)).","title":"Android Studio"},{"location":"tools/#https-fur-localhost","text":"f\u00fcr Mac siehe hier","title":"https f\u00fcr localhost"},{"location":"tools/#https-fur-webserver","text":"siehe hier siehe hier","title":"https f\u00fcr Webserver"},{"location":"tools/#ngrok","text":"Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft.","title":"Ngrok"},{"location":"tools/#icons-erzeugen-und-in-die-manifestjson-eintragen","text":"Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier .","title":"Icons erzeugen und in die manifest.json eintragen"},{"location":"tools/#webapp-manifest-generator","text":"Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier .","title":"WebApp-Manifest-Generator"},{"location":"tools/#workbox","text":"Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt.","title":"Workbox"},{"location":"tools/#mongodb","text":"Es gibt zwei M\u00f6glichkeiten, MongoDB zu verwenden: entweder Sie nutzen das Cloud-Angebot, also eine Remote-MongoDB. Diese nennt sich MongoDB Atlas . Oder Sie installieren sich die MongoDB \"on-premise\", also lokal auf Ihrem Rechner. Dazu w\u00e4hlen Sie unter mongodb.com den Reiter Products on dort unter Community Edition den Link Community Server . Dann landen Sie auf https://www.mongodb.com/try/download/community . Dort k\u00f6nnen Sie sich die MongoDB herunterladen und installieren. Installationsanleitungen finden Sie unter https://www.mongodb.com/docs/manual/installation/ . Wichtig ist, dass die MongoDB einmalig mit mongod starten.","title":"MongoDB"},{"location":"tools/#mongodb-compass","text":"Um sich Ihre MongoDB-Datenbanken anzuschauen (und auch, um Operationen darauf auszuf\u00fchren), empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach.","title":"MongoDB Compass"},{"location":"tools/#insomnia-rest","text":"Eine gute Alternative zu Postman ist Insomnia . Sehr empfehlenswert! Aber Postman auch.","title":"Insomnia REST"},{"location":"tools/#interssante-links-zu-pwa","text":"PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Interssante Links zu PWA"},{"location":"uebungen/","text":"\u00dcbungen \u00b6 \u00dcbung 1 (Grundger\u00fcst) \u00b6 \u00dcbung 1 In der ersten \u00dcbung geht es \"nur\" darum, das Grundger\u00fcst zu verstehen. Arbeiten Sie dazu diesen Abschnitt durch. Sie werden feststellen, dass sich die meisten Anweisungen (insb. im HTML -Code) auf Material Design Lite beziehen. Um zu erkennen, was einen Material Design Lite -Bezug hat (und somit nicht wirklich wichtig ist), \u00e4ndern Sie das Grundger\u00fcst so, dass Sie nicht Material Design Lite , sondern Bootstrap verwenden. Werfen Sie also Material Design Lite komplett raus und ersetzen es vollst\u00e4ndig durch Bootstrap. L\u00f6schen Sie die material.min.js aus dem public/js -Ordner. Starten Sie am besten damit, diese drei Zeilen aus den beiden index.html -Dateien zu l\u00f6schen: < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > F\u00fcgen Sie stattdessen den CSS-Link und das JS-Bundle aus https://getbootstrap.com/docs/4.6/getting-started/introduction/ ein. Sie k\u00f6nnen ja versuchen, dass es m\u00f6glichst \u00e4hnlich aussieht: \u00dcbung 2 (Web App Manifest) \u00b6 \u00dcbung 2 Erweitern Sie Ihre Anwendung (oder das Grundger\u00fcst) um ein Web App Manifest. Verwenden Sie zur Erstellung des Manifestes am besten den Web-App-Manifest-Generator . W\u00e4hlen Sie ein eigenes Icon. Beachten Sie, dass das Original-Icon die Ma\u00dfe 512x512 Pixel aufweisen muss. Der Web-App-Manifest-Generator f\u00fcgt das Original-Icon nicht dem Manifest hinzu. Lighthouse beschwert sich dar\u00fcber, dass dem Manifest ein 512x512-Icon fehlt. F\u00fcgen Sie dieses am besten noch h\u00e4ndisch hinzu. Die Anwendung soll in dem Moment installiert werden, wenn die Nutzerin das erste Mal auf den + -Button klickt. Das hei\u00dft, es wird das beforeinstallprompt -Ereignis ausgel\u00f6st und die Behandlung dieses Ereignisses sorgt daf\u00fcr, dass Sie die Anwendung genau dann installieren, wenn Sie das erste Mal den + -Button klicken: Hinweise und Hilfestellungen finden Sie z.B. hier oder im Skript (enth\u00e4lt weitere Links) oder im Video zum Manifest . \u00dcbung 3 (Promises und Fetch API) \u00b6 \u00dcbung 3 Laden Sie hier die Anwendung f\u00fcr \u00dcbung 3 herunter . Es handelt sich um eine zip-Datei. Entpacken Sie diese, \u00f6ffnen Sie sie in Ihrer IDE und folgen Sie der README.MD. In der \u00dcbung \u00fcben wir Promises und die Fetch API. \u00d6ffnen Sie die Datei public/src/js/app.js . Die \u00dcbung besteht aus 3 Teilen: Teil 1 : f\u00fchren Sie ein fetch() als GET nach https://httpbin.org/ip aus und geben Sie die zur\u00fcckgegebene IP in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 2 : f\u00fchren Sie ein fetch() als PUT nach https://httpbin.org/put aus. Das \u00fcbergebene JSON wird von dort einfach zur\u00fcckgespiegelt. Geben Sie einen oder mehrere Werte aus diesem JSON in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 3 : bauen Sie einen Fehler in die Anfrage (z.B. falsche Url) und behandeln Sie diesen Fehler mit einer Ausgabe auf die Konsole. Hinweise und Hilfestellungen finden Sie im Skript unter Promises und die Fetch-API . \u00dcbung 4 (Entwicklungs-Infrastruktur einrichten) \u00b6 \u00dcbung 4 Wir richten unsere Entwicklungs-Infrastruktur, die wir ben\u00f6tigen, um eine Frontend-Backend-Datenbank-App zu erstellen. Lokalen Webserver einrichten: Es sollte etwas Sinnvolles erscheinen, wenn Sie http://localhost/ in den Browser eingeben (also entweder wird eine eigene html- oder php-Datei ge\u00f6ffnet, oder es steht soetwas wie It works ). Wenn das nicht der Fall ist, dann ben\u00f6tigen Sie erst noch einen Webserver. Auf dem Mac und unter Linux existiert aber immer bereits einer, nur unter Windows muss dann z.B. XAMPP installiert werden. Sie m\u00fcssen wissen, aus welchem Ordner die Ressourcen geladen werden, wenn Sie http://localhost/ in den Browser eingeben. Diesen Ordner nennen wir DocumentRoot . Der Standard-DocumentRoot-Ordner auf dem Mac ist /Library/WebServer/Documents , unter Linux /www/html/ , unter Windows (XAMPP) /xampp/htdocs . Vor den angegebenen Pfaden kann in Linux und Windows noch etwas stehen, das h\u00e4ngt von der Konfiguration ab und wo Sie Ihr XAMPP unter Windows installiert haben. Wichtig ist, dass Sie gen\u00fcgend Schreibrechte auf den DocumentRoot-Ordner haben! Das ist typischerweise beim Mac unter /Library/WebServer/Documents nicht der Fall. Passen Sie auch auf, dass unter Windows Ihr xampp -Ordner nicht bereits zu tief in der Ordnerstruktur steckt. Gehen Sie entsprechende Anleitungen durch, um Ihr DocumentRoot zu \u00e4ndern. Mein DocumentRoot ist z.B. unter /Users/jornfreiheit/Sites . Hier einige Anleitungen: Windows , Windows , Windows , Mac . Erstellen Sie zum Testen in Ihrem DocumentRoot-Ordner eine index.html -Datei mit folgendem Inhalt: <html><body><h1>DocumentRoot korrekt eingerichtet!</h1></body></html> und rufen Sie dann im Browser http://localhost/ auf. Es sollte im Browser DocumentRoot korrekt eingerichtet! erscheinen. F\u00fcr phpMyAdmin ben\u00f6tigen Sie auch noch php . Erstellen Sie in Ihrem DocumentRoot-Ordner eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen Sie dann im Browser http://localhost/index.php auf. Es sollte etwas in dieser Art erscheinen: Wenn localhost funktioniert, dann gibt es mit PHP eigentlich nur (neuerdings - erst seit Big Sur) unter dem Mac Probleme. Nutzen Sie dann eine der folgenden Anleitungen: 1 , 2 , 3 . Datenbank einrichten: Sie m\u00fcssen nicht unbedingt ein lokales Datenbanksystem installieren, sondern k\u00f6nnen auch den Studi-Server https://studi.f4.htw-berlin.de verwenden. Wenn Sie sich lokal ein Datenbanksystem installieren, was man ruhig einmal gemacht haben sollte, dann ist es egal, ob Sie MariaDB (kommt mit XAMPP) oder MySQL installieren. Beide Systeme sind in der Anwendung v\u00f6llig gleich. Sie k\u00f6nnen auch Postgres verwenden, das habe ich aber nicht lokal und es kann sein, dass meine Anleitungen dann angepasst werden m\u00fcssten (vielleicht aber auch nicht). MariaDB wird mit XAMPP ausgeliefert - betrifft also haupts\u00e4chlich die Windows-Nutzerinnen XAMPP . F\u00fcr Mac ist die Installation von XAMPP nicht notwendig (und auch nicht empfehlenswert, da Sie ansonsten nur mehrere Webserver haben). F\u00fcr die Installation von MySQL unter Mac gibt es viele Videos, sollte aber auch so von hier aus gut funktionieren (eine weitere Anleitung z.B. hier ). phpmyadmin ist eine Weboberfl\u00e4che f\u00fcr die Verwaltung einer MySQl -Datenbank. Es ist sehr zu empfehlen, dass Sie sich phpmyadmin installieren, wenn Sie sich MySQL installiert haben. Installationanleitungen gibt es viele, z.B. f\u00fcr Mac , Linux und Windows . Im Prinzip m\u00fcssen Sie aber das phpmyadmin -Paket nur entpacken und in Ihren DocumentRoot-Ordner bewegen, dann k\u00f6nnen Sie phpmyadmin \u00fcber http://localhost/phpmyadmin aufrufen. Postman installieren: Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen HTTP-Anfragen m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js installieren: Node.js ist eine JavaScript-Laufzeitumgebung f\u00fcr einen Server. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Laden Sie sich hier Node.js herunter und installieren es. Paketmanager npm : Mit der Installation von node.js , installieren Sie auch den Paketmanager npm (siehe npmjs ). Sie k\u00f6nnen testen, ob die Installation von node und npm erfolgreich war, indem Sie im Terminal (Windows-Nutzerinnen bitte als Terminal die GitBash verwenden) eingeben: node --version Sollte etwas, wie v14.15.0 ausgeben und npm --version sollte etwas, wie 7.13.0 ausgeben. Angular-Command-Line-Interface (CLI) installieren: Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only ) Ich hoffe, es klappt alles! Eventuelle Probleme k\u00f6nnen wir in der Vorlesung am 26.5. und/oder in der \u00dcbung am 27.5. besprechen. \u00dcbung 5 (Backend) \u00b6 \u00dcbung 5 Erg\u00e4nzen Sie das in [Backend] erstellte Backend um einen REST-Endpunkt GET http://localhost:3000/posts/title Bei Aufruf dieses Endpunktes soll dem Request-Body ein JSON in der Form { \"title\" : \"first post\" } mitgesendet werden. Der Wert von title in diesem JSON wird verwendet, um den Datensatz/die Datens\u00e4tze auszulesen, die den title haben (also hier der Datensatz mit dem title \"first post\" ). \u00dcbung 6 (Frontend) \u00b6 \u00dcbung 6 Im Abschnitt Frontend haben wir uns ein Frontend erstellt, um mithilfe eines Formulars Daten (insb. ein Bild) einzugeben und diese in einer Datenbank abzuspeichern. Erweiteren Sie dieses Frontend um eine Komponente, die alle in der Datenbank gespeicherten Daten visualisiert, insb. die in der Datenbank gespeicherten Bilder. Erstellen Sie sich dazu eine neue Komponente. Sie m\u00fcssen dazu auch den PostService um die Anbindung an den Endpunkt GET /posts erweitern. Tipps : Es kann sein, dass Sie das vom Backend zur\u00fcckgegebene JSON ver\u00e4ndern m\u00fcssen. Derzeit wird f\u00fcr image ein ArrayBuffer zur\u00fcckgegeben, mit \"type\": \"Buffer\" und einem Array f\u00fcr \"data\" . Wenn Sie dieses Array Frontend-seitig verarbeiten k\u00f6nnen und als ein Bild angezeigt bekommen, dann w\u00fcrde mich sehr interessieren, wie Sie das gemacht haben. Ich habe das Backend angepasst und gebe den Base64 -Code f\u00fcr image zur\u00fcck. Im Frontend muss man diesen base64 -Code dann nur noch hinter den String 'data:image/jpg;base64,' h\u00e4ngen und erh\u00e4lt so den Wert f\u00fcr das src -Attribut eines Images. Schauen Sie sich dazu auch den Typ SafeResourceUrl und die Funktion bypassSecurityTrustResourceUrl(src) von DomSanitizer an. \u00dcbung 7 (IndexedDB) \u00b6 \u00dcbung 7 Im Abschnitt IndexedDB haben wir uns mit der Verwendung der In-Browser-datenbank IndexedDB vertraut gemacht. In dem dortigen letzten Abschnitt L\u00f6schen einzelner EIntr\u00e4ge haben wir in der db.js eine Funktion deleteOneData(st, id) geschrieben, die einen einzelnen Datensatz aus der IndexedDB mit der \u00fcbergebenen id l\u00f6scht. Implementieren Sie in der db.js eine Funktion deleteByTitle(st, title) , die den Datensatz (oder die Datens\u00e4tze) l\u00f6scht, der (oder die) in dem title -Attribut den der Methode als title \u00fcbergebenen String enth\u00e4lt. Z.B. soll aus dem Datensatz { id: 1 , title: \"first post\" , location: \"Berlin\" , image: \"/9j/4AA...UgP/9k=\" } { id: 2 , title: \"second post\" , location: \"Wilhelminenhof\" , image: \"/9j/4AA...VY/9k=\" } { id: 5 , title: \"fourth post\" , location: \"Gebaeude C\" , image: \"/9j/4AA...KOX/9k=\" } { id: 10 , title: \"HTW aus der Luft\" , location: \"Campus WH von oben\" , image: \"/9j/4AA...9z//2Q==\" } { id: 11 , title: \"Wilhelminenhofstra\u00dfe\" , location: \"Campus WH Eingang\" , image: \"/9j/4AA...U9D/9k=\" } bei Aufruf von deleteByTitle('posts', 'second') der zweite Datensatz mit der id: 2 gel\u00f6scht werden, bei Aufruf von deleteByTitle('posts', 'post') sollen die ersten drei Datens\u00e4tze (mit id:1 , id:2 und id:5 ) gel\u00f6scht werden. Tipps : Mit der Methode getAllKeys() ermitteln Sie z.B. alle Schl\u00fcssel ( id ) der Datens\u00e4tze und mit der Methode get(key) erhalten Sie den zum Schl\u00fcssel zugeh\u00f6rigen Wert.","title":"\u00dcbungen"},{"location":"uebungen/#ubungen","text":"","title":"\u00dcbungen"},{"location":"uebungen/#ubung-1-grundgerust","text":"\u00dcbung 1 In der ersten \u00dcbung geht es \"nur\" darum, das Grundger\u00fcst zu verstehen. Arbeiten Sie dazu diesen Abschnitt durch. Sie werden feststellen, dass sich die meisten Anweisungen (insb. im HTML -Code) auf Material Design Lite beziehen. Um zu erkennen, was einen Material Design Lite -Bezug hat (und somit nicht wirklich wichtig ist), \u00e4ndern Sie das Grundger\u00fcst so, dass Sie nicht Material Design Lite , sondern Bootstrap verwenden. Werfen Sie also Material Design Lite komplett raus und ersetzen es vollst\u00e4ndig durch Bootstrap. L\u00f6schen Sie die material.min.js aus dem public/js -Ordner. Starten Sie am besten damit, diese drei Zeilen aus den beiden index.html -Dateien zu l\u00f6schen: < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > F\u00fcgen Sie stattdessen den CSS-Link und das JS-Bundle aus https://getbootstrap.com/docs/4.6/getting-started/introduction/ ein. Sie k\u00f6nnen ja versuchen, dass es m\u00f6glichst \u00e4hnlich aussieht:","title":"\u00dcbung 1 (Grundger\u00fcst)"},{"location":"uebungen/#ubung-2-web-app-manifest","text":"\u00dcbung 2 Erweitern Sie Ihre Anwendung (oder das Grundger\u00fcst) um ein Web App Manifest. Verwenden Sie zur Erstellung des Manifestes am besten den Web-App-Manifest-Generator . W\u00e4hlen Sie ein eigenes Icon. Beachten Sie, dass das Original-Icon die Ma\u00dfe 512x512 Pixel aufweisen muss. Der Web-App-Manifest-Generator f\u00fcgt das Original-Icon nicht dem Manifest hinzu. Lighthouse beschwert sich dar\u00fcber, dass dem Manifest ein 512x512-Icon fehlt. F\u00fcgen Sie dieses am besten noch h\u00e4ndisch hinzu. Die Anwendung soll in dem Moment installiert werden, wenn die Nutzerin das erste Mal auf den + -Button klickt. Das hei\u00dft, es wird das beforeinstallprompt -Ereignis ausgel\u00f6st und die Behandlung dieses Ereignisses sorgt daf\u00fcr, dass Sie die Anwendung genau dann installieren, wenn Sie das erste Mal den + -Button klicken: Hinweise und Hilfestellungen finden Sie z.B. hier oder im Skript (enth\u00e4lt weitere Links) oder im Video zum Manifest .","title":"\u00dcbung 2 (Web App Manifest)"},{"location":"uebungen/#ubung-3-promises-und-fetch-api","text":"\u00dcbung 3 Laden Sie hier die Anwendung f\u00fcr \u00dcbung 3 herunter . Es handelt sich um eine zip-Datei. Entpacken Sie diese, \u00f6ffnen Sie sie in Ihrer IDE und folgen Sie der README.MD. In der \u00dcbung \u00fcben wir Promises und die Fetch API. \u00d6ffnen Sie die Datei public/src/js/app.js . Die \u00dcbung besteht aus 3 Teilen: Teil 1 : f\u00fchren Sie ein fetch() als GET nach https://httpbin.org/ip aus und geben Sie die zur\u00fcckgegebene IP in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 2 : f\u00fchren Sie ein fetch() als PUT nach https://httpbin.org/put aus. Das \u00fcbergebene JSON wird von dort einfach zur\u00fcckgespiegelt. Geben Sie einen oder mehrere Werte aus diesem JSON in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 3 : bauen Sie einen Fehler in die Anfrage (z.B. falsche Url) und behandeln Sie diesen Fehler mit einer Ausgabe auf die Konsole. Hinweise und Hilfestellungen finden Sie im Skript unter Promises und die Fetch-API .","title":"\u00dcbung 3 (Promises und Fetch API)"},{"location":"uebungen/#ubung-4-entwicklungs-infrastruktur-einrichten","text":"\u00dcbung 4 Wir richten unsere Entwicklungs-Infrastruktur, die wir ben\u00f6tigen, um eine Frontend-Backend-Datenbank-App zu erstellen. Lokalen Webserver einrichten: Es sollte etwas Sinnvolles erscheinen, wenn Sie http://localhost/ in den Browser eingeben (also entweder wird eine eigene html- oder php-Datei ge\u00f6ffnet, oder es steht soetwas wie It works ). Wenn das nicht der Fall ist, dann ben\u00f6tigen Sie erst noch einen Webserver. Auf dem Mac und unter Linux existiert aber immer bereits einer, nur unter Windows muss dann z.B. XAMPP installiert werden. Sie m\u00fcssen wissen, aus welchem Ordner die Ressourcen geladen werden, wenn Sie http://localhost/ in den Browser eingeben. Diesen Ordner nennen wir DocumentRoot . Der Standard-DocumentRoot-Ordner auf dem Mac ist /Library/WebServer/Documents , unter Linux /www/html/ , unter Windows (XAMPP) /xampp/htdocs . Vor den angegebenen Pfaden kann in Linux und Windows noch etwas stehen, das h\u00e4ngt von der Konfiguration ab und wo Sie Ihr XAMPP unter Windows installiert haben. Wichtig ist, dass Sie gen\u00fcgend Schreibrechte auf den DocumentRoot-Ordner haben! Das ist typischerweise beim Mac unter /Library/WebServer/Documents nicht der Fall. Passen Sie auch auf, dass unter Windows Ihr xampp -Ordner nicht bereits zu tief in der Ordnerstruktur steckt. Gehen Sie entsprechende Anleitungen durch, um Ihr DocumentRoot zu \u00e4ndern. Mein DocumentRoot ist z.B. unter /Users/jornfreiheit/Sites . Hier einige Anleitungen: Windows , Windows , Windows , Mac . Erstellen Sie zum Testen in Ihrem DocumentRoot-Ordner eine index.html -Datei mit folgendem Inhalt: <html><body><h1>DocumentRoot korrekt eingerichtet!</h1></body></html> und rufen Sie dann im Browser http://localhost/ auf. Es sollte im Browser DocumentRoot korrekt eingerichtet! erscheinen. F\u00fcr phpMyAdmin ben\u00f6tigen Sie auch noch php . Erstellen Sie in Ihrem DocumentRoot-Ordner eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen Sie dann im Browser http://localhost/index.php auf. Es sollte etwas in dieser Art erscheinen: Wenn localhost funktioniert, dann gibt es mit PHP eigentlich nur (neuerdings - erst seit Big Sur) unter dem Mac Probleme. Nutzen Sie dann eine der folgenden Anleitungen: 1 , 2 , 3 . Datenbank einrichten: Sie m\u00fcssen nicht unbedingt ein lokales Datenbanksystem installieren, sondern k\u00f6nnen auch den Studi-Server https://studi.f4.htw-berlin.de verwenden. Wenn Sie sich lokal ein Datenbanksystem installieren, was man ruhig einmal gemacht haben sollte, dann ist es egal, ob Sie MariaDB (kommt mit XAMPP) oder MySQL installieren. Beide Systeme sind in der Anwendung v\u00f6llig gleich. Sie k\u00f6nnen auch Postgres verwenden, das habe ich aber nicht lokal und es kann sein, dass meine Anleitungen dann angepasst werden m\u00fcssten (vielleicht aber auch nicht). MariaDB wird mit XAMPP ausgeliefert - betrifft also haupts\u00e4chlich die Windows-Nutzerinnen XAMPP . F\u00fcr Mac ist die Installation von XAMPP nicht notwendig (und auch nicht empfehlenswert, da Sie ansonsten nur mehrere Webserver haben). F\u00fcr die Installation von MySQL unter Mac gibt es viele Videos, sollte aber auch so von hier aus gut funktionieren (eine weitere Anleitung z.B. hier ). phpmyadmin ist eine Weboberfl\u00e4che f\u00fcr die Verwaltung einer MySQl -Datenbank. Es ist sehr zu empfehlen, dass Sie sich phpmyadmin installieren, wenn Sie sich MySQL installiert haben. Installationanleitungen gibt es viele, z.B. f\u00fcr Mac , Linux und Windows . Im Prinzip m\u00fcssen Sie aber das phpmyadmin -Paket nur entpacken und in Ihren DocumentRoot-Ordner bewegen, dann k\u00f6nnen Sie phpmyadmin \u00fcber http://localhost/phpmyadmin aufrufen. Postman installieren: Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen HTTP-Anfragen m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js installieren: Node.js ist eine JavaScript-Laufzeitumgebung f\u00fcr einen Server. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Laden Sie sich hier Node.js herunter und installieren es. Paketmanager npm : Mit der Installation von node.js , installieren Sie auch den Paketmanager npm (siehe npmjs ). Sie k\u00f6nnen testen, ob die Installation von node und npm erfolgreich war, indem Sie im Terminal (Windows-Nutzerinnen bitte als Terminal die GitBash verwenden) eingeben: node --version Sollte etwas, wie v14.15.0 ausgeben und npm --version sollte etwas, wie 7.13.0 ausgeben. Angular-Command-Line-Interface (CLI) installieren: Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only ) Ich hoffe, es klappt alles! Eventuelle Probleme k\u00f6nnen wir in der Vorlesung am 26.5. und/oder in der \u00dcbung am 27.5. besprechen.","title":"\u00dcbung 4 (Entwicklungs-Infrastruktur einrichten)"},{"location":"uebungen/#ubung-5-backend","text":"\u00dcbung 5 Erg\u00e4nzen Sie das in [Backend] erstellte Backend um einen REST-Endpunkt GET http://localhost:3000/posts/title Bei Aufruf dieses Endpunktes soll dem Request-Body ein JSON in der Form { \"title\" : \"first post\" } mitgesendet werden. Der Wert von title in diesem JSON wird verwendet, um den Datensatz/die Datens\u00e4tze auszulesen, die den title haben (also hier der Datensatz mit dem title \"first post\" ).","title":"\u00dcbung 5 (Backend)"},{"location":"uebungen/#ubung-6-frontend","text":"\u00dcbung 6 Im Abschnitt Frontend haben wir uns ein Frontend erstellt, um mithilfe eines Formulars Daten (insb. ein Bild) einzugeben und diese in einer Datenbank abzuspeichern. Erweiteren Sie dieses Frontend um eine Komponente, die alle in der Datenbank gespeicherten Daten visualisiert, insb. die in der Datenbank gespeicherten Bilder. Erstellen Sie sich dazu eine neue Komponente. Sie m\u00fcssen dazu auch den PostService um die Anbindung an den Endpunkt GET /posts erweitern. Tipps : Es kann sein, dass Sie das vom Backend zur\u00fcckgegebene JSON ver\u00e4ndern m\u00fcssen. Derzeit wird f\u00fcr image ein ArrayBuffer zur\u00fcckgegeben, mit \"type\": \"Buffer\" und einem Array f\u00fcr \"data\" . Wenn Sie dieses Array Frontend-seitig verarbeiten k\u00f6nnen und als ein Bild angezeigt bekommen, dann w\u00fcrde mich sehr interessieren, wie Sie das gemacht haben. Ich habe das Backend angepasst und gebe den Base64 -Code f\u00fcr image zur\u00fcck. Im Frontend muss man diesen base64 -Code dann nur noch hinter den String 'data:image/jpg;base64,' h\u00e4ngen und erh\u00e4lt so den Wert f\u00fcr das src -Attribut eines Images. Schauen Sie sich dazu auch den Typ SafeResourceUrl und die Funktion bypassSecurityTrustResourceUrl(src) von DomSanitizer an.","title":"\u00dcbung 6 (Frontend)"},{"location":"uebungen/#ubung-7-indexeddb","text":"\u00dcbung 7 Im Abschnitt IndexedDB haben wir uns mit der Verwendung der In-Browser-datenbank IndexedDB vertraut gemacht. In dem dortigen letzten Abschnitt L\u00f6schen einzelner EIntr\u00e4ge haben wir in der db.js eine Funktion deleteOneData(st, id) geschrieben, die einen einzelnen Datensatz aus der IndexedDB mit der \u00fcbergebenen id l\u00f6scht. Implementieren Sie in der db.js eine Funktion deleteByTitle(st, title) , die den Datensatz (oder die Datens\u00e4tze) l\u00f6scht, der (oder die) in dem title -Attribut den der Methode als title \u00fcbergebenen String enth\u00e4lt. Z.B. soll aus dem Datensatz { id: 1 , title: \"first post\" , location: \"Berlin\" , image: \"/9j/4AA...UgP/9k=\" } { id: 2 , title: \"second post\" , location: \"Wilhelminenhof\" , image: \"/9j/4AA...VY/9k=\" } { id: 5 , title: \"fourth post\" , location: \"Gebaeude C\" , image: \"/9j/4AA...KOX/9k=\" } { id: 10 , title: \"HTW aus der Luft\" , location: \"Campus WH von oben\" , image: \"/9j/4AA...9z//2Q==\" } { id: 11 , title: \"Wilhelminenhofstra\u00dfe\" , location: \"Campus WH Eingang\" , image: \"/9j/4AA...U9D/9k=\" } bei Aufruf von deleteByTitle('posts', 'second') der zweite Datensatz mit der id: 2 gel\u00f6scht werden, bei Aufruf von deleteByTitle('posts', 'post') sollen die ersten drei Datens\u00e4tze (mit id:1 , id:2 und id:5 ) gel\u00f6scht werden. Tipps : Mit der Methode getAllKeys() ermitteln Sie z.B. alle Schl\u00fcssel ( id ) der Datens\u00e4tze und mit der Methode get(key) erhalten Sie den zum Schl\u00fcssel zugeh\u00f6rigen Wert.","title":"\u00dcbung 7 (IndexedDB)"}]}