{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aktuelle Trends der IKT \u00b6 Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT ! Grober Inhalt \u00b6 Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Woche Themen (Vorlesung) Aufgabe (Stand) Abgabe \u00dcbung bis 1. 10.-14.04.2023 Einf\u00fchrung und Organisatorisches - - 2. 17.-21.04.2023 Grundger\u00fcst und Application Manifest - 30.04.2023 3. 24.-28.04.2023 Service workers - 07.05.2023 4. 01.-05.05.2023 Promises und Fetch API - 14.05.2023 5. 08.-12.05.2023 Service workers und Caching - 21.05.2023 6. 15.-19.05.2023 MongoDB und Backend - 28.05.2023 7. 22.-26.05.2023 Bilder-Up- und Download (Backend) - 04.06.2023 8. 29.-02.06.2023 IndexedDB - 11.06.2023 9. 05.-09.06.2023 Kamera - 18.06.2023 10. 12.-16.06.2023 Geolocation Datenbank - 11. 19.-23.06.2023 Hintergrundsynchronisation Backend - 12. 26.-30.06.2023 Push-Notifikationen Backend - 13. 03.-06.07.2023 Wiederholung Frontend - 14. 10.-14.07.2023 Wiederholung Frontend - Gespr\u00e4che 1.PZ 26.07.2023 (Abgabe 25.07.2023) - Gespr\u00e4che 2.PZ 27.09.2023 (Abgabe 26.09.2023) - Organisatorisches \u00b6 Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie am Ende des Semesters die L\u00f6sung Ihrer Semesteraufgabe abgeben. Diese Aufgabe zusammen mit einem Gespr\u00e4ch, das wir \u00fcber Ihre L\u00f6sung f\u00fchren, wird bewertet. Die Bewertung entspricht dann der Modulnote. Die \u00dcbungen sind daf\u00fcr vorgesehen, dass Sie im Semester sukzessive Ihre L\u00f6sung erstellen k\u00f6nnen. Wir beantworten in den \u00dcbungen Ihre Fragen und l\u00f6sen gemeinsam Probleme. Jede Woche gibt es ein Thema, das Sie selbst\u00e4ndig durcharbeiten und dann angepasst in Ihre L\u00f6sung integrieren k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt! Semesteraufgabe \u00b6 Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein ( mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein - aber nicht Firebase!), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden, eine aussagekr\u00e4ftige README.md -Datei enthalten, die sowohl die Anwendung (Screenshots) gut pr\u00e4sentiert, als auch alle Anweisungen zur Installation. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und deployed, kann es auch eine 1,0 werden. Die Anwendung muss in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Home"},{"location":"#aktuelle-trends-der-ikt","text":"Herzlich willkommen zur Veranstaltung Aktuelle Trends der IKT !","title":"Aktuelle Trends der IKT"},{"location":"#grober-inhalt","text":"Wir besch\u00e4ftigen uns dieses Semester mit Progressive Web Apps (PWA) . Dieser Begriff ist 2015 bei Google entstanden. Progressive Web Apps bieten installierbare nativen Apps \u00e4hnliche Nutzererfahrungen sowohl auf dem Desktop als auch auf dem Smartphone, sind aber Webanwendungen, die im Browser laufen, also zum World Wide Web geh\u00f6ren. Typische Eigenschaften von Progressive Web Apps sind die Einbindung von Kamera und Mikrofon, dem eigenen Standort sowie die F\u00e4higkeit, (zumindest teilweise) offline ausf\u00fchrbar zu sein. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Woche Themen (Vorlesung) Aufgabe (Stand) Abgabe \u00dcbung bis 1. 10.-14.04.2023 Einf\u00fchrung und Organisatorisches - - 2. 17.-21.04.2023 Grundger\u00fcst und Application Manifest - 30.04.2023 3. 24.-28.04.2023 Service workers - 07.05.2023 4. 01.-05.05.2023 Promises und Fetch API - 14.05.2023 5. 08.-12.05.2023 Service workers und Caching - 21.05.2023 6. 15.-19.05.2023 MongoDB und Backend - 28.05.2023 7. 22.-26.05.2023 Bilder-Up- und Download (Backend) - 04.06.2023 8. 29.-02.06.2023 IndexedDB - 11.06.2023 9. 05.-09.06.2023 Kamera - 18.06.2023 10. 12.-16.06.2023 Geolocation Datenbank - 11. 19.-23.06.2023 Hintergrundsynchronisation Backend - 12. 26.-30.06.2023 Push-Notifikationen Backend - 13. 03.-06.07.2023 Wiederholung Frontend - 14. 10.-14.07.2023 Wiederholung Frontend - Gespr\u00e4che 1.PZ 26.07.2023 (Abgabe 25.07.2023) - Gespr\u00e4che 2.PZ 27.09.2023 (Abgabe 26.09.2023) -","title":"Grober Inhalt"},{"location":"#organisatorisches","text":"Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie am Ende des Semesters die L\u00f6sung Ihrer Semesteraufgabe abgeben. Diese Aufgabe zusammen mit einem Gespr\u00e4ch, das wir \u00fcber Ihre L\u00f6sung f\u00fchren, wird bewertet. Die Bewertung entspricht dann der Modulnote. Die \u00dcbungen sind daf\u00fcr vorgesehen, dass Sie im Semester sukzessive Ihre L\u00f6sung erstellen k\u00f6nnen. Wir beantworten in den \u00dcbungen Ihre Fragen und l\u00f6sen gemeinsam Probleme. Jede Woche gibt es ein Thema, das Sie selbst\u00e4ndig durcharbeiten und dann angepasst in Ihre L\u00f6sung integrieren k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!","title":"Organisatorisches"},{"location":"#semesteraufgabe","text":"Die als Semesteraufgabe zu entwickelnde Webanwendung sollte ein Frontend besitzen (muss nicht mit einem JavaScript-Framework erstellt werden), das Frontend soll responsive sein ( mobile first !), ein Backend (damit Daten auf dem Server verwaltet werden k\u00f6nnen), eine Datenbank zur persistenten Speicherung von Daten (wir verwenden MongoDB, kann aber auch MariaDB, MySQL, PostgresQL oder auch SQLite oder \u00e4hnlich In-Apps-Datenbanken sein - aber nicht Firebase!), installierbar sein, offline nutzbar sein, die IndexedDB verwenden, Hintergrundsynchronisation verwenden, Push-Nachrichten verwenden, die Gelocation API verwenden, die Kamera oder eine andere technische Schnittstelle (z.B. Sensoren, Mikrofon) verwenden, eine aussagekr\u00e4ftige README.md -Datei enthalten, die sowohl die Anwendung (Screenshots) gut pr\u00e4sentiert, als auch alle Anweisungen zur Installation. Von den Punkten 5.-11. sollten 5 f\u00fcr eine 2,0 implementiert sein, 6 f\u00fcr eine 1,7 und 7 f\u00fcr eine 1,3. Ist die Anwendung besonders toll und deployed, kann es auch eine 1,0 werden. Die Anwendung muss in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Die erstellte Anwendung soll pr\u00e4sentiert werden und in einem kurzen Gespr\u00e4ch (15-20min) wird die Implementierung besprochen. Hier eine Idee einer Anwendung, eine Ausgabenverwaltung : installierbare Webanwendung, Formular f\u00fcr die Buchung einer Ausgabe Datum, Titel f\u00fcr die Ausgabe, Betrag, Foto des Kassenzettels, evtl. Geolocation des Ausgabeortes \u00dcbersicht \u00fcber Ausgaben, offline verwendbar, d.h. Ausgabe wird in der IndexedDB gespeichert und erst, wenn wieder online, dann in der Datenbank, Push-Benachrichtigung, wenn Ausgabe in der Datenbank gespeichert (Hintergrundsynchronisation), Backend ist zwingend erforderlich (f\u00fcr Speichern und Abrufen der Daten in die und aus der Datenbank), MongoDB zur persitenten Datenspeicherung, evtl. Nutzerverwaltung zur Verwaltung der eigenen Ausgaben. Sie k\u00f6nnen nat\u00fcrlich auch eine eigene Anwendungsidee umsetzen! Viel Spa\u00df und Erfolg!","title":"Semesteraufgabe"},{"location":"einfuehrung/","text":"Einf\u00fchrung \u00b6 In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt. Webanwendungen vs. native Apps \u00b6 Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang Links und Videos \u00b6 Hier zwei kurze Einf\u00fchrungsvideos zu PWAs: Progressive Web Apps in 100 Seconds Progressive Web Apps - PWA Roadshow Hier einige interessante Links zu PWAs: Learn PWA Progressive Web-Apps: Was versprechen die progressiven Apps? Online Verzeichnis PWAs PWAs vs. SPAs \u00b6 Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048.love2dev.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-) PWA Checklist \u00b6 Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier . Erstes kleines Beispiel \u00b6 Wir erstellen uns in einem Ordner eine index.html mit index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > </ body > </ html > Einen gro\u00dfen Teil unserer Untersuchungen in diesem Modul nehmen Web APIs ein. Wir werden einige von Ihnen n\u00e4her beleuchten. Das zentrale Konzept von PWAs sind ServiceWorker . Wir erstellen uns in unserem Ordner eine Datei service-worker.js und binden diese in unsere index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die service-worker.js schreiben wir zun\u00e4chst nur service-worker.js console . log ( 'service worker registriert' ); Wir starten die Anwendung (z.B. mit npx serve ) und schalten die Entwicklertools ein. Auf der Konsole erscheint service worker registriert . Wir wechseln nach Application --> Service Worker und sehen den aktiven service-worker.js . Wenn wir die Anwendung im Browser erneut laden, erscheint die Ausgabe nicht erneut. Wir \u00e4ndern den Service worker, z.B. auf console.log('neuer service worker registriert ) und laden die Anwendung erneut. Die Ausgabe erscheint. Wechseln sie erneut nach Application --> Service Worker . Der Service worker l\u00e4uft auch dann noch, wenn die Anwendung geschlossen ist! Installierbar \u00b6 Wenn wir unter Lighthouse einen Report generieren, dann sieht es zwar prinzipiell schon ganz gut aus, es handelt sich aber auch noch nicht um eine PWA, da sie (noch) nicht installierbar ist. Wir werden n\u00e4chste Woche damit beginnen, unsere App installierbar zu machen. Hier \"verraten\" wir aber bereits, dass wir dazu eine manifest.json ben\u00f6tigen. Diese erstellen wir und binden sie in die index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < link rel = \"manifest\" href = \"manifest.json\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die manifest.json tragen wir ein: manifest.json 1 2 3 4 5 6 7 8 9 10 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } Wir kommen zu den einzelnen Eigenschaften n\u00e4chste Woche noch ausf\u00fchrlich. Die manifest.json ist jedoch noch nicht vollst\u00e4ndig, da das icons -Array noch bef\u00fcllt werden muss. In dieses Array tragen wir alle Bilder ein, die als Icons auf dem Startbildschirm verwendet werden sollen, je nach Aufl\u00f6sung des Ger\u00e4tes, auf dem die Anwendung gestartet werden soll. Die Generierung dieser Icons wird uns zum Gl\u00fcck abgenommen. Wir erstellen die Icons auf Basis eines Icons, das in recht gro\u00dfer Aufl\u00f6sung vorliegt. F\u00fcgen Sie dazu das fiwlogo in Ihren Projektordner ein. Wir nutzen den pwa-asset-generator . Im Terminal geben wir in unserem Projektordner ein: npx pwa-asset-generator fiwlogo.png icons Dabei ist fiwlogo.png das Icon, auf dessen Basis alle weiteren Icons erzeugt werden sollen und diese sollen in den Ordner icons erstellt werden. Die Ausgabe ist ungef\u00e4hr wie folgt: 11:49:08 getSplashScreenMetaData Initialising puppeteer to load latest splash screen metadata \ud83e\udd16 11:49:08 getAppleSplashScreenData Navigating to Apple Human Interface Guidelines website - https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/ 11:49:10 getAppleSplashScreenData Waiting for the data table to be loaded 11:49:10 getAppleSplashScreenData Retrieved splash screen data 11:49:10 getSplashScreenMetaData Loaded metadata for iOS platform \ud83d\ude4c 11:49:11 generateImages Looks like folder icons doesn't exist. Created one for you \ud83e\udd14 11:49:11 saveImages Initialising puppeteer to take screenshots \ud83e\udd16 11:49:11 getShellHtml Generating shell html with provided image source 11:49:11 getShellHtml Providing shell html as page content 11:49:12 saveImages Saved image apple-splash-2388-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2732-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1536-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-1536 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2388 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-2732 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2224 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2224-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1620-2160 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2436-1125 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1242-2688 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2532-1170 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2160-1620 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1125-2436 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1284-2778 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1242-2208 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1792-828 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1170-2532 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-192 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-512 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2778-1284 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2208-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1136-640 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2688-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-750-1334 \ud83d\ude4c 11:49:13 saveImages Saved image apple-icon-180 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-640-1136 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1334-750 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-828-1792 \ud83d\ude4c 11:49:13 cli Web App Manifest file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the icons content for your manifest.json file. You can copy/paste it manually \ud83d\ude4c [ { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } ] 11:49:13 cli Index html file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the iOS meta tags content for your index.html file. You can copy/paste it manually \ud83d\ude4c <link rel=\"apple-touch-icon\" href=\"icons/apple-icon-180.png\"> <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-2732.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2732-2048.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2388.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2388-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1536-2048.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-1536.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2224.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2224-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1620-2160.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2160-1620.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1284-2778.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2778-1284.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1170-2532.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2532-1170.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1125-2436.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2436-1125.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2688.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2688-1242.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-828-1792.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1792-828.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2208.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2208-1242.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-750-1334.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1334-750.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-640-1136.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1136-640.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> Wir h\u00e4tten auch die manifest.json mit angeben k\u00f6nnen (Flag m ) und auch die index.html (Flag -i ), aber wir kopieren die Ausgaben h\u00e4ndisch in die jeweiligen Dateien. Das JSON { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } kopieren wir in das icons -Array der manifest.json : manifest.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [ { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" } ], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } und die iOS meta tags in die index.html : index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" /> < link rel = \"manifest\" href = \"manifest.json\" > < link rel = \"apple-touch-icon\" href = \"icons/apple-icon-180.png\" > < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-2732.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2732-2048.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2388.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2388-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1536-2048.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-1536.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2224.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2224-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1620-2160.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2160-1620.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1284-2778.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2778-1284.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1170-2532.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2532-1170.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1125-2436.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2436-1125.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2688.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2688-1242.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-828-1792.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1792-828.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2208.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2208-1242.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-750-1334.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1334-750.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-640-1136.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1136-640.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den aktuellen Trends der IKT </ h1 > < script > if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( 'service-worker.js' ); } </ script > </ body > </ html > Prinzipiell w\u00e4re jetzt alles da, damit unsere Anwendung installiert werden kann. Jedoch gibt es derzeit keine M\u00f6glichkeit, dass die Anwendung auch offline verwendbar ist. Dazu ben\u00f6tigt es eine M\u00f6glichkeit des Cachings von Daten. Ohne jetzt schon wirklich zu wissen, was wir tun, passen wir die service-worker.js wie folgt an: service-worker.js importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Wir haben also bereits mehrer Sachen identifiziert, mit denen wir uns besch\u00e4ftigen wollen: Manifest , Service worker und Caching und das sind auch genau die Themen der kommenden Wochen. Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"Einf\u00fchrung"},{"location":"einfuehrung/#einfuhrung","text":"In diesem Semester geht es um Progressive Web Apps (PWA) . PWA sind Funktionen, die wir Webanwendungen hinzuf\u00fcgen k\u00f6nnen, um sie in ihrer Funktionalit\u00e4t zu erweitern. Die so werweiterten Webanwendungen kommen mit solchen Funktionen nativen Apps immer n\u00e4her, d.h. das Look and Feel gleicht sich mit PWAs nativen Apps an. Dazu geh\u00f6ren Funktionalit\u00e4ten, wie z.B. die M\u00f6glichkeit, die Webanwendung auch offline zu verwenden, die Kamera zu nutzen, den eigenen Standort zu verwenden, Daten im Hintergrund zu synchronisieren. Das bedeutet aber nicht automatisch, dass wir ausschlie\u00dflich auf moderne Browser angewiesen sind, die diese Funktionalit\u00e4ten von PWAs unterst\u00fctzen. Die Webanwendungen sollen auch weiterhin auf alten Webbrowsern laufen, dann jedoch eventuell ohne einige oder alle PWA-Funktionalit\u00e4ten. Progressive Web Apps m\u00fcssen zuverl\u00e4ssig ( reliable ) sein, d.h. sie m\u00fcssen schnelle Ladezeiten aufweisen und sogar (teilweise) offline funktionieren, schnell sein, d.h. schnell auf Nutzerinteraktionen reagieren, motivierend sein, die Webanwendung zu verwenden, d.h. einerseits intuitiv bedienbar und anderseits, z.B. \u00fcber Push-Notifikationen, die Nutzerinnen animieren, die App zu nutzen. Die prinzipielle Idee einer Progressive Web App l\u00e4sst sich vereinfacht durch die folgenden Abbildung veranschaulichen: Eine Progressive Web App ist eine Webanwendung, die sich wie eine native mobile App verh\u00e4lt.","title":"Einf\u00fchrung"},{"location":"einfuehrung/#webanwendungen-vs-native-apps","text":"Die meisten Nutzerinnen verwenden die meiste Zeit native Apps auf ihrem Smartphone. Nur zu einem geringen Prozentsatz werden Web-Anwendungen (also der Browser) auf dem Smartphone verwendet. Das spricht eigentlich eher daf\u00fcr, dass wir uns mit der Entwicklung nativer Apps besch\u00e4ftigen sollten, als mit der Entwicklung von (mobilen) Webanwendungen. Die vorrangige Verwendung nativer Apps hat mehrere Gr\u00fcnde: Push-Notifikationen : Native Apps laufen im Hintergrund und die Nutzerinnen werden \u00fcber Push-Notifikationen informiert, wenn etwas Neues passiert ist, z.B. neue Nachrichten , E-Mails, etc. Man muss also gar nicht aktiv die native App bedienen, um \u00fcber Aktuelles informiert zu werden. App-Icons auf dem Home-Bildschirm : erm\u00f6glichen einen schnellen, direkten Zugang zu den Apps. Ger\u00e4tefunktionen : wie z.B. Standortermittlung, Kameras und Mikrofine k\u00f6nnen leicht in native Apps eingebaut werden. F\u00fcr Webanwendungen ist dies nur aufw\u00e4ndig m\u00f6glich. Offline-Funktionalit\u00e4ten : viele native Apps k\u00f6nnen auch offline ganz oder teilweise verwendet werden, z.B. Spiele oder Musikapps, die heruntergeladene Musik abspielen. App-Icons auf dem Home-Bildschirm k\u00f6nnen wir auch f\u00fcr Links auf unsere Webanwendung erstellen und die anderen drei Argumente wollen wir ja genau mit Progressive Web Apps zunichte machen. Das hei\u00dft, mit Progressive Web Apps kommen die Vorteile nativer Apps im Vergleich zu Webanwendungen nicht mehr zum Tragen. Demgegen\u00fcber stahen zwei Gr\u00fcnde, warum Webanwendungen besser sind als native Apps: Native Apps m\u00fcssen sowohl f\u00fcr iOS als auch f\u00fcr Android erstellt werden, um eine m\u00f6glichst gro\u00dfe Nutzerinnenzahl anzusprechen. Dazu m\u00fcssen auch unterschiedliche programmiersprachen verwendet werden (Swift f\u00fcr iOS und Java/Kotlin f\u00fcr Android). Zwar versuchen Hybride Tools diesen Nachteil zu umgehen, aber es gelingt nicht wirklich. Es werden so gut wie nie neue native Apps auf Smartphones geladen. Umfragen ergeben, dass Nutzerinnen die allermeiste Zeit am Smartphone mit h\u00f6chstens drei Apps verbringen. Alle weiteren Apps werden am Anfang der Nutzung installiert. Es kommen im Laufe eines \"Smartphone-Lebens\" kaum welche hinzu. Die durchschnittliche Anzahl neuhinzugef\u00fcgter Apps im Monat liegt bei nahe 0. Die Verwendung von Webanwendungen ist deutlich einfacher. Man muss nichts installieren. Man googlet einfach und \u00f6ffnet dann die Seite. Die Bandbreite aller Webanwendungen ist deutlich schneller erreichbar als eine gro\u00dfe Anzahl an nativen Apps. Die Reichweite einer Webanwendung ist deutlich gr\u00f6\u00dfer als die Reichweite einer nativen App. Funktionalit\u00e4ten Nutzerinnen-Reichweite native App Zugriff auf Ger\u00e4tefunktionalit\u00e4ten nur sehr wenige Apps werden von sehr vielen Nutzerinnen die meiste Zeit verwendet herk\u00f6mmliche Webanwendungen sehr eingeschr\u00e4nkter (gar kein) Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang progressive Webanwendungen Zugriff auf Ger\u00e4tefunktionalit\u00e4ten hohe Reichweite, sehr einfacher Zugang","title":"Webanwendungen vs. native Apps"},{"location":"einfuehrung/#links-und-videos","text":"Hier zwei kurze Einf\u00fchrungsvideos zu PWAs: Progressive Web Apps in 100 Seconds Progressive Web Apps - PWA Roadshow Hier einige interessante Links zu PWAs: Learn PWA Progressive Web-Apps: Was versprechen die progressiven Apps? Online Verzeichnis PWAs","title":"Links und Videos"},{"location":"einfuehrung/#pwas-vs-spas","text":"Wir haben noch immer nicht unsere erste Progressive Web App erstellt ;-(. Bevor wir das tun, diskutieren wie zun\u00e4chst noch die Unterschiede zwischen einer Progressive Web App und einer Single Page Application , wie wir sie im WebTech-Kurs erstellt haben. Single Page Applications (SPAs) sind Webanwendungen, die mit JavaScript erstellt werden, typischerweise mit einem JavaScript-Framewaork, wie Angular , React oder Vue.js . In SPAs wird das DOM st\u00e4ndig neu gerendert, welches sich durch Nutzereingaben oder Lifecycle-Events \u00e4ndert. Das Grundger\u00fcst einer SPA besteht aus genau einer HTML -Seite (typischerweise index.html ), in die verschiedene Komponenten eingebunden wird. Eine Single Page Application ist vornehmlich hoch reaktiv auf Nutzereingaben, im Sinne von schneller Reaktion. Progressive Web Applications (PWAs) sind eine Sammlung verschiedener Technologien. Es ist v\u00f6llig egal, ob diese Technologien in eine Single Page Application eingebunden werden oder in eine \"herk\u00f6mmliche\" (Multi-Page-) Webanwendung. Die Idee einer PWA ist, dass sie hoch reaktiv im Sinne st\u00e4ndiger Verf\u00fcgbarkeit ist. JavaScript spielt bei PWAs nicht die dominate Rolle, wie bei SPAs. Sie k\u00f6nnen eine oder mehrere progressive Funktionalit\u00e4ten existierender Webanwendungen hinzuf\u00fcgen (service worker, caching, push notifivcations, ...) oder eine PWA von Grund auf neu implementieren.","title":"PWAs vs. SPAs"},{"location":"einfuehrung/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Developertools von Chrome, mit dessen Hilfe gemessen werden kann, wie progressive eine Webanwendung ist. Die folgende Abbildung zeigt den Einsatz von Lighthouse f\u00fcr die PWA https://2048.love2dev.com/ - ein Spiel, das Sie wahrscheinlich kennen. Wechseln Sie in den Developertools auf die mobile Ansicht. W\u00e4hlen Sie dann im Reiter Lighthouse die Analyse. Probieren Sie auch mal aus, die Anwendung im Offline-Modus zu verwenden. Wechseln Sie dazu in den Developertools auf den Reiter Network und dort in der Auswahlliste auf Offline . Selbst wenn Sie Disable Cache anklicken, werden Sie feststellen, dass sich das Spiel noch spielen l\u00e4sst. Viel Spa\u00df! ;-)","title":"Lighthouse"},{"location":"einfuehrung/#pwa-checklist","text":"Im Lighthouse-Plugin finden Sie auch einen Link zur PWA Checklist . Diese Checklist wird verwendet, um zu beurteilen, wie progressive eine Webanwendung ist. Eine gute \u00dcbersicht finden Sie auch hier .","title":"PWA Checklist"},{"location":"einfuehrung/#erstes-kleines-beispiel","text":"Wir erstellen uns in einem Ordner eine index.html mit index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > </ body > </ html > Einen gro\u00dfen Teil unserer Untersuchungen in diesem Modul nehmen Web APIs ein. Wir werden einige von Ihnen n\u00e4her beleuchten. Das zentrale Konzept von PWAs sind ServiceWorker . Wir erstellen uns in unserem Ordner eine Datei service-worker.js und binden diese in unsere index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die service-worker.js schreiben wir zun\u00e4chst nur service-worker.js console . log ( 'service worker registriert' ); Wir starten die Anwendung (z.B. mit npx serve ) und schalten die Entwicklertools ein. Auf der Konsole erscheint service worker registriert . Wir wechseln nach Application --> Service Worker und sehen den aktiven service-worker.js . Wenn wir die Anwendung im Browser erneut laden, erscheint die Ausgabe nicht erneut. Wir \u00e4ndern den Service worker, z.B. auf console.log('neuer service worker registriert ) und laden die Anwendung erneut. Die Ausgabe erscheint. Wechseln sie erneut nach Application --> Service Worker . Der Service worker l\u00e4uft auch dann noch, wenn die Anwendung geschlossen ist!","title":"Erstes kleines Beispiel"},{"location":"einfuehrung/#installierbar","text":"Wenn wir unter Lighthouse einen Report generieren, dann sieht es zwar prinzipiell schon ganz gut aus, es handelt sich aber auch noch nicht um eine PWA, da sie (noch) nicht installierbar ist. Wir werden n\u00e4chste Woche damit beginnen, unsere App installierbar zu machen. Hier \"verraten\" wir aber bereits, dass wir dazu eine manifest.json ben\u00f6tigen. Diese erstellen wir und binden sie in die index.html ein: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" type = \"image/x-icon\" /> <!-- muss nicht --> < link rel = \"manifest\" href = \"manifest.json\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den Aktuellen Trends der IKT </ h1 > < p > Wir besch\u00e4ftigen uns mit < i > Progressive Web Apps (PWA) </ i > . Ein wesentlicher Bestandteil von PWAs sind < i > Service Worker </ i > . </ p > < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/service-worker.js' ); }); } </ script > </ body > </ html > In die manifest.json tragen wir ein: manifest.json 1 2 3 4 5 6 7 8 9 10 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } Wir kommen zu den einzelnen Eigenschaften n\u00e4chste Woche noch ausf\u00fchrlich. Die manifest.json ist jedoch noch nicht vollst\u00e4ndig, da das icons -Array noch bef\u00fcllt werden muss. In dieses Array tragen wir alle Bilder ein, die als Icons auf dem Startbildschirm verwendet werden sollen, je nach Aufl\u00f6sung des Ger\u00e4tes, auf dem die Anwendung gestartet werden soll. Die Generierung dieser Icons wird uns zum Gl\u00fcck abgenommen. Wir erstellen die Icons auf Basis eines Icons, das in recht gro\u00dfer Aufl\u00f6sung vorliegt. F\u00fcgen Sie dazu das fiwlogo in Ihren Projektordner ein. Wir nutzen den pwa-asset-generator . Im Terminal geben wir in unserem Projektordner ein: npx pwa-asset-generator fiwlogo.png icons Dabei ist fiwlogo.png das Icon, auf dessen Basis alle weiteren Icons erzeugt werden sollen und diese sollen in den Ordner icons erstellt werden. Die Ausgabe ist ungef\u00e4hr wie folgt: 11:49:08 getSplashScreenMetaData Initialising puppeteer to load latest splash screen metadata \ud83e\udd16 11:49:08 getAppleSplashScreenData Navigating to Apple Human Interface Guidelines website - https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/ 11:49:10 getAppleSplashScreenData Waiting for the data table to be loaded 11:49:10 getAppleSplashScreenData Retrieved splash screen data 11:49:10 getSplashScreenMetaData Loaded metadata for iOS platform \ud83d\ude4c 11:49:11 generateImages Looks like folder icons doesn't exist. Created one for you \ud83e\udd14 11:49:11 saveImages Initialising puppeteer to take screenshots \ud83e\udd16 11:49:11 getShellHtml Generating shell html with provided image source 11:49:11 getShellHtml Providing shell html as page content 11:49:12 saveImages Saved image apple-splash-2388-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2732-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1536-2048 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-1536 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2388 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2048-2732 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1668-2224 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2224-1668 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1620-2160 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2436-1125 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-1242-2688 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2532-1170 \ud83d\ude4c 11:49:12 saveImages Saved image apple-splash-2160-1620 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1125-2436 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1284-2778 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1242-2208 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1792-828 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1170-2532 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-192 \ud83d\ude4c 11:49:13 saveImages Saved image manifest-icon-512 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2778-1284 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2208-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1136-640 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-2688-1242 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-750-1334 \ud83d\ude4c 11:49:13 saveImages Saved image apple-icon-180 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-640-1136 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-1334-750 \ud83d\ude4c 11:49:13 saveImages Saved image apple-splash-828-1792 \ud83d\ude4c 11:49:13 cli Web App Manifest file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the icons content for your manifest.json file. You can copy/paste it manually \ud83d\ude4c [ { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } ] 11:49:13 cli Index html file is not specified, printing out the content to console instead \ud83e\udd14 11:49:13 cli Below is the iOS meta tags content for your index.html file. You can copy/paste it manually \ud83d\ude4c <link rel=\"apple-touch-icon\" href=\"icons/apple-icon-180.png\"> <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-2732.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2732-2048.jpg\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2388.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2388-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1536-2048.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2048-1536.jpg\" media=\"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1668-2224.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2224-1668.jpg\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1620-2160.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2160-1620.jpg\" media=\"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1284-2778.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2778-1284.jpg\" media=\"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1170-2532.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2532-1170.jpg\" media=\"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1125-2436.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2436-1125.jpg\" media=\"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2688.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2688-1242.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-828-1792.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1792-828.jpg\" media=\"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1242-2208.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-2208-1242.jpg\" media=\"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-750-1334.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1334-750.jpg\" media=\"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-640-1136.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\"> <link rel=\"apple-touch-startup-image\" href=\"icons/apple-splash-1136-640.jpg\" media=\"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\"> Wir h\u00e4tten auch die manifest.json mit angeben k\u00f6nnen (Flag m ) und auch die index.html (Flag -i ), aber wir kopieren die Ausgaben h\u00e4ndisch in die jeweiligen Dateien. Das JSON { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-192.maskable.png\", \"sizes\": \"192x192\", \"type\": \"image/png\", \"purpose\": \"maskable\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"any\" }, { \"src\": \"icons/manifest-icon-512.maskable.png\", \"sizes\": \"512x512\", \"type\": \"image/png\", \"purpose\": \"maskable\" } kopieren wir in das icons -Array der manifest.json : manifest.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 { \"name\" : \"IKT-PWA\" , \"start_url\" : \"/\" , \"id\" : \"/\" , \"icons\" : [ { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-192.maskable.png\" , \"sizes\" : \"192x192\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"any\" }, { \"src\" : \"icons/manifest-icon-512.maskable.png\" , \"sizes\" : \"512x512\" , \"type\" : \"image/png\" , \"purpose\" : \"maskable\" } ], \"theme_color\" : \"#000000\" , \"background_color\" : \"#FFFFFF\" , \"display\" : \"fullscreen\" , \"orientation\" : \"portrait\" } und die iOS meta tags in die index.html : index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"shortcut icon\" href = \"favicon.ico\" /> < link rel = \"manifest\" href = \"manifest.json\" > < link rel = \"apple-touch-icon\" href = \"icons/apple-icon-180.png\" > < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-2732.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2732-2048.jpg\" media = \"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2388.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2388-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1536-2048.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2048-1536.jpg\" media = \"(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1668-2224.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2224-1668.jpg\" media = \"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1620-2160.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2160-1620.jpg\" media = \"(device-width: 810px) and (device-height: 1080px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1284-2778.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2778-1284.jpg\" media = \"(device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1170-2532.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2532-1170.jpg\" media = \"(device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1125-2436.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2436-1125.jpg\" media = \"(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2688.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2688-1242.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-828-1792.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1792-828.jpg\" media = \"(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1242-2208.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-2208-1242.jpg\" media = \"(device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-750-1334.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1334-750.jpg\" media = \"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-640-1136.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)\" > < link rel = \"apple-touch-startup-image\" href = \"icons/apple-splash-1136-640.jpg\" media = \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)\" > < title > IKT Start </ title > </ head > < body > < h1 > Willkommen zu den aktuellen Trends der IKT </ h1 > < script > if ( 'serviceWorker' in navigator ) { navigator . serviceWorker . register ( 'service-worker.js' ); } </ script > </ body > </ html > Prinzipiell w\u00e4re jetzt alles da, damit unsere Anwendung installiert werden kann. Jedoch gibt es derzeit keine M\u00f6glichkeit, dass die Anwendung auch offline verwendbar ist. Dazu ben\u00f6tigt es eine M\u00f6glichkeit des Cachings von Daten. Ohne jetzt schon wirklich zu wissen, was wir tun, passen wir die service-worker.js wie folgt an: service-worker.js importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Wir haben also bereits mehrer Sachen identifiziert, mit denen wir uns besch\u00e4ftigen wollen: Manifest , Service worker und Caching und das sind auch genau die Themen der kommenden Wochen. Success Wir haben jetzt eine Idee davon, was Progressive Web Apps sind. Jetzt legen wir los und erstellen eigene PWAs!","title":"Installierbar"},{"location":"grundgeruest/","text":"Grundger\u00fcst unserer PWA \u00b6 Wir beginnen jetzt mit der Implementierung von progressive Funktionalit\u00e4ten. Das machen wir, indem wir sukzessive eine Progressive Web App erstellen, die viele der derzeit verf\u00fcgbaren Funktionalit\u00e4ten enth\u00e4lt, die derzeit f\u00fcr Progressive Web Apps verf\u00fcgbar sind. Das Grundger\u00fcst (oder der Ausgangspunkt) unserer PWA wird deshalb zur Verf\u00fcgung gestellt, weil wir uns nicht um die Implementierung von HTML, CSS und JavaScript, sondern nur um die progressive Funktionalit\u00e4ten k\u00fcmmern wollen. Auf Basis dieses Grundger\u00fcstes werden sukzessive Funktionalit\u00e4ten, wie Push-Notifikationen, Offline-Verwendung, Geolocation, Kameranutzung usw. hinzuf\u00fcgen. Die Idee ist, dass wir eine Art HTW-Instagram erstellen. Ich habe Instagram aber noch nie genutzt, deshalb wei\u00df ich nicht, ob wir dem \"Original\" nahe kommen werden. Wahrscheinlich nicht, aber daf\u00fcr behalten wir unsere Daten auch bei uns. Installation \u00b6 Den Quellcode f\u00fcr das Grundger\u00fcst finden Sie hier (GitHub) . Clonen Sie sich das Projekt in einem Ordner Ihrer Wahl und folgen Sie dann der README.MD : Zum Ausf\u00fchren des Projektes wird Node.js verendet. Sie m\u00fcssen es auf Ihren Rechner installieren. In der Wahl Ihrer IDE sind Sie v\u00f6llig frei. Empfehlungen finden Sie unter Integrated Development Environment (IDE) Zum Starten des Projektes wechseln Sie im Terminal (Terminal Ihres Rechners oder das Terminal in der IDE) in den Projektordner ( cd IKT-PWA-01 ) und f\u00fchren dort npm install aus. Damit werden alle erforderlichen Abh\u00e4ngigkeiten installiert. Nach erfolgreicher Installation der Abh\u00e4ngigkeiten, geben Sie npm start ein (oder genereller: npm run start ), um Ihr Projekt auszuf\u00fchren. Klicken Sie danach auf localhost:8080 oder geben Sie die URL direkt in Ihren Browser ein. Starten \u00b6 Starten Sie das Projekt mit npm start (nachdem Sie einmalig npm install ausgef\u00fchrt haben) und \u00f6ffnen Sie dann den Browser mit der URL http://localhost:8080/ . Es erscheint bzw. wenn Sie die Viewport-Breite verkleinern . Sie erkennen wahrscheinlich schon, dass wir Material Design Lite verwenden. Die Navigationskomponente kennen wir auch schon aus WebTech. Wenn Sie auf den + -Button klicken, erscheint ein kleines Men\u00fc. Dort k\u00f6nnen Sie zwar schon etwas eintragen, aber der SPEICHERN -Button funktioniert noch nicht. Auch beim BENACHRICHTIGUNGEN EIN -Button ist noch keine Ereignisbehandlung hinterlegt. Wenn Sie im Men\u00fc Hilfe klicken, \u00f6ffnet sich die (fast leere) Hilfe-Seite. Schalten Sie beim Betrachten der Anwendung stets die DeveloperTools ein. Sie k\u00f6nnen dort sehr leicht auf die mobile Ansicht wechseln. Wichtig ist, dass Sie - zum besseren Ausprobieren der Anwendung - in den DeveloperTools unter dem Reiter Network ein H\u00e4kchen bei Disable Cache setzen. Wir wollen in Zukunft das Caching unseren Service workern \u00fcberlassen und nicht den Cache des Browsers verwenden. Projekt \u00b6 Bevor wir loslegen, werfen wir noch einen kurzen Blick auf die bisherigen Dateien im Projekt. Wir beginnen mit der index.html aus dem public -Ordner. public/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div id = \"create-post\" > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > < img src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > < div class = \"page-content\" > < h5 class = \"text-center mdl-color-text--primary\" > HTW-Insta </ h5 > < div id = \"shared-moments\" ></ div > </ div > < div class = \"floating-button\" > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" id = \"share-image-button\" > < i class = \"material-icons\" > add </ i > </ button > </ div > < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Sie sieht recht umfangreich aus. Tats\u00e4chlich ist aber das meiste darin f\u00fcr das Navigationstemplate. Die Zeilen 21-36 und 38-49 beschreiben das gleiche, n\u00e4mlich die Navigationsleiste. Der obere Block ist f\u00fcr breite Viewports (Klasse mdl-layout--large-screen-only ). Alle mdl -Klassen sind von Material. Einen guten \u00dcberblick \u00fcber die einzelnen Material-Komponenten finden Sie hier . N\u00e4heres zu den Navigationen finden Sie darin z.B. hier . Dann kommt das Bild (Zeilen 75-77 ), dann der Text HTW Insta (Zeilen 78-81 ) und dann der + -Button (Zeilen 82-87 ). In den Zeilen 88-91 ist bereits eine Best\u00e4tigungsnachricht hinterlegt, derzeit aber noch hidden . In den eingebundenen eigenen Stylesheets app.css und feed.css steht nicht viel: public/src/css/app.css 1 2 3 4 5 6 7 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; display : none ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } Kurze Erinnerung an CSS: Punktselektoren beschreiben Klassen (z.B. .input-selection ) und #-Selektoren beschreiben Ids (z.B. #create-post ). Sie k\u00f6nnen die Anwendung der Klassen und der Ids ja mal in der index.html suchen, wenn Sie m\u00f6chten. Die public/help/index.html enth\u00e4lt noch weniger als die public/index.html . Erw\u00e4hnenswert ist hier, dass wir mit einem Framework wie z.B. Angular nat\u00fcrlich der Navigation eine eigenen Komponente spendiert und diese nicht in beiden Dateien wiederholt h\u00e4tten. public/help/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Help </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/help.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/settings\" > Einstellungen </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Feed </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Help </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Brauchst Du Hilfe? </ h3 > < p > Hier erf\u00e4hrst Du, wie Du die App benutzen und neue Bildeintr\u00e4ge erstellen kannst. </ p > </ div > </ div > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Kontakt </ h3 > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > call </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > email </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > chat_bubble </ i > </ button > </ div > </ div > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > </ body > </ html > Von den beiden JavaScript-Dateien public/src/js/app.js und public/src/js/feed.js steht derzeit nur etwas in der feed.js . Das schauen wir uns aber erst dann an, wenn wir neue Bildeintr\u00e4ge speichern wollen. Ngrok \u00b6 Beachten Sie, dass eine Anforderung an eine PWA ist, dass sie entweder unter localhost oder unter https l\u00e4uft. Das Werkzeug ngrok bietet sichere Tunnel an und simuliert so einen sicheren Webserver. Angenommen, Ihre Anwendung l\u00e4uft unter Port 8080 , dann geben Sie im Terminal einfach ngrok http 8080 ein und es erscheint in etwa: ngrok by @inconshreveable (Ctrl+C to quit) Session Status online Account J\u00f6rn Freiheit (Plan: Free) Version 2.3.40 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Forwarding https://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Connections ttl opn rt1 rt5 p50 p90 11 0 0.00 0.01 0.33 6.43 HTTP Requests ------------- GET /favicon.ico 200 OK GET /src/js/feed.js 200 OK GET /manifest.json 200 OK GET /src/js/material.min.js 200 OK GET /src/js/app.js 200 OK GET /src/images/htw.jpg 200 OK GET /src/css/feed.css 200 OK GET / 200 OK GET /src/css/app.css 200 OK GET /src/images/icons/fiw256x256.png 200 OK Sie haben nun unter der Adresse https://039a-141-45-155-245.ngrok.io (bei Ihnen anders!) eine https -Verbindung zum Webserver. Sie k\u00f6nnen die Anwendung somit unter dieser Adresse auch in Ihrem Smartphone aufrufen. Lassen Sie sich dazu am besten von Ihrem Browser einen QR-Code erzeugen und fotografieren ihn mit der Kamera ab. Schauen Sie sich auch ruhig einmal das Web-Interface von ngrok an, das unter http://127.0.0.1:4040 verf\u00fcgbar ist. Noch besser ist es (und ngrok empfiehlt das), Sie verwenden ngrok http 8000 --basic-auth 'ngrok:issecure' Damit sichern Sie die Seite durch einen account:password -Zugriff. Sie werden beim Starten Seite aufgefordert, einen Nutzerinnennamen und ein Passwort einzugeben. In diesem Fall w\u00e4ren das ngrok und issecure . Nat\u00fcrlich k\u00f6nnen Sie bei Aufruf von ngrok auch eine frei w\u00e4hlbare Kombination 'account:password' verwenden (anstelle von 'ngrok:issecure' ).","title":"Grundger\u00fcst"},{"location":"grundgeruest/#grundgerust-unserer-pwa","text":"Wir beginnen jetzt mit der Implementierung von progressive Funktionalit\u00e4ten. Das machen wir, indem wir sukzessive eine Progressive Web App erstellen, die viele der derzeit verf\u00fcgbaren Funktionalit\u00e4ten enth\u00e4lt, die derzeit f\u00fcr Progressive Web Apps verf\u00fcgbar sind. Das Grundger\u00fcst (oder der Ausgangspunkt) unserer PWA wird deshalb zur Verf\u00fcgung gestellt, weil wir uns nicht um die Implementierung von HTML, CSS und JavaScript, sondern nur um die progressive Funktionalit\u00e4ten k\u00fcmmern wollen. Auf Basis dieses Grundger\u00fcstes werden sukzessive Funktionalit\u00e4ten, wie Push-Notifikationen, Offline-Verwendung, Geolocation, Kameranutzung usw. hinzuf\u00fcgen. Die Idee ist, dass wir eine Art HTW-Instagram erstellen. Ich habe Instagram aber noch nie genutzt, deshalb wei\u00df ich nicht, ob wir dem \"Original\" nahe kommen werden. Wahrscheinlich nicht, aber daf\u00fcr behalten wir unsere Daten auch bei uns.","title":"Grundger\u00fcst unserer PWA"},{"location":"grundgeruest/#installation","text":"Den Quellcode f\u00fcr das Grundger\u00fcst finden Sie hier (GitHub) . Clonen Sie sich das Projekt in einem Ordner Ihrer Wahl und folgen Sie dann der README.MD : Zum Ausf\u00fchren des Projektes wird Node.js verendet. Sie m\u00fcssen es auf Ihren Rechner installieren. In der Wahl Ihrer IDE sind Sie v\u00f6llig frei. Empfehlungen finden Sie unter Integrated Development Environment (IDE) Zum Starten des Projektes wechseln Sie im Terminal (Terminal Ihres Rechners oder das Terminal in der IDE) in den Projektordner ( cd IKT-PWA-01 ) und f\u00fchren dort npm install aus. Damit werden alle erforderlichen Abh\u00e4ngigkeiten installiert. Nach erfolgreicher Installation der Abh\u00e4ngigkeiten, geben Sie npm start ein (oder genereller: npm run start ), um Ihr Projekt auszuf\u00fchren. Klicken Sie danach auf localhost:8080 oder geben Sie die URL direkt in Ihren Browser ein.","title":"Installation"},{"location":"grundgeruest/#starten","text":"Starten Sie das Projekt mit npm start (nachdem Sie einmalig npm install ausgef\u00fchrt haben) und \u00f6ffnen Sie dann den Browser mit der URL http://localhost:8080/ . Es erscheint bzw. wenn Sie die Viewport-Breite verkleinern . Sie erkennen wahrscheinlich schon, dass wir Material Design Lite verwenden. Die Navigationskomponente kennen wir auch schon aus WebTech. Wenn Sie auf den + -Button klicken, erscheint ein kleines Men\u00fc. Dort k\u00f6nnen Sie zwar schon etwas eintragen, aber der SPEICHERN -Button funktioniert noch nicht. Auch beim BENACHRICHTIGUNGEN EIN -Button ist noch keine Ereignisbehandlung hinterlegt. Wenn Sie im Men\u00fc Hilfe klicken, \u00f6ffnet sich die (fast leere) Hilfe-Seite. Schalten Sie beim Betrachten der Anwendung stets die DeveloperTools ein. Sie k\u00f6nnen dort sehr leicht auf die mobile Ansicht wechseln. Wichtig ist, dass Sie - zum besseren Ausprobieren der Anwendung - in den DeveloperTools unter dem Reiter Network ein H\u00e4kchen bei Disable Cache setzen. Wir wollen in Zukunft das Caching unseren Service workern \u00fcberlassen und nicht den Cache des Browsers verwenden.","title":"Starten"},{"location":"grundgeruest/#projekt","text":"Bevor wir loslegen, werfen wir noch einen kurzen Blick auf die bisherigen Dateien im Projekt. Wir beginnen mit der index.html aus dem public -Ordner. public/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Hilfe </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div id = \"create-post\" > < form > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"title\" > < label class = \"mdl-textfield__label\" for = \"title\" name = \"title\" > Titel </ label > </ div > < div class = \"input-section mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" id = \"manual-location\" > < input class = \"mdl-textfield__input\" type = \"text\" id = \"location\" > < label class = \"mdl-textfield__label\" for = \"location\" name = \"location\" > Ort </ label > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" type = \"submit\" id = \"post-btn\" > Speichern </ button > </ div > < br > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab\" id = \"close-create-post-modal-btn\" type = \"button\" > < i class = \"material-icons\" > close </ i > </ button > </ div > </ form > </ div > < img src = \"/src/images/htw.jpg\" alt = \"HTW Wilhelminenhof\" class = \"main-image\" > < div class = \"page-content\" > < h5 class = \"text-center mdl-color-text--primary\" > HTW-Insta </ h5 > < div id = \"shared-moments\" ></ div > </ div > < div class = \"floating-button\" > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" id = \"share-image-button\" > < i class = \"material-icons\" > add </ i > </ button > </ div > < div id = \"confirmation-toast\" aria-live = \"assertive\" aria-atomic = \"true\" aria-relevant = \"text\" class = \"mdl-snackbar mdl-js-snackbar\" > < div class = \"mdl-snackbar__text\" ></ div > < button type = \"button\" class = \"mdl-snackbar__action\" ></ button > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > < script src = \"/src/js/feed.js\" ></ script > </ body > </ html > Sie sieht recht umfangreich aus. Tats\u00e4chlich ist aber das meiste darin f\u00fcr das Navigationstemplate. Die Zeilen 21-36 und 38-49 beschreiben das gleiche, n\u00e4mlich die Navigationsleiste. Der obere Block ist f\u00fcr breite Viewports (Klasse mdl-layout--large-screen-only ). Alle mdl -Klassen sind von Material. Einen guten \u00dcberblick \u00fcber die einzelnen Material-Komponenten finden Sie hier . N\u00e4heres zu den Navigationen finden Sie darin z.B. hier . Dann kommt das Bild (Zeilen 75-77 ), dann der Text HTW Insta (Zeilen 78-81 ) und dann der + -Button (Zeilen 82-87 ). In den Zeilen 88-91 ist bereits eine Best\u00e4tigungsnachricht hinterlegt, derzeit aber noch hidden . In den eingebundenen eigenen Stylesheets app.css und feed.css steht nicht viel: public/src/css/app.css 1 2 3 4 5 6 7 . text-center { text-align : center ; } . drawer-option { padding : 16 px ; } public/src/css/feed.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # create-post { z-index : 1001 ; position : fixed ; width : 100 % ; min-height : 100 vh ; overflow-y : scroll ; bottom : 0 ; top : 56 px ; background : white ; text-align : center ; display : none ; } . main-image { max-width : 100 % ; margin : auto ; display : block ; } . floating-button { z-index : 1000 ; position : fixed ; bottom : 0 ; right : 0 ; padding : 30 px ; } . input-section { display : block ; margin : 10 px auto ; } Kurze Erinnerung an CSS: Punktselektoren beschreiben Klassen (z.B. .input-selection ) und #-Selektoren beschreiben Ids (z.B. #create-post ). Sie k\u00f6nnen die Anwendung der Klassen und der Ids ja mal in der index.html suchen, wenn Sie m\u00f6chten. Die public/help/index.html enth\u00e4lt noch weniger als die public/index.html . Erw\u00e4hnenswert ist hier, dass wir mit einem Framework wie z.B. Angular nat\u00fcrlich der Navigation eine eigenen Komponente spendiert und diese nicht in beiden Dateien wiederholt h\u00e4tten. public/help/index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Help </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/help.css\" > </ head > < body > < div id = \"app\" > < div class = \"mdl-layout mdl-js-layout mdl-layout--fixed-header\" > < header class = \"mdl-layout__header\" > < div class = \"mdl-layout__header-row\" > <!-- Title --> < span class = \"mdl-layout-title\" > IKT-PWA </ span > <!-- Add spacer, to align navigation to the right --> < div class = \"mdl-layout-spacer\" ></ div > <!-- Navigation. We hide it in small screens. --> < nav class = \"mdl-navigation mdl-layout--large-screen-only\" > < a class = \"mdl-navigation__link\" href = \"/\" > Bilder </ a > < a class = \"mdl-navigation__link\" href = \"/settings\" > Einstellungen </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > </ header > < div class = \"mdl-layout__drawer\" > < span class = \"mdl-layout-title\" > IKT-PWA </ span > < nav class = \"mdl-navigation\" > < a class = \"mdl-navigation__link\" href = \"/\" > Feed </ a > < a class = \"mdl-navigation__link\" href = \"/help\" > Help </ a > < div class = \"drawer-option\" > < button class = \"enable-notifications mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-color--accent\" > Benachrichtigungen Ein </ button > </ div > </ nav > </ div > < main class = \"mdl-layout__content mat-typography\" > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Brauchst Du Hilfe? </ h3 > < p > Hier erf\u00e4hrst Du, wie Du die App benutzen und neue Bildeintr\u00e4ge erstellen kannst. </ p > </ div > </ div > < div class = \"mdl-grid\" > < div class = \"mdl-cell mdl-cell--12-col text-center\" > < h3 > Kontakt </ h3 > < div > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > call </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > email </ i > </ button > < button class = \"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\" > < i class = \"material-icons\" > chat_bubble </ i > </ button > </ div > </ div > </ div > </ main > </ div > </ div > < script defer src = \"/src/js/material.min.js\" ></ script > < script src = \"/src/js/app.js\" ></ script > </ body > </ html > Von den beiden JavaScript-Dateien public/src/js/app.js und public/src/js/feed.js steht derzeit nur etwas in der feed.js . Das schauen wir uns aber erst dann an, wenn wir neue Bildeintr\u00e4ge speichern wollen.","title":"Projekt"},{"location":"grundgeruest/#ngrok","text":"Beachten Sie, dass eine Anforderung an eine PWA ist, dass sie entweder unter localhost oder unter https l\u00e4uft. Das Werkzeug ngrok bietet sichere Tunnel an und simuliert so einen sicheren Webserver. Angenommen, Ihre Anwendung l\u00e4uft unter Port 8080 , dann geben Sie im Terminal einfach ngrok http 8080 ein und es erscheint in etwa: ngrok by @inconshreveable (Ctrl+C to quit) Session Status online Account J\u00f6rn Freiheit (Plan: Free) Version 2.3.40 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Forwarding https://039a-141-45-155-245.ngrok.io -> http://localhost:8080 Connections ttl opn rt1 rt5 p50 p90 11 0 0.00 0.01 0.33 6.43 HTTP Requests ------------- GET /favicon.ico 200 OK GET /src/js/feed.js 200 OK GET /manifest.json 200 OK GET /src/js/material.min.js 200 OK GET /src/js/app.js 200 OK GET /src/images/htw.jpg 200 OK GET /src/css/feed.css 200 OK GET / 200 OK GET /src/css/app.css 200 OK GET /src/images/icons/fiw256x256.png 200 OK Sie haben nun unter der Adresse https://039a-141-45-155-245.ngrok.io (bei Ihnen anders!) eine https -Verbindung zum Webserver. Sie k\u00f6nnen die Anwendung somit unter dieser Adresse auch in Ihrem Smartphone aufrufen. Lassen Sie sich dazu am besten von Ihrem Browser einen QR-Code erzeugen und fotografieren ihn mit der Kamera ab. Schauen Sie sich auch ruhig einmal das Web-Interface von ngrok an, das unter http://127.0.0.1:4040 verf\u00fcgbar ist. Noch besser ist es (und ngrok empfiehlt das), Sie verwenden ngrok http 8000 --basic-auth 'ngrok:issecure' Damit sichern Sie die Seite durch einen account:password -Zugriff. Sie werden beim Starten Seite aufgefordert, einen Nutzerinnennamen und ein Passwort einzugeben. In diesem Fall w\u00e4ren das ngrok und issecure . Nat\u00fcrlich k\u00f6nnen Sie bei Aufruf von ngrok auch eine frei w\u00e4hlbare Kombination 'account:password' verwenden (anstelle von 'ngrok:issecure' ).","title":"Ngrok"},{"location":"manifest/","text":"Web-App-Manifest \u00b6 Das Web-App-Manifest ist zun\u00e4chst einmal eine Datei, n\u00e4mlich manifest.json . Sie wird also in der JavaScript Object Notation (JSON) geschrieben. Diese Datei dient als Information f\u00fcr den Browser. Sie wird also vom Browser ausgelesen. Beispielsweise kann in der manifest.json vereinbart werden, dass sich die Webanwendung selbst auf dem Startbildschirm Ihres Mobilger\u00e4tes installiert. Dann gen\u00fcgt ein Klick auf das Icon auf dem Startbildschirm und die Webanwendung wird durch den Browser ge\u00f6ffnet. Somit h\u00e4tten wir schonmal eine wesentliche Gemeinsamkeit zu einer nativen App geschaffen, welche ja auch durch ein Klick auf ein Icon auf dem Startbildschirm gestartet werden k\u00f6nnen. Wir lernen kennen, wie wir ein solches Manifest unserer PWA hinzuf\u00fcgen, wie es konfiguriert werden kann und wie wir die Auswirkungen eines solchen Manifestes auf mobilen Ger\u00e4ten sehen k\u00f6nnen. Installierbar \u00b6 Mithilfe eines Web-App-Manifestes machen wir unsere Webanwendung installierbar auf einem mobilen Ger\u00e4t. Die Anwendung muss nicht einem App-Store hinzugef\u00fcgt werden, sondern wird einfach \u00fcber das Web durch einen Browser geladen. Normalerweise kann eine Webanwendung ja nur dadurch gestartet werden, dass ihre URL in den Browser eingetragen wird (oder Sie haben ein lesezeichen auf die Webanwendung in Ihrem Browser gesetzt). Nun wollen wir auf den Startbildschirm des Smartphones ein Icon setzen (genau wie f\u00fcr native Apps) und dar\u00fcber die Anwendung starten. Daf\u00fcr f\u00fcgen wir im Projektordner in dem Ordner /public die Datei manifest.json hinzu: Diese Datei sollte genau so hei\u00dfen und es ist g\u00fcnstig, sie in den /public -Ordner zu legen. Achten Sie darauf, wohin Sie die Datei legen. Wenn Sie sie direkt in den Projektordner legen, dann gelten alle Pfadangaben in dieser Datei ausgehend von dieser Position. Wenn Sie sie in den public -Ordner legen, so wie wir, dann betrachten Sie die relativen Pfade, die Sie angeben, immer von diesem Ordner aus. Nun m\u00fcssen wir diese Datei jeder HTML-Seite unserer Anwendung bekannt machen. In unserer Anwendung existieren zwei *.html -Dateien, die public/index.html und die public/help/index.html . In beide Datein tragen wir im <head> folgenden Eintrag ein: < link rel = \"manifest\" href = \"/manifest.json\" > Aber Achtung! : Die public/help/index.html liegt ja im Unterordner /help . Das bedeutet, dass von der Datei public/help/index.html aus gesehen, muss der help -Ordner erst verlassen werden, um die manifest.json -Datei zu erreichen. In die public/help/index.html schreiben wir also < link rel = \"manifest\" href = \"../manifest.json\" > Das hei\u00dft, der <head> -Bereich der public/index.html sieht dann wie folgt aus (und der von public/help/index.html sehr \u00e4hnlich - achten Sie auf den korrekten relativen Pfad!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"/manifest.json\" > </ head > In einer Single Page Application muss der Eintrag nur einmal erfolgen - in der single page, der index.html . M\u00f6gliche Eigenschaften in der manifest.json \u00b6 Eintr\u00e4ge in einer JSON-Datei sind key-value-Paare , d.h. ein Eintrag hat die folgende Form: \"property\" : value oder auf Deutsch \"eigenschaft\": wert . JSON-Dateien beginnen und enden immer mit einer geschweiften Klammer und die einzelnen key-value-Paare sind durch Komma getrennt. value kann selbst ein JSON sein oder ein Array oder ein String oder eine Zahl. Wir betrachten nun einige ausgew\u00e4hlte properties , die in einer manifest.json definiert werden k\u00f6nnen. Einen vollst\u00e4ndigen \u00dcberblick \u00fcber alle m\u00f6glichen Eigenschaften und deren Umsetzung in den einzelnen Browsern finden Sie hier . Eine kurze Einf\u00fchrung zu manifest.json finden Sie auch hier . Die Spezifikation f\u00fcr das Web-App-Manifest vom W3C finden Sie hier . name \u00b6 Mit der Eigenschaft name geben wir unserer Webanwendung eine Beschreibung. In der package.json haben wir unserer Anwendung bereits einen Namen gegeben, aber name aus der manifest.json beschreibt zum Beispiel den Namen der App auf dem Begr\u00fc\u00dfungsschrim, wie wir gleich sehen werden. Es ist ratsam, den Namen nicht l\u00e4nger als 45 Zeichen zu w\u00e4hlen (das ist die Begrenzung, die Google Chrome und Microsoft Edge f\u00fcr sich festgelegt haben). Wir sagen mal: \"name\" : \"HTW-Insta Erweiterung\" Die Eigenschaft name ist in der manifest.json verpflichtend, d.h. sie muss angegeben werden (au\u00dferdem noch version und manifest_version , alle anderen Eigenschaften sind optional.) short_name \u00b6 Der Wert von short_name wird z.B. verwendet als Name unserer App unter dem Icon auf dem Startbildschirm (falls der Name dort mit erscheint). Der short_name sollte nicht l\u00e4nger als 12 Zeichen sein. Ist kein short_name in der manifest.json angegeben, wird der Wert von name verwendet und, falls n\u00f6tig, einfach gek\u00fcrzt. \"short_name\" : \"HTW-Insta\" start_url \u00b6 Der Wert von start_url gibt den Pfad und die Datei an, die beim Starten unserer Anwendung geladen werden soll. In unserem Fall soll die /public/index.html geladen werden. Die manifest.json -Datei befindet sich im /public -ordner, also ist der Pfad zur Datei nur / .: \"start_url\" : \"/index.html\" Beachten Sie (nochmal): der Pfad ist immer relativ zur manifest.json . Anegenommen, der Wert von start_url ist ../start_point.html und die URL der manifest.json ist https://example.com/resources/manifest.json , dann w\u00fcrde die Anwendung unter https://example.com/start_point.html starten. display \u00b6 Der Wert von display gibt an, wie die Anwendung beim Start aussehen soll. Wir haben die Auswahl zwischen den folgenden Werten: \"fullscreen\" , \"standalone\" , \"minimal-ui\" N\u00e4here Erl\u00e4uterungen zu den einzelnen Werten finden Sie hier , aber am besten ist, Sie probieren die unterschiedlichen Werte einfach mal aus. \"display\" : \"standalone\" Bei \"standalone\" wird das Browser-fenster ausgeblendet, d.h. wir sehen die URL-Leiste nicht und auch nicht die Steuerelemente des Browsers. Die Anwendung wirkt wie eine native App. background_color \u00b6 Der Wert von background_color ist eine Farbe, die wir typischerweise in hexadezimaler Schreibweise angeben. Ob wir diese Farbe \u00fcberhaupt sehen, h\u00e4ngt davon ab, wie lange unsere Anwendung zum Laden bracuht, denn mit background_color geben wir die Hintergrundfarbe des Bildschirms an, der gezeigt wird, w\u00e4hrend die Anwendung l\u00e4dt. Meistens sieht man das nicht, weil der Ladevorgang so schnell ist. \"background_color\" : \"#76B900\" Wir w\u00e4hlen nat\u00fcrlich das HTW-Gr\u00fcn. theme_color \u00b6 Der Wert von theme_color ist eine Farbe, die z.B. die Farbe der Werkzeugleiste auf dem Smartphone bestimmt. \"theme_color\" : \"#FF5F00\" Wir w\u00e4hlen mal das HTW-Orange. description \u00b6 Wenn der Browser eine Beschreibung der App speichert, dann nutzt er den Wert von description , z.B. wenn Sie die App als Lesezeichen speichern. \"description\" : \"Eine tolle HTW-Insta-PWA\" lang \u00b6 Mit der lang uage-Eigeneschaft definieren Sie die Sprache Ihrer App. Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"lang\" : \"de-DE\" Diese Eigenschaft wird vom Browser als Meta-Eigenschaft verwendet, kennen Sie schon aus den HTML-Dokumenten. dir \u00b6 Mit der dir ection-Eigeneschaft definieren Sie die Textrichtung Ihrer App. Die Werte sind einer der drei: \"ltr\" ( left to right ) \"rtl\" ( right to left ) \"auto\" Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"dir\" : \"ltr\" orientation \u00b6 Mit der orientation -Eigeneschaft definieren Sie, in welchem Bildschirmmodus die App betrieben (geffnet) werden soll. Bei den Werten haben Sie die Wahl zwischen: \"any\" \"natural\" \"landscape\" \"landscape-primary\" \"landscape-secondary\" \"portrait\" \"portrait-primary\" \"portrait-secondary\" Die Angaben primary und secondary beziehen sich jeweils auf eine 180-Grad-Dreheung des Ger\u00e4tes. secondary \u00f6ffnet es also jeweils \"auf dem Kopf\". \"orientation\" : \"portrait-primary\" Die Web-App sollte aber so gebaut werden, dass sie sowohl im Portrait- als auch im Landscape-Modus gut bedient werden kann (responsive). icons \u00b6 Die icons -Eigenschaft enth\u00e4lt ein Array aus Icons, die als das Icon der App auf dem Startbildschirm verwendet werden k\u00f6nnen. Typischerweise gibt man hier mehrere an, die sich in ihrer Aufl\u00f6sung unterscheiden, um das geeignete Icon ausw\u00e4hlen zu k\u00f6nnen, das zur Aufl\u00f6sung des Ausgabeger\u00e4tes passt. Gute Dimensionen sind z.B. 48X48 Pixel bis hin zu 512x512 Pixel. Die Beschreibung eines Icons ist selbst ein JSON und enth\u00e4lt drei Eigenschaften: \"src\" (der Pafd zum Icon und die Datei) \"type\" (der Typ des Bildes, z.B. image/png ) \"sizes\" (die Gr\u00f6\u00dfe des Bildes in Pixeln) Der Browser sucht sich in Abh\u00e4ngigkeit von der Aufl\u00f6sung des Ausgabeger\u00e4tes das am besten geeignete Icon selbst\u00e4ndig aus. \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] Auch hier sind wieder die korrekten relativen Pfade zu beachten. Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons und auch die obige JSON zu erzeugen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Bitte unbedingt verwenden, um sich m\u00fchsame Arbeit zu sparen! Testen der manifest.json \u00b6 Insgesamt sieht unsere manifest.json nun so aus: public/manifest.json { \"name\" : \"HTW-Insta Erweiterung\" , \"short_name\" : \"HTW-Insta\" , \"start_url\" : \"/index.html\" , \"id\" : \"/index.html\" , \"display\" : \"standalone\" , \"background_color\" : \"#76B900\" , \"description\" : \"Eine tolle HTW-Insta-PWA\" , \"lang\" : \"de-DE\" , \"dir\" : \"ltr\" , \"orientation\" : \"portrait-primary\" , \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] } Wir rufen unsere Anwendung im Browser (Verwenden Sie Google Chrome!) auf und \u00f6ffnen au\u00dferdem die DevTools: W\u00e4hlen Sie f\u00fcr die Darstellung der App eine Mobilansicht aus ( ) und klicken Sie auf den Reiter Application in den DevTools. Klicken Sie in den DevTools unter dem Reiter Application im linken Application -Men\u00fc auf Manifest . Dort sehen Sie, dass Ihre Konfiguration korrekt eingelesen wird. Es sollte nur eine einzige Warnung erscheinen, dass wir (noch) keine service worker eingerichtet haben. Mit dem Web-Manifest ist unsere Anwendung installierbar - leider noch nicht ganz, da wir noch keinen Service worker haben und die Anwendung nicht offline verwendbar ist. Die Installierbarkeit l\u00e4sst sich aber trotzdem testen, dazu m\u00fcssen wir die Anwendung jedoch simulieren. Diese Schritte sind unter Optional - f\u00fcr Interessierte beschrieben. Sie m\u00fcssen das aber nicht machen, Sie k\u00f6nnen stattdessen auch einfach einen ganz einfachen Service worker implementieren. Dazu erstellen wir eine public/sw.js und binden diese wie folgt in die public/index.html ein (siehe auch Einf\u00fchrung ): < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/sw.js' ); }); } </ script > und in die public/sw.js schreiben wir: importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Unsere Anwendung simuliert nun eine Offline-F\u00e4higkeit und ist nun installierbar. Wenn wir die Anwendung mit npm start starten, dann erscheint: Sie k\u00f6nnen die Anwendung \u00fcber das Icon installieren oder auch \u00fcber das Options-Men\u00fc (die drei vertikalen Punkte neben der URL-Leiste). Es erscheint ein Confirmation-Men\u00fc: Nach der Installation der App ist diese (unter Mac) einerseits unter Programme/Chrome-Apps zu finden, aber z.B. auch im Launchpad. Das beforeinstallprompt -Ereignis \u00b6 Das BeforeInstallPromptEvent wird ausgel\u00f6st, wenn Ihre Anwendung installierbar ist und Sie diese das erste Mal ausf\u00fchren. Es wird ausgel\u00f6st, um Ihre Anwendung zu installieren. Ein typisches Vorgehen f\u00fcr die Behandlung des Ereignisses schl\u00e4gt vor, die Anwendung nicht sofort, d.h. nicht durch die Behandlung des beforeinstallprompt -Ereignisses, zu installieren, sondern zun\u00e4chst abzuwarten, ob die Anwendung auch tats\u00e4chlich so genutzt wird, dass sich eine Installation lohnt. F\u00fcr unsere Anwendung k\u00f6nnte das z.B. bedeuten, dass diese nicht beim ersten Aufruf installiert wird, sondern dass gewartet wird, bis die Nutzerin zum ersten Mal den + -Button klickt. Ein solches typisches Vorgehen ist z.B. hier beschrieben oder hier . Wir zeigen hier einmal die Auswertung dieses Ereignisses, indem wir das Installieren durch einen Klick auf einen Installationsbutton erledigen lassen. Wie gesagt, die Behandlung des Klick-Ereignisses dieses Installationsbuttons geh\u00f6rt eigentlich woanders hin, je nachdem, was in der Anwendung gew\u00fcnscht ist, also wann die Anwendung tats\u00e4chlich installiert werden soll. Wir f\u00fcgen zun\u00e4chst den Button in die index.html ein: < button id = \"install\" style = \"display:none;\" class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--accent\" > Installieren </ button > Au\u00dferdem f\u00fcgen wir folgendes Script in die index.html hinzu: < script > const installButton = document . getElementById ( 'install' ); console . log ( 'installButton' , installButton ) let deferredPrompt ; window . addEventListener ( 'beforeinstallprompt' , evt => { console . log ( evt . platforms ); // e.g., [\"web\", \"android\", \"windows\"] evt . preventDefault (); deferredPrompt = evt ; installButton . style . display = 'block' ; }) installButton . addEventListener ( 'click' , async () => { await deferredPrompt . prompt (); const choiceResult = await deferredPrompt . userChoice ; console . log ( choiceResult . outcome ); }); window . addEventListener ( 'appinstalled' , () => { installButton . style . display = 'none' ; }) < /script> Der Button ist zun\u00e4chst auf display:none gestellt, also nicht sichtbar. Wird das beforeinstallprompt -Ereignis ausgel\u00f6st, wird zun\u00e4chst der \"normale\" Ablauf der Ereignisbehandlung ausgesetzt ( preventDefault() ). Stattdessen wird diese Aufforderung in deferredPrompt zwischengespeichert. Der Button wird auf sichtbar gesetzt ( style.display = 'block' ). Durch Klick auf den Button wird nun die Aufforderung, die in deferredPrompt zwischengespeichert ist, mithilfe von prompt() angezeigt. Klicken wir nun auf den Button, erscheint die Aufforderung. Entscheiden wir uns daf\u00fcr, die App zu installieren, wird diese installiert, was wiederum das Ereignis appinstalled aufruft. Als Ereignisnehandlung dieses Ereignisses k\u00f6nnen wir den Button wieder auf unsichtbar setzen. Beachten Sie, dass das BeforeInstallPromptEvent nicht von allen Browsern unterst\u00fctzt wird. Hier die aktuelle \u00dcbersicht aus BeforeInstallPromptEvent : Optional - f\u00fcr Interessierte \u00b6 Um die Funktionsweise des Web-App-Manifestes tats\u00e4chlich zu testen, ben\u00f6tigen wir jedoch ein Smartphone (oder Tablet). Wir wollen ein solches emulieren (ein Android-Smartphone) und starten dazu Android Studio . Wenn wir Android Studio \u00f6ffnen, w\u00e4hlen wir zun\u00e4chst + Create New Project . Durch die folgenden Vorschl\u00e4ge k\u00f6nnen wir einfach stets mit Next und dann mit Finish navigieren, ohne irgendetwas zu \u00e4ndern. Wir sind gar nicht am Projekt interessiert, sondern nur am AVD Manager ( Android Virtual Device Manaager ), den wir unter dem Men\u00fcpunkt Tools finden. Nach dem \u00d6ffnen des AVD-Managers haben Sie die M\u00f6glichkeit, weitere Android-Phones zur Liste Ihrer virtuellen Ger\u00e4te hinzuzuf\u00fcgen. Das k\u00f6nnen Sie ruhig machen, um ger\u00e4te mit verschiedenen Aufl\u00f6sungen ausprobieren zu k\u00f6nnen. W\u00e4hlen Sie dann ein Ger\u00e4t Ihrer Wahl und klicken Sie f\u00fcr das Ger\u00e4t unter der Spalte Actions auf den Play-Button: Das dauert dann eine ganze Weile, aber am Ende erscheint ein Smartphone auf Ihrem Bildschirm: Auf diesem Android-Ger\u00e4t ist Google Chrome verf\u00fcgbar. Starten Sie Google Chrome dort durch Mausklick und geben Sie als URL 10.0.2.2.:8080 ein. Unsere Webanwendung wird ge\u00f6ffnet: Klicken Sie jetzt auf die drei vertikalen Punkte neben der URL-Leiste und w\u00e4hlen Sie Add to Home screen : Es wird uns eines unserer Icons angeboten und der unter name gew\u00e4hlte Name: Klicken Sie Add und dann Add automatically . Das Icon erscheint auf dem Homescreen (Startbildschirm). Eventuell m\u00fcssen Sie den Browser zuvor schlie\u00dfen. Klicken Sie auf das Icon, um unsere Anwendung zu starten. Sie sehen kurz den Splashscreen mit der von uns gew\u00e4hlten Hintergrundfarbe HTW-Gr\u00fcn. Beachten Sie auch, dass um unsere Anwendung herum kein Browser-Fenster zu sehen ist. Sie l\u00e4uft standalone (nat\u00fcrlich im Browser, aber der ist nicht zu sehen). Das sieht man insbesondere, wenn man sich alle ge\u00f6ffneten Anwendungen anschaut: Sobald wir f\u00fcr unserer PWA auch noch einen service worker registriert haben, kommen wir nochmal hierher zur\u00fcck und werden daf\u00fcr sorgen, dass der Browser uns sogar fragt, ob wir ein Icon auf dem Startbildschirm ablegen wollen. Erstaz f\u00fcr manifest.json f\u00fcr Safari \u00b6 Leider unterst\u00fctzt Safari (Apple) das manifest.json (noch) nicht, obwohl es eine Spezifikation des W3C ist. \u00dcber die Browser-Untert\u00fctzung f\u00fcr das Web-App-Manifest k\u00f6nnen Sie sich z.B. hier informieren. Die Seite enth\u00e4lt auch eine gute Zusammenfassung aller Eigenschaften des Web-App-Manifestes. Es lohnt sich auch ein Blick hierauf . Um f\u00fcr Safari eine \u00e4hnliche Funktionalit\u00e4t zur Verf\u00fcgung zu stellen, wie das Web-App-Manifest, m\u00fcssen in den HTML-Dateien unserer Anwendung ein paar Meta-Angaben erfolgen: 1 2 3 4 5 6 7 8 9 10 11 12 < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < meta name = \"apple-mobile-web-app-status-bar-style\" content = \"black\" > < meta name = \"apple-mobile-web-app-title\" content = \"HTW-Insta\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw57x57.png\" sizes = \"57x57\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw60x60.png\" sizes = \"60x60\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw72x72.png\" sizes = \"72x72\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw76x76.png\" sizes = \"76x76\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw114x114.png\" sizes = \"114x114\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw120x120.png\" sizes = \"120x120\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw144x144.png\" sizes = \"144x144\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw152x152.png\" sizes = \"152x152\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw180x180.png\" sizes = \"180x180\" > So wirklich klar ist es allerdings nicht, inwieweit Apple tats\u00e4chlich PWAs unterst\u00fctzt und unterst\u00fctzen m\u00f6chte. Es scheint eher so, dass Apple volle Kontrolle dar\u00fcber behalten m\u00f6chte, welche Apps auf iPhones oder iOS-Tablets laufen d\u00fcrfen, n\u00e4mlich solche, die (nur) \u00fcber den App-Store verf\u00fcgbar sind. Siehe dazu z.B. hier und hier . Sollten Sie ein iPhone haben und sollte Ihre Anwendung mithilfe von npm start ausgef\u00fchrt sein, so k\u00f6nnen Sie allerdings mal http://141.45.57.28:8080 in Ihren Browser im Handy eingeben. Es muss nichts weiter installiert werden. Sie k\u00f6nnen aber kein Icon auf den Startbildschirm ablegen :-(. Eine weitere Unterst\u00fctzung f\u00fcr iOS Safari bietet PWACompat . Sie m\u00fcssten dann entweder in die index.html unterhalb des Einbindens der manifest.json noch < script async src = \"https://unpkg.com/pwacompat\" crossorigin = \"anonymous\" ></ script > statisch hinzuf\u00fcgen oder dynamisch f\u00fcr den folgenden Fall: < script type = \"module\" > // detect iOS Safari if (( 'standalone' in navigator ) && ( ! navigator . standalone )) { import ( 'https://unpkg.com/pwacompat' ); } </ script > Success Wir haben unsere Webanwendung installierbar gemacht. Zumindest auf Android-Ger\u00e4ten. Dies geschieht mithilfe der Datei manifest.json , die wir in alle html -Seiten unserer Anwendung einbinden. Wir haben viele Eigenschaften kennengelernt, die wir in diesem Web-App-Manifest definieren k\u00f6nnen. Mithilfe des Emulators von Android Studio k\u00f6nnen wir die Anwendung des Web-App-Manifestes auf Android-Ger\u00e4ten ausprobieren. Wir schauen uns nun einen weiteren zentralen Funktionsblock an, n\u00e4mlich Service Worker .","title":"Manifest"},{"location":"manifest/#web-app-manifest","text":"Das Web-App-Manifest ist zun\u00e4chst einmal eine Datei, n\u00e4mlich manifest.json . Sie wird also in der JavaScript Object Notation (JSON) geschrieben. Diese Datei dient als Information f\u00fcr den Browser. Sie wird also vom Browser ausgelesen. Beispielsweise kann in der manifest.json vereinbart werden, dass sich die Webanwendung selbst auf dem Startbildschirm Ihres Mobilger\u00e4tes installiert. Dann gen\u00fcgt ein Klick auf das Icon auf dem Startbildschirm und die Webanwendung wird durch den Browser ge\u00f6ffnet. Somit h\u00e4tten wir schonmal eine wesentliche Gemeinsamkeit zu einer nativen App geschaffen, welche ja auch durch ein Klick auf ein Icon auf dem Startbildschirm gestartet werden k\u00f6nnen. Wir lernen kennen, wie wir ein solches Manifest unserer PWA hinzuf\u00fcgen, wie es konfiguriert werden kann und wie wir die Auswirkungen eines solchen Manifestes auf mobilen Ger\u00e4ten sehen k\u00f6nnen.","title":"Web-App-Manifest"},{"location":"manifest/#installierbar","text":"Mithilfe eines Web-App-Manifestes machen wir unsere Webanwendung installierbar auf einem mobilen Ger\u00e4t. Die Anwendung muss nicht einem App-Store hinzugef\u00fcgt werden, sondern wird einfach \u00fcber das Web durch einen Browser geladen. Normalerweise kann eine Webanwendung ja nur dadurch gestartet werden, dass ihre URL in den Browser eingetragen wird (oder Sie haben ein lesezeichen auf die Webanwendung in Ihrem Browser gesetzt). Nun wollen wir auf den Startbildschirm des Smartphones ein Icon setzen (genau wie f\u00fcr native Apps) und dar\u00fcber die Anwendung starten. Daf\u00fcr f\u00fcgen wir im Projektordner in dem Ordner /public die Datei manifest.json hinzu: Diese Datei sollte genau so hei\u00dfen und es ist g\u00fcnstig, sie in den /public -Ordner zu legen. Achten Sie darauf, wohin Sie die Datei legen. Wenn Sie sie direkt in den Projektordner legen, dann gelten alle Pfadangaben in dieser Datei ausgehend von dieser Position. Wenn Sie sie in den public -Ordner legen, so wie wir, dann betrachten Sie die relativen Pfade, die Sie angeben, immer von diesem Ordner aus. Nun m\u00fcssen wir diese Datei jeder HTML-Seite unserer Anwendung bekannt machen. In unserer Anwendung existieren zwei *.html -Dateien, die public/index.html und die public/help/index.html . In beide Datein tragen wir im <head> folgenden Eintrag ein: < link rel = \"manifest\" href = \"/manifest.json\" > Aber Achtung! : Die public/help/index.html liegt ja im Unterordner /help . Das bedeutet, dass von der Datei public/help/index.html aus gesehen, muss der help -Ordner erst verlassen werden, um die manifest.json -Datei zu erreichen. In die public/help/index.html schreiben wir also < link rel = \"manifest\" href = \"../manifest.json\" > Das hei\u00dft, der <head> -Bereich der public/index.html sieht dann wie folgt aus (und der von public/help/index.html sehr \u00e4hnlich - achten Sie auf den korrekten relativen Pfad!): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > IKT-PWA </ title > < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > < link rel = \"stylesheet\" href = \"/src/css/app.css\" > < link rel = \"stylesheet\" href = \"/src/css/feed.css\" > < link rel = \"manifest\" href = \"/manifest.json\" > </ head > In einer Single Page Application muss der Eintrag nur einmal erfolgen - in der single page, der index.html .","title":"Installierbar"},{"location":"manifest/#mogliche-eigenschaften-in-der-manifestjson","text":"Eintr\u00e4ge in einer JSON-Datei sind key-value-Paare , d.h. ein Eintrag hat die folgende Form: \"property\" : value oder auf Deutsch \"eigenschaft\": wert . JSON-Dateien beginnen und enden immer mit einer geschweiften Klammer und die einzelnen key-value-Paare sind durch Komma getrennt. value kann selbst ein JSON sein oder ein Array oder ein String oder eine Zahl. Wir betrachten nun einige ausgew\u00e4hlte properties , die in einer manifest.json definiert werden k\u00f6nnen. Einen vollst\u00e4ndigen \u00dcberblick \u00fcber alle m\u00f6glichen Eigenschaften und deren Umsetzung in den einzelnen Browsern finden Sie hier . Eine kurze Einf\u00fchrung zu manifest.json finden Sie auch hier . Die Spezifikation f\u00fcr das Web-App-Manifest vom W3C finden Sie hier .","title":"M\u00f6gliche Eigenschaften in der manifest.json"},{"location":"manifest/#name","text":"Mit der Eigenschaft name geben wir unserer Webanwendung eine Beschreibung. In der package.json haben wir unserer Anwendung bereits einen Namen gegeben, aber name aus der manifest.json beschreibt zum Beispiel den Namen der App auf dem Begr\u00fc\u00dfungsschrim, wie wir gleich sehen werden. Es ist ratsam, den Namen nicht l\u00e4nger als 45 Zeichen zu w\u00e4hlen (das ist die Begrenzung, die Google Chrome und Microsoft Edge f\u00fcr sich festgelegt haben). Wir sagen mal: \"name\" : \"HTW-Insta Erweiterung\" Die Eigenschaft name ist in der manifest.json verpflichtend, d.h. sie muss angegeben werden (au\u00dferdem noch version und manifest_version , alle anderen Eigenschaften sind optional.)","title":"name"},{"location":"manifest/#short_name","text":"Der Wert von short_name wird z.B. verwendet als Name unserer App unter dem Icon auf dem Startbildschirm (falls der Name dort mit erscheint). Der short_name sollte nicht l\u00e4nger als 12 Zeichen sein. Ist kein short_name in der manifest.json angegeben, wird der Wert von name verwendet und, falls n\u00f6tig, einfach gek\u00fcrzt. \"short_name\" : \"HTW-Insta\"","title":"short_name"},{"location":"manifest/#start_url","text":"Der Wert von start_url gibt den Pfad und die Datei an, die beim Starten unserer Anwendung geladen werden soll. In unserem Fall soll die /public/index.html geladen werden. Die manifest.json -Datei befindet sich im /public -ordner, also ist der Pfad zur Datei nur / .: \"start_url\" : \"/index.html\" Beachten Sie (nochmal): der Pfad ist immer relativ zur manifest.json . Anegenommen, der Wert von start_url ist ../start_point.html und die URL der manifest.json ist https://example.com/resources/manifest.json , dann w\u00fcrde die Anwendung unter https://example.com/start_point.html starten.","title":"start_url"},{"location":"manifest/#display","text":"Der Wert von display gibt an, wie die Anwendung beim Start aussehen soll. Wir haben die Auswahl zwischen den folgenden Werten: \"fullscreen\" , \"standalone\" , \"minimal-ui\" N\u00e4here Erl\u00e4uterungen zu den einzelnen Werten finden Sie hier , aber am besten ist, Sie probieren die unterschiedlichen Werte einfach mal aus. \"display\" : \"standalone\" Bei \"standalone\" wird das Browser-fenster ausgeblendet, d.h. wir sehen die URL-Leiste nicht und auch nicht die Steuerelemente des Browsers. Die Anwendung wirkt wie eine native App.","title":"display"},{"location":"manifest/#background_color","text":"Der Wert von background_color ist eine Farbe, die wir typischerweise in hexadezimaler Schreibweise angeben. Ob wir diese Farbe \u00fcberhaupt sehen, h\u00e4ngt davon ab, wie lange unsere Anwendung zum Laden bracuht, denn mit background_color geben wir die Hintergrundfarbe des Bildschirms an, der gezeigt wird, w\u00e4hrend die Anwendung l\u00e4dt. Meistens sieht man das nicht, weil der Ladevorgang so schnell ist. \"background_color\" : \"#76B900\" Wir w\u00e4hlen nat\u00fcrlich das HTW-Gr\u00fcn.","title":"background_color"},{"location":"manifest/#theme_color","text":"Der Wert von theme_color ist eine Farbe, die z.B. die Farbe der Werkzeugleiste auf dem Smartphone bestimmt. \"theme_color\" : \"#FF5F00\" Wir w\u00e4hlen mal das HTW-Orange.","title":"theme_color"},{"location":"manifest/#description","text":"Wenn der Browser eine Beschreibung der App speichert, dann nutzt er den Wert von description , z.B. wenn Sie die App als Lesezeichen speichern. \"description\" : \"Eine tolle HTW-Insta-PWA\"","title":"description"},{"location":"manifest/#lang","text":"Mit der lang uage-Eigeneschaft definieren Sie die Sprache Ihrer App. Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"lang\" : \"de-DE\" Diese Eigenschaft wird vom Browser als Meta-Eigenschaft verwendet, kennen Sie schon aus den HTML-Dokumenten.","title":"lang"},{"location":"manifest/#dir","text":"Mit der dir ection-Eigeneschaft definieren Sie die Textrichtung Ihrer App. Die Werte sind einer der drei: \"ltr\" ( left to right ) \"rtl\" ( right to left ) \"auto\" Der Wert ist der 4-buchstabige L\u00e4ndercode, z.B. \"en-US\", \"en-UK\" oder \"de-DE\". \"dir\" : \"ltr\"","title":"dir"},{"location":"manifest/#orientation","text":"Mit der orientation -Eigeneschaft definieren Sie, in welchem Bildschirmmodus die App betrieben (geffnet) werden soll. Bei den Werten haben Sie die Wahl zwischen: \"any\" \"natural\" \"landscape\" \"landscape-primary\" \"landscape-secondary\" \"portrait\" \"portrait-primary\" \"portrait-secondary\" Die Angaben primary und secondary beziehen sich jeweils auf eine 180-Grad-Dreheung des Ger\u00e4tes. secondary \u00f6ffnet es also jeweils \"auf dem Kopf\". \"orientation\" : \"portrait-primary\" Die Web-App sollte aber so gebaut werden, dass sie sowohl im Portrait- als auch im Landscape-Modus gut bedient werden kann (responsive).","title":"orientation"},{"location":"manifest/#icons","text":"Die icons -Eigenschaft enth\u00e4lt ein Array aus Icons, die als das Icon der App auf dem Startbildschirm verwendet werden k\u00f6nnen. Typischerweise gibt man hier mehrere an, die sich in ihrer Aufl\u00f6sung unterscheiden, um das geeignete Icon ausw\u00e4hlen zu k\u00f6nnen, das zur Aufl\u00f6sung des Ausgabeger\u00e4tes passt. Gute Dimensionen sind z.B. 48X48 Pixel bis hin zu 512x512 Pixel. Die Beschreibung eines Icons ist selbst ein JSON und enth\u00e4lt drei Eigenschaften: \"src\" (der Pafd zum Icon und die Datei) \"type\" (der Typ des Bildes, z.B. image/png ) \"sizes\" (die Gr\u00f6\u00dfe des Bildes in Pixeln) Der Browser sucht sich in Abh\u00e4ngigkeit von der Aufl\u00f6sung des Ausgabeger\u00e4tes das am besten geeignete Icon selbst\u00e4ndig aus. \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] Auch hier sind wieder die korrekten relativen Pfade zu beachten. Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons und auch die obige JSON zu erzeugen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Bitte unbedingt verwenden, um sich m\u00fchsame Arbeit zu sparen!","title":"icons"},{"location":"manifest/#testen-der-manifestjson","text":"Insgesamt sieht unsere manifest.json nun so aus: public/manifest.json { \"name\" : \"HTW-Insta Erweiterung\" , \"short_name\" : \"HTW-Insta\" , \"start_url\" : \"/index.html\" , \"id\" : \"/index.html\" , \"display\" : \"standalone\" , \"background_color\" : \"#76B900\" , \"description\" : \"Eine tolle HTW-Insta-PWA\" , \"lang\" : \"de-DE\" , \"dir\" : \"ltr\" , \"orientation\" : \"portrait-primary\" , \"icons\" : [ { \"src\" : \"/src/images/icons/fiw48x48.png\" , \"type\" : \"image/png\" , \"sizes\" : \"48x48\" }, { \"src\" : \"/src/images/icons/fiw72x72.png\" , \"type\" : \"image/png\" , \"sizes\" : \"72x72\" }, { \"src\" : \"/src/images/icons/fiw96x96.png\" , \"type\" : \"image/png\" , \"sizes\" : \"96x96\" }, { \"src\" : \"/src/images/icons/fiw128x128.png\" , \"type\" : \"image/png\" , \"sizes\" : \"128x128\" }, { \"src\" : \"/src/images/icons/fiw256x256.png\" , \"type\" : \"image/png\" , \"sizes\" : \"256x256\" }, { \"src\" : \"/src/images/icons/fiw484x484.png\" , \"type\" : \"image/png\" , \"sizes\" : \"484x484\" } ] } Wir rufen unsere Anwendung im Browser (Verwenden Sie Google Chrome!) auf und \u00f6ffnen au\u00dferdem die DevTools: W\u00e4hlen Sie f\u00fcr die Darstellung der App eine Mobilansicht aus ( ) und klicken Sie auf den Reiter Application in den DevTools. Klicken Sie in den DevTools unter dem Reiter Application im linken Application -Men\u00fc auf Manifest . Dort sehen Sie, dass Ihre Konfiguration korrekt eingelesen wird. Es sollte nur eine einzige Warnung erscheinen, dass wir (noch) keine service worker eingerichtet haben. Mit dem Web-Manifest ist unsere Anwendung installierbar - leider noch nicht ganz, da wir noch keinen Service worker haben und die Anwendung nicht offline verwendbar ist. Die Installierbarkeit l\u00e4sst sich aber trotzdem testen, dazu m\u00fcssen wir die Anwendung jedoch simulieren. Diese Schritte sind unter Optional - f\u00fcr Interessierte beschrieben. Sie m\u00fcssen das aber nicht machen, Sie k\u00f6nnen stattdessen auch einfach einen ganz einfachen Service worker implementieren. Dazu erstellen wir eine public/sw.js und binden diese wie folgt in die public/index.html ein (siehe auch Einf\u00fchrung ): < script > // Check that service workers are supported if ( 'serviceWorker' in navigator ) { // Use the window load event to keep the page load performant window . addEventListener ( 'load' , () => { navigator . serviceWorker . register ( '/sw.js' ); }); } </ script > und in die public/sw.js schreiben wir: importScripts ( 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js' ); workbox . routing . registerRoute ( ({ request }) => request . destination === 'image' , new workbox . strategies . NetworkFirst () // NetworkFirst() vs CacheFirst() ) Unsere Anwendung simuliert nun eine Offline-F\u00e4higkeit und ist nun installierbar. Wenn wir die Anwendung mit npm start starten, dann erscheint: Sie k\u00f6nnen die Anwendung \u00fcber das Icon installieren oder auch \u00fcber das Options-Men\u00fc (die drei vertikalen Punkte neben der URL-Leiste). Es erscheint ein Confirmation-Men\u00fc: Nach der Installation der App ist diese (unter Mac) einerseits unter Programme/Chrome-Apps zu finden, aber z.B. auch im Launchpad.","title":"Testen der manifest.json"},{"location":"manifest/#das-beforeinstallprompt-ereignis","text":"Das BeforeInstallPromptEvent wird ausgel\u00f6st, wenn Ihre Anwendung installierbar ist und Sie diese das erste Mal ausf\u00fchren. Es wird ausgel\u00f6st, um Ihre Anwendung zu installieren. Ein typisches Vorgehen f\u00fcr die Behandlung des Ereignisses schl\u00e4gt vor, die Anwendung nicht sofort, d.h. nicht durch die Behandlung des beforeinstallprompt -Ereignisses, zu installieren, sondern zun\u00e4chst abzuwarten, ob die Anwendung auch tats\u00e4chlich so genutzt wird, dass sich eine Installation lohnt. F\u00fcr unsere Anwendung k\u00f6nnte das z.B. bedeuten, dass diese nicht beim ersten Aufruf installiert wird, sondern dass gewartet wird, bis die Nutzerin zum ersten Mal den + -Button klickt. Ein solches typisches Vorgehen ist z.B. hier beschrieben oder hier . Wir zeigen hier einmal die Auswertung dieses Ereignisses, indem wir das Installieren durch einen Klick auf einen Installationsbutton erledigen lassen. Wie gesagt, die Behandlung des Klick-Ereignisses dieses Installationsbuttons geh\u00f6rt eigentlich woanders hin, je nachdem, was in der Anwendung gew\u00fcnscht ist, also wann die Anwendung tats\u00e4chlich installiert werden soll. Wir f\u00fcgen zun\u00e4chst den Button in die index.html ein: < button id = \"install\" style = \"display:none;\" class = \"mdl-button mdl-js-button mdl-button--raised mdl-button--accent\" > Installieren </ button > Au\u00dferdem f\u00fcgen wir folgendes Script in die index.html hinzu: < script > const installButton = document . getElementById ( 'install' ); console . log ( 'installButton' , installButton ) let deferredPrompt ; window . addEventListener ( 'beforeinstallprompt' , evt => { console . log ( evt . platforms ); // e.g., [\"web\", \"android\", \"windows\"] evt . preventDefault (); deferredPrompt = evt ; installButton . style . display = 'block' ; }) installButton . addEventListener ( 'click' , async () => { await deferredPrompt . prompt (); const choiceResult = await deferredPrompt . userChoice ; console . log ( choiceResult . outcome ); }); window . addEventListener ( 'appinstalled' , () => { installButton . style . display = 'none' ; }) < /script> Der Button ist zun\u00e4chst auf display:none gestellt, also nicht sichtbar. Wird das beforeinstallprompt -Ereignis ausgel\u00f6st, wird zun\u00e4chst der \"normale\" Ablauf der Ereignisbehandlung ausgesetzt ( preventDefault() ). Stattdessen wird diese Aufforderung in deferredPrompt zwischengespeichert. Der Button wird auf sichtbar gesetzt ( style.display = 'block' ). Durch Klick auf den Button wird nun die Aufforderung, die in deferredPrompt zwischengespeichert ist, mithilfe von prompt() angezeigt. Klicken wir nun auf den Button, erscheint die Aufforderung. Entscheiden wir uns daf\u00fcr, die App zu installieren, wird diese installiert, was wiederum das Ereignis appinstalled aufruft. Als Ereignisnehandlung dieses Ereignisses k\u00f6nnen wir den Button wieder auf unsichtbar setzen. Beachten Sie, dass das BeforeInstallPromptEvent nicht von allen Browsern unterst\u00fctzt wird. Hier die aktuelle \u00dcbersicht aus BeforeInstallPromptEvent :","title":"Das beforeinstallprompt-Ereignis"},{"location":"manifest/#optional-fur-interessierte","text":"Um die Funktionsweise des Web-App-Manifestes tats\u00e4chlich zu testen, ben\u00f6tigen wir jedoch ein Smartphone (oder Tablet). Wir wollen ein solches emulieren (ein Android-Smartphone) und starten dazu Android Studio . Wenn wir Android Studio \u00f6ffnen, w\u00e4hlen wir zun\u00e4chst + Create New Project . Durch die folgenden Vorschl\u00e4ge k\u00f6nnen wir einfach stets mit Next und dann mit Finish navigieren, ohne irgendetwas zu \u00e4ndern. Wir sind gar nicht am Projekt interessiert, sondern nur am AVD Manager ( Android Virtual Device Manaager ), den wir unter dem Men\u00fcpunkt Tools finden. Nach dem \u00d6ffnen des AVD-Managers haben Sie die M\u00f6glichkeit, weitere Android-Phones zur Liste Ihrer virtuellen Ger\u00e4te hinzuzuf\u00fcgen. Das k\u00f6nnen Sie ruhig machen, um ger\u00e4te mit verschiedenen Aufl\u00f6sungen ausprobieren zu k\u00f6nnen. W\u00e4hlen Sie dann ein Ger\u00e4t Ihrer Wahl und klicken Sie f\u00fcr das Ger\u00e4t unter der Spalte Actions auf den Play-Button: Das dauert dann eine ganze Weile, aber am Ende erscheint ein Smartphone auf Ihrem Bildschirm: Auf diesem Android-Ger\u00e4t ist Google Chrome verf\u00fcgbar. Starten Sie Google Chrome dort durch Mausklick und geben Sie als URL 10.0.2.2.:8080 ein. Unsere Webanwendung wird ge\u00f6ffnet: Klicken Sie jetzt auf die drei vertikalen Punkte neben der URL-Leiste und w\u00e4hlen Sie Add to Home screen : Es wird uns eines unserer Icons angeboten und der unter name gew\u00e4hlte Name: Klicken Sie Add und dann Add automatically . Das Icon erscheint auf dem Homescreen (Startbildschirm). Eventuell m\u00fcssen Sie den Browser zuvor schlie\u00dfen. Klicken Sie auf das Icon, um unsere Anwendung zu starten. Sie sehen kurz den Splashscreen mit der von uns gew\u00e4hlten Hintergrundfarbe HTW-Gr\u00fcn. Beachten Sie auch, dass um unsere Anwendung herum kein Browser-Fenster zu sehen ist. Sie l\u00e4uft standalone (nat\u00fcrlich im Browser, aber der ist nicht zu sehen). Das sieht man insbesondere, wenn man sich alle ge\u00f6ffneten Anwendungen anschaut: Sobald wir f\u00fcr unserer PWA auch noch einen service worker registriert haben, kommen wir nochmal hierher zur\u00fcck und werden daf\u00fcr sorgen, dass der Browser uns sogar fragt, ob wir ein Icon auf dem Startbildschirm ablegen wollen.","title":"Optional - f\u00fcr Interessierte"},{"location":"manifest/#erstaz-fur-manifestjson-fur-safari","text":"Leider unterst\u00fctzt Safari (Apple) das manifest.json (noch) nicht, obwohl es eine Spezifikation des W3C ist. \u00dcber die Browser-Untert\u00fctzung f\u00fcr das Web-App-Manifest k\u00f6nnen Sie sich z.B. hier informieren. Die Seite enth\u00e4lt auch eine gute Zusammenfassung aller Eigenschaften des Web-App-Manifestes. Es lohnt sich auch ein Blick hierauf . Um f\u00fcr Safari eine \u00e4hnliche Funktionalit\u00e4t zur Verf\u00fcgung zu stellen, wie das Web-App-Manifest, m\u00fcssen in den HTML-Dateien unserer Anwendung ein paar Meta-Angaben erfolgen: 1 2 3 4 5 6 7 8 9 10 11 12 < meta name = \"apple-mobile-web-app-capable\" content = \"yes\" > < meta name = \"apple-mobile-web-app-status-bar-style\" content = \"black\" > < meta name = \"apple-mobile-web-app-title\" content = \"HTW-Insta\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw57x57.png\" sizes = \"57x57\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw60x60.png\" sizes = \"60x60\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw72x72.png\" sizes = \"72x72\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw76x76.png\" sizes = \"76x76\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw114x114.png\" sizes = \"114x114\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw120x120.png\" sizes = \"120x120\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw144x144.png\" sizes = \"144x144\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw152x152.png\" sizes = \"152x152\" > < link rel = \"apple-touch-icon\" href = \"/src/images/icons/ios-fiw180x180.png\" sizes = \"180x180\" > So wirklich klar ist es allerdings nicht, inwieweit Apple tats\u00e4chlich PWAs unterst\u00fctzt und unterst\u00fctzen m\u00f6chte. Es scheint eher so, dass Apple volle Kontrolle dar\u00fcber behalten m\u00f6chte, welche Apps auf iPhones oder iOS-Tablets laufen d\u00fcrfen, n\u00e4mlich solche, die (nur) \u00fcber den App-Store verf\u00fcgbar sind. Siehe dazu z.B. hier und hier . Sollten Sie ein iPhone haben und sollte Ihre Anwendung mithilfe von npm start ausgef\u00fchrt sein, so k\u00f6nnen Sie allerdings mal http://141.45.57.28:8080 in Ihren Browser im Handy eingeben. Es muss nichts weiter installiert werden. Sie k\u00f6nnen aber kein Icon auf den Startbildschirm ablegen :-(. Eine weitere Unterst\u00fctzung f\u00fcr iOS Safari bietet PWACompat . Sie m\u00fcssten dann entweder in die index.html unterhalb des Einbindens der manifest.json noch < script async src = \"https://unpkg.com/pwacompat\" crossorigin = \"anonymous\" ></ script > statisch hinzuf\u00fcgen oder dynamisch f\u00fcr den folgenden Fall: < script type = \"module\" > // detect iOS Safari if (( 'standalone' in navigator ) && ( ! navigator . standalone )) { import ( 'https://unpkg.com/pwacompat' ); } </ script > Success Wir haben unsere Webanwendung installierbar gemacht. Zumindest auf Android-Ger\u00e4ten. Dies geschieht mithilfe der Datei manifest.json , die wir in alle html -Seiten unserer Anwendung einbinden. Wir haben viele Eigenschaften kennengelernt, die wir in diesem Web-App-Manifest definieren k\u00f6nnen. Mithilfe des Emulators von Android Studio k\u00f6nnen wir die Anwendung des Web-App-Manifestes auf Android-Ger\u00e4ten ausprobieren. Wir schauen uns nun einen weiteren zentralen Funktionsblock an, n\u00e4mlich Service Worker .","title":"Erstaz f\u00fcr manifest.json f\u00fcr Safari"},{"location":"openapi/","text":"OpenAPI \u00b6 Folgende Endpunkte: GET /expenses POST /expense DELETE /expense/:id GET /expenses/date/:from/:to GET /expenses/range/:from/:to \u00f6ffne https://app.swaggerhub.com/home registrieren und einloggen Create New","title":"OpenAPI"},{"location":"openapi/#openapi","text":"Folgende Endpunkte: GET /expenses POST /expense DELETE /expense/:id GET /expenses/date/:from/:to GET /expenses/range/:from/:to \u00f6ffne https://app.swaggerhub.com/home registrieren und einloggen Create New","title":"OpenAPI"},{"location":"tools/","text":"Werkzeuge \u00b6 Chrome \u00b6 Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren. Lighthouse \u00b6 Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen. Integrated Development Environment (IDE) \u00b6 F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Node.js \u00b6 Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner. Android Studio \u00b6 Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)). https f\u00fcr localhost \u00b6 f\u00fcr Mac siehe hier https f\u00fcr Webserver \u00b6 siehe hier siehe hier Ngrok \u00b6 Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft. Icons erzeugen und in die manifest.json eintragen \u00b6 Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier . WebApp-Manifest-Generator \u00b6 Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier . Workbox \u00b6 Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt. MongoDB \u00b6 Es gibt zwei M\u00f6glichkeiten, MongoDB zu verwenden: entweder Sie nutzen das Cloud-Angebot, also eine Remote-MongoDB. Diese nennt sich MongoDB Atlas . Oder Sie installieren sich die MongoDB \"on-premise\", also lokal auf Ihrem Rechner. Dazu w\u00e4hlen Sie unter mongodb.com den Reiter Products on dort unter Community Edition den Link Community Server . Dann landen Sie auf https://www.mongodb.com/try/download/community . Dort k\u00f6nnen Sie sich die MongoDB herunterladen und installieren. Installationsanleitungen finden Sie unter https://www.mongodb.com/docs/manual/installation/ . Wichtig ist, dass die MongoDB einmalig mit mongod starten. MongoDB Compass \u00b6 Um sich Ihre MongoDB-Datenbanken anzuschauen (und auch, um Operationen darauf auszuf\u00fchren), empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach. Insomnia REST \u00b6 Eine gute Alternative zu Postman ist Insomnia . Sehr empfehlenswert! Aber Postman auch. Interssante Links zu PWA \u00b6 PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Tools"},{"location":"tools/#werkzeuge","text":"","title":"Werkzeuge"},{"location":"tools/#chrome","text":"Es wird empfohlen, Chrome als Browser zu verwenden, da dieser Browser die besten Entwicklertools f\u00fcr Progressive Web Apps zur Verf\u00fcgung stellt. Insbesondere ist es empfehlenswert, das Plugin Lighthouse f\u00fcr die Developertools von Chrome zu installieren.","title":"Chrome"},{"location":"tools/#lighthouse","text":"Lighthouse ist ein Plugin f\u00fcr die Chrome-Developertools, mit dessen Hilfe gemessen werden kann, wie progressive eine App ist. Installieren Sie sich dieses Plugin, um auch die Performance Ihrer PWA zu messen.","title":"Lighthouse"},{"location":"tools/#integrated-development-environment-ide","text":"F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten.","title":"Integrated Development Environment (IDE)"},{"location":"tools/#nodejs","text":"Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Laden Sie sich hier die aktuellste Version von Node.js herunter und installieren Sie diese auf Ihrem Rechner.","title":"Node.js"},{"location":"tools/#android-studio","text":"Um unsere PWAs als mobile Webanwendungen zu emulieren, benutzen wir Android Studio . Es ist f\u00fcr Mac, Linux und Windows verf\u00fcgbar. Laden Sie es sich herunter und installieren Sie es. Sie k\u00f6nnen es herunterladen und installieren, ohne einen Google-Account anzulegen (es gibt auch keinen Grund, das zu tun ;-)).","title":"Android Studio"},{"location":"tools/#https-fur-localhost","text":"f\u00fcr Mac siehe hier","title":"https f\u00fcr localhost"},{"location":"tools/#https-fur-webserver","text":"siehe hier siehe hier","title":"https f\u00fcr Webserver"},{"location":"tools/#ngrok","text":"Ngrok stellt einen sicheren Tunnel zu einem Webserver her. Ngrok wirkt wie ein Proxy, der einer Anwendung suggeriert, mit einem Webserver \u00fcber eine sichere Verbindung zu kommunizieren, d.h. die Verbindung wirkt wie eine https -Verbindung. Die Installation ist einfach, ben\u00f6tigt aber Registrierungsdaten (zur Erzeugung des Authentifizierungstokens). Nach dem Download wird das Paket entpackt und mit dem Authentifizierungstoken aufgerufen. Nach dem Starten der Webanwendung stellt man mit ngrok http <Port> den sicheren Tunnel her, wobei <Port> f\u00fcr den Port steht, unter dem die Anwednung auf dem Webserver l\u00e4uft.","title":"Ngrok"},{"location":"tools/#icons-erzeugen-und-in-die-manifestjson-eintragen","text":"Es ist ziemlich m\u00fchsam, alle ben\u00f6tigten Icons f\u00fcr die unterschiedlichen Plattformen zu erzeugen und dann noch die entsprechenden Eintr\u00e4ge in der manifest.json vorzunehmen. Zum Gl\u00fcck gibt es aber ein Werkzeug, das das f\u00fcr uns \u00fcbernimmt: pwa-asset-generator . Sie ben\u00f6tigen nur das Ausgangsicon in Originalgr\u00f6\u00dfe und alles andere wird f\u00fcr Sie erledgt. Alles weitere dazu steht hier .","title":"Icons erzeugen und in die manifest.json eintragen"},{"location":"tools/#webapp-manifest-generator","text":"Bei der Erstellung Ihrer manifest.json k\u00f6nnen Sie sich auch unterst\u00fctzen lassen, n\u00e4mlich hier oder hier .","title":"WebApp-Manifest-Generator"},{"location":"tools/#workbox","text":"Workbox ist eine JavaScript-Bibliothek, die alle wesentlichen Funktionalit\u00e4ten von Service Workern bereitstellt.","title":"Workbox"},{"location":"tools/#mongodb","text":"Es gibt zwei M\u00f6glichkeiten, MongoDB zu verwenden: entweder Sie nutzen das Cloud-Angebot, also eine Remote-MongoDB. Diese nennt sich MongoDB Atlas . Oder Sie installieren sich die MongoDB \"on-premise\", also lokal auf Ihrem Rechner. Dazu w\u00e4hlen Sie unter mongodb.com den Reiter Products on dort unter Community Edition den Link Community Server . Dann landen Sie auf https://www.mongodb.com/try/download/community . Dort k\u00f6nnen Sie sich die MongoDB herunterladen und installieren. Installationsanleitungen finden Sie unter https://www.mongodb.com/docs/manual/installation/ . Wichtig ist, dass die MongoDB einmalig mit mongod starten.","title":"MongoDB"},{"location":"tools/#mongodb-compass","text":"Um sich Ihre MongoDB-Datenbanken anzuschauen (und auch, um Operationen darauf auszuf\u00fchren), empfehle ich Ihnen das Tool MongoDB Compass . Download und Installation sind normalerweise einfach.","title":"MongoDB Compass"},{"location":"tools/#insomnia-rest","text":"Eine gute Alternative zu Postman ist Insomnia . Sehr empfehlenswert! Aber Postman auch.","title":"Insomnia REST"},{"location":"tools/#interssante-links-zu-pwa","text":"PWA Checklist PWA API 11 Examples of Progressive Web Apps How-to: Progressive Web Apps praktisch erkl\u00e4rt Chrome Developer Summit 2020 12 Best Examples of Progressive Web Apps (PWAs) in 2020 Lighthouse Performance Scoring Service worker Spezifikation","title":"Interssante Links zu PWA"},{"location":"uebungen/","text":"\u00dcbungen \u00b6 \u00dcbung 1 (Grundger\u00fcst) \u00b6 \u00dcbung 1 In der ersten \u00dcbung geht es \"nur\" darum, das Grundger\u00fcst zu verstehen. Arbeiten Sie dazu diesen Abschnitt durch. Sie werden feststellen, dass sich die meisten Anweisungen (insb. im HTML -Code) auf Material Design Lite beziehen. Um zu erkennen, was einen Material Design Lite -Bezug hat (und somit nicht wirklich wichtig ist), \u00e4ndern Sie das Grundger\u00fcst so, dass Sie nicht Material Design Lite , sondern Bootstrap verwenden. Werfen Sie also Material Design Lite komplett raus und ersetzen es vollst\u00e4ndig durch Bootstrap. L\u00f6schen Sie die material.min.js aus dem public/js -Ordner. Starten Sie am besten damit, diese drei Zeilen aus den beiden index.html -Dateien zu l\u00f6schen: < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > F\u00fcgen Sie stattdessen den CSS-Link und das JS-Bundle aus https://getbootstrap.com/docs/5.0/getting-started/introduction/ ein. Sie k\u00f6nnen ja versuchen, dass es m\u00f6glichst \u00e4hnlich aussieht: \u00dcbung 2 (Web App Manifest) \u00b6 \u00dcbung 2 Erweitern Sie Ihre Anwendung (oder das Grundger\u00fcst) um ein Web App Manifest. Verwenden Sie zur Erstellung des Manifestes am besten den Web-App-Manifest-Generator . W\u00e4hlen Sie ein eigenes Icon. Beachten Sie, dass das Original-Icon die Ma\u00dfe 512x512 Pixel aufweisen muss. Der Web-App-Manifest-Generator f\u00fcgt das Original-Icon nicht dem Manifest hinzu. Lighthouse beschwert sich dar\u00fcber, dass dem Manifest ein 512x512-Icon fehlt. F\u00fcgen Sie dieses am besten noch h\u00e4ndisch hinzu. Die Anwendung soll in dem Moment installiert werden, wenn die Nutzerin das erste Mal auf den + -Button klickt. Das hei\u00dft, es wird das beforeinstallprompt -Ereignis ausgel\u00f6st und die Behandlung dieses Ereignisses sorgt daf\u00fcr, dass Sie die Anwendung genau dann installieren, wenn Sie das erste Mal den + -Button klicken: Hinweise und Hilfestellungen finden Sie z.B. hier oder im Skript (enth\u00e4lt weitere Links) oder im Video zum Manifest . \u00dcbung 3 (Promises und Fetch API) \u00b6 \u00dcbung 3 Laden Sie hier die Anwendung f\u00fcr \u00dcbung 3 herunter . Es handelt sich um eine zip-Datei. Entpacken Sie diese, \u00f6ffnen Sie sie in Ihrer IDE und folgen Sie der README.MD. In der \u00dcbung \u00fcben wir Promises und die Fetch API. \u00d6ffnen Sie die Datei public/src/js/app.js . Die \u00dcbung besteht aus 3 Teilen: Teil 1 : f\u00fchren Sie ein fetch() als GET nach https://httpbin.org/ip aus und geben Sie die zur\u00fcckgegebene IP in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 2 : f\u00fchren Sie ein fetch() als PUT nach https://httpbin.org/put aus. Das \u00fcbergebene JSON wird von dort einfach zur\u00fcckgespiegelt. Geben Sie einen oder mehrere Werte aus diesem JSON in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 3 : bauen Sie einen Fehler in die Anfrage (z.B. falsche Url) und behandeln Sie diesen Fehler mit einer Ausgabe auf die Konsole. Hinweise und Hilfestellungen finden Sie im Skript unter Promises und die Fetch-API . \u00dcbung 4 (Entwicklungs-Infrastruktur einrichten) \u00b6 \u00dcbung 4 Wir richten unsere Entwicklungs-Infrastruktur, die wir ben\u00f6tigen, um eine Frontend-Backend-Datenbank-App zu erstellen. Lokalen Webserver einrichten: Es sollte etwas Sinnvolles erscheinen, wenn Sie http://localhost/ in den Browser eingeben (also entweder wird eine eigene html- oder php-Datei ge\u00f6ffnet, oder es steht soetwas wie It works ). Wenn das nicht der Fall ist, dann ben\u00f6tigen Sie erst noch einen Webserver. Auf dem Mac und unter Linux existiert aber immer bereits einer, nur unter Windows muss dann z.B. XAMPP installiert werden. Sie m\u00fcssen wissen, aus welchem Ordner die Ressourcen geladen werden, wenn Sie http://localhost/ in den Browser eingeben. Diesen Ordner nennen wir DocumentRoot . Der Standard-DocumentRoot-Ordner auf dem Mac ist /Library/WebServer/Documents , unter Linux /www/html/ , unter Windows (XAMPP) /xampp/htdocs . Vor den angegebenen Pfaden kann in Linux und Windows noch etwas stehen, das h\u00e4ngt von der Konfiguration ab und wo Sie Ihr XAMPP unter Windows installiert haben. Wichtig ist, dass Sie gen\u00fcgend Schreibrechte auf den DocumentRoot-Ordner haben! Das ist typischerweise beim Mac unter /Library/WebServer/Documents nicht der Fall. Passen Sie auch auf, dass unter Windows Ihr xampp -Ordner nicht bereits zu tief in der Ordnerstruktur steckt. Gehen Sie entsprechende Anleitungen durch, um Ihr DocumentRoot zu \u00e4ndern. Mein DocumentRoot ist z.B. unter /Users/jornfreiheit/Sites . Hier einige Anleitungen: Windows , Windows , Windows , Mac . Erstellen Sie zum Testen in Ihrem DocumentRoot-Ordner eine index.html -Datei mit folgendem Inhalt: <html><body><h1>DocumentRoot korrekt eingerichtet!</h1></body></html> und rufen Sie dann im Browser http://localhost/ auf. Es sollte im Browser DocumentRoot korrekt eingerichtet! erscheinen. F\u00fcr phpMyAdmin ben\u00f6tigen Sie auch noch php . Erstellen Sie in Ihrem DocumentRoot-Ordner eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen Sie dann im Browser http://localhost/index.php auf. Es sollte etwas in dieser Art erscheinen: Wenn localhost funktioniert, dann gibt es mit PHP eigentlich nur (neuerdings - erst seit Big Sur) unter dem Mac Probleme. Nutzen Sie dann eine der folgenden Anleitungen: 1 , 2 , 3 . Datenbank einrichten: Sie m\u00fcssen nicht unbedingt ein lokales Datenbanksystem installieren, sondern k\u00f6nnen auch den Studi-Server https://studi.f4.htw-berlin.de verwenden. Wenn Sie sich lokal ein Datenbanksystem installieren, was man ruhig einmal gemacht haben sollte, dann ist es egal, ob Sie MariaDB (kommt mit XAMPP) oder MySQL installieren. Beide Systeme sind in der Anwendung v\u00f6llig gleich. Sie k\u00f6nnen auch Postgres verwenden, das habe ich aber nicht lokal und es kann sein, dass meine Anleitungen dann angepasst werden m\u00fcssten (vielleicht aber auch nicht). MariaDB wird mit XAMPP ausgeliefert - betrifft also haupts\u00e4chlich die Windows-Nutzerinnen XAMPP . F\u00fcr Mac ist die Installation von XAMPP nicht notwendig (und auch nicht empfehlenswert, da Sie ansonsten nur mehrere Webserver haben). F\u00fcr die Installation von MySQL unter Mac gibt es viele Videos, sollte aber auch so von hier aus gut funktionieren (eine weitere Anleitung z.B. hier ). phpmyadmin ist eine Weboberfl\u00e4che f\u00fcr die Verwaltung einer MySQl -Datenbank. Es ist sehr zu empfehlen, dass Sie sich phpmyadmin installieren, wenn Sie sich MySQL installiert haben. Installationanleitungen gibt es viele, z.B. f\u00fcr Mac , Linux und Windows . Im Prinzip m\u00fcssen Sie aber das phpmyadmin -Paket nur entpacken und in Ihren DocumentRoot-Ordner bewegen, dann k\u00f6nnen Sie phpmyadmin \u00fcber http://localhost/phpmyadmin aufrufen. Postman installieren: Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen HTTP-Anfragen m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js installieren: Node.js ist eine JavaScript-Laufzeitumgebung f\u00fcr einen Server. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Laden Sie sich hier Node.js herunter und installieren es. Paketmanager npm : Mit der Installation von node.js , installieren Sie auch den Paketmanager npm (siehe npmjs ). Sie k\u00f6nnen testen, ob die Installation von node und npm erfolgreich war, indem Sie im Terminal (Windows-Nutzerinnen bitte als Terminal die GitBash verwenden) eingeben: node --version Sollte etwas, wie v14.15.0 ausgeben und npm --version sollte etwas, wie 7.13.0 ausgeben. Angular-Command-Line-Interface (CLI) installieren: Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only ) Ich hoffe, es klappt alles! Eventuelle Probleme k\u00f6nnen wir in der Vorlesung am 26.5. und/oder in der \u00dcbung am 27.5. besprechen. \u00dcbung 5 (Backend) \u00b6 \u00dcbung 5 Erg\u00e4nzen Sie das in [Backend] erstellte Backend um einen REST-Endpunkt GET http://localhost:3000/posts/title Bei Aufruf dieses Endpunktes soll dem Request-Body ein JSON in der Form { \"title\" : \"first post\" } mitgesendet werden. Der Wert von title in diesem JSON wird verwendet, um den Datensatz/die Datens\u00e4tze auszulesen, die den title haben (also hier der Datensatz mit dem title \"first post\" ). \u00dcbung 6 (Frontend) \u00b6 \u00dcbung 6 Im Abschnitt Frontend haben wir uns ein Frontend erstellt, um mithilfe eines Formulars Daten (insb. ein Bild) einzugeben und diese in einer Datenbank abzuspeichern. Erweiteren Sie dieses Frontend um eine Komponente, die alle in der Datenbank gespeicherten Daten visualisiert, insb. die in der Datenbank gespeicherten Bilder. Erstellen Sie sich dazu eine neue Komponente. Sie m\u00fcssen dazu auch den PostService um die Anbindung an den Endpunkt GET /posts erweitern. Tipps : Es kann sein, dass Sie das vom Backend zur\u00fcckgegebene JSON ver\u00e4ndern m\u00fcssen. Derzeit wird f\u00fcr image ein ArrayBuffer zur\u00fcckgegeben, mit \"type\": \"Buffer\" und einem Array f\u00fcr \"data\" . Wenn Sie dieses Array Frontend-seitig verarbeiten k\u00f6nnen und als ein Bild angezeigt bekommen, dann w\u00fcrde mich sehr interessieren, wie Sie das gemacht haben. Ich habe das Backend angepasst und gebe den Base64 -Code f\u00fcr image zur\u00fcck. Im Frontend muss man diesen base64 -Code dann nur noch hinter den String 'data:image/jpg;base64,' h\u00e4ngen und erh\u00e4lt so den Wert f\u00fcr das src -Attribut eines Images. Schauen Sie sich dazu auch den Typ SafeResourceUrl und die Funktion bypassSecurityTrustResourceUrl(src) von DomSanitizer an. \u00dcbung 7 (IndexedDB) \u00b6 \u00dcbung 7 Im Abschnitt IndexedDB haben wir uns mit der Verwendung der In-Browser-datenbank IndexedDB vertraut gemacht. In dem dortigen letzten Abschnitt L\u00f6schen einzelner EIntr\u00e4ge haben wir in der db.js eine Funktion deleteOneData(st, id) geschrieben, die einen einzelnen Datensatz aus der IndexedDB mit der \u00fcbergebenen id l\u00f6scht. Implementieren Sie in der db.js eine Funktion deleteByTitle(st, title) , die den Datensatz (oder die Datens\u00e4tze) l\u00f6scht, der (oder die) in dem title -Attribut den der Methode als title \u00fcbergebenen String enth\u00e4lt. Z.B. soll aus dem Datensatz { id: 1 , title: \"first post\" , location: \"Berlin\" , image: \"/9j/4AA...UgP/9k=\" } { id: 2 , title: \"second post\" , location: \"Wilhelminenhof\" , image: \"/9j/4AA...VY/9k=\" } { id: 5 , title: \"fourth post\" , location: \"Gebaeude C\" , image: \"/9j/4AA...KOX/9k=\" } { id: 10 , title: \"HTW aus der Luft\" , location: \"Campus WH von oben\" , image: \"/9j/4AA...9z//2Q==\" } { id: 11 , title: \"Wilhelminenhofstra\u00dfe\" , location: \"Campus WH Eingang\" , image: \"/9j/4AA...U9D/9k=\" } bei Aufruf von deleteByTitle('posts', 'second') der zweite Datensatz mit der id: 2 gel\u00f6scht werden, bei Aufruf von deleteByTitle('posts', 'post') sollen die ersten drei Datens\u00e4tze (mit id:1 , id:2 und id:5 ) gel\u00f6scht werden. Tipps : Mit der Methode getAllKeys() ermitteln Sie z.B. alle Schl\u00fcssel ( id ) der Datens\u00e4tze und mit der Methode get(key) erhalten Sie den zum Schl\u00fcssel zugeh\u00f6rigen Wert.","title":"\u00dcbungen"},{"location":"uebungen/#ubungen","text":"","title":"\u00dcbungen"},{"location":"uebungen/#ubung-1-grundgerust","text":"\u00dcbung 1 In der ersten \u00dcbung geht es \"nur\" darum, das Grundger\u00fcst zu verstehen. Arbeiten Sie dazu diesen Abschnitt durch. Sie werden feststellen, dass sich die meisten Anweisungen (insb. im HTML -Code) auf Material Design Lite beziehen. Um zu erkennen, was einen Material Design Lite -Bezug hat (und somit nicht wirklich wichtig ist), \u00e4ndern Sie das Grundger\u00fcst so, dass Sie nicht Material Design Lite , sondern Bootstrap verwenden. Werfen Sie also Material Design Lite komplett raus und ersetzen es vollst\u00e4ndig durch Bootstrap. L\u00f6schen Sie die material.min.js aus dem public/js -Ordner. Starten Sie am besten damit, diese drei Zeilen aus den beiden index.html -Dateien zu l\u00f6schen: < link href = \"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel = \"stylesheet\" > < link rel = \"stylesheet\" href = \"https://fonts.googleapis.com/icon?family=Material+Icons\" > < link rel = \"stylesheet\" href = \"https://code.getmdl.io/1.3.0/material.blue_grey-red.min.css\" > F\u00fcgen Sie stattdessen den CSS-Link und das JS-Bundle aus https://getbootstrap.com/docs/5.0/getting-started/introduction/ ein. Sie k\u00f6nnen ja versuchen, dass es m\u00f6glichst \u00e4hnlich aussieht:","title":"\u00dcbung 1 (Grundger\u00fcst)"},{"location":"uebungen/#ubung-2-web-app-manifest","text":"\u00dcbung 2 Erweitern Sie Ihre Anwendung (oder das Grundger\u00fcst) um ein Web App Manifest. Verwenden Sie zur Erstellung des Manifestes am besten den Web-App-Manifest-Generator . W\u00e4hlen Sie ein eigenes Icon. Beachten Sie, dass das Original-Icon die Ma\u00dfe 512x512 Pixel aufweisen muss. Der Web-App-Manifest-Generator f\u00fcgt das Original-Icon nicht dem Manifest hinzu. Lighthouse beschwert sich dar\u00fcber, dass dem Manifest ein 512x512-Icon fehlt. F\u00fcgen Sie dieses am besten noch h\u00e4ndisch hinzu. Die Anwendung soll in dem Moment installiert werden, wenn die Nutzerin das erste Mal auf den + -Button klickt. Das hei\u00dft, es wird das beforeinstallprompt -Ereignis ausgel\u00f6st und die Behandlung dieses Ereignisses sorgt daf\u00fcr, dass Sie die Anwendung genau dann installieren, wenn Sie das erste Mal den + -Button klicken: Hinweise und Hilfestellungen finden Sie z.B. hier oder im Skript (enth\u00e4lt weitere Links) oder im Video zum Manifest .","title":"\u00dcbung 2 (Web App Manifest)"},{"location":"uebungen/#ubung-3-promises-und-fetch-api","text":"\u00dcbung 3 Laden Sie hier die Anwendung f\u00fcr \u00dcbung 3 herunter . Es handelt sich um eine zip-Datei. Entpacken Sie diese, \u00f6ffnen Sie sie in Ihrer IDE und folgen Sie der README.MD. In der \u00dcbung \u00fcben wir Promises und die Fetch API. \u00d6ffnen Sie die Datei public/src/js/app.js . Die \u00dcbung besteht aus 3 Teilen: Teil 1 : f\u00fchren Sie ein fetch() als GET nach https://httpbin.org/ip aus und geben Sie die zur\u00fcckgegebene IP in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 2 : f\u00fchren Sie ein fetch() als PUT nach https://httpbin.org/put aus. Das \u00fcbergebene JSON wird von dort einfach zur\u00fcckgespiegelt. Geben Sie einen oder mehrere Werte aus diesem JSON in das output -Element ( <p id=\"output\"></p> ) in der public/index.html aus. Teil 3 : bauen Sie einen Fehler in die Anfrage (z.B. falsche Url) und behandeln Sie diesen Fehler mit einer Ausgabe auf die Konsole. Hinweise und Hilfestellungen finden Sie im Skript unter Promises und die Fetch-API .","title":"\u00dcbung 3 (Promises und Fetch API)"},{"location":"uebungen/#ubung-4-entwicklungs-infrastruktur-einrichten","text":"\u00dcbung 4 Wir richten unsere Entwicklungs-Infrastruktur, die wir ben\u00f6tigen, um eine Frontend-Backend-Datenbank-App zu erstellen. Lokalen Webserver einrichten: Es sollte etwas Sinnvolles erscheinen, wenn Sie http://localhost/ in den Browser eingeben (also entweder wird eine eigene html- oder php-Datei ge\u00f6ffnet, oder es steht soetwas wie It works ). Wenn das nicht der Fall ist, dann ben\u00f6tigen Sie erst noch einen Webserver. Auf dem Mac und unter Linux existiert aber immer bereits einer, nur unter Windows muss dann z.B. XAMPP installiert werden. Sie m\u00fcssen wissen, aus welchem Ordner die Ressourcen geladen werden, wenn Sie http://localhost/ in den Browser eingeben. Diesen Ordner nennen wir DocumentRoot . Der Standard-DocumentRoot-Ordner auf dem Mac ist /Library/WebServer/Documents , unter Linux /www/html/ , unter Windows (XAMPP) /xampp/htdocs . Vor den angegebenen Pfaden kann in Linux und Windows noch etwas stehen, das h\u00e4ngt von der Konfiguration ab und wo Sie Ihr XAMPP unter Windows installiert haben. Wichtig ist, dass Sie gen\u00fcgend Schreibrechte auf den DocumentRoot-Ordner haben! Das ist typischerweise beim Mac unter /Library/WebServer/Documents nicht der Fall. Passen Sie auch auf, dass unter Windows Ihr xampp -Ordner nicht bereits zu tief in der Ordnerstruktur steckt. Gehen Sie entsprechende Anleitungen durch, um Ihr DocumentRoot zu \u00e4ndern. Mein DocumentRoot ist z.B. unter /Users/jornfreiheit/Sites . Hier einige Anleitungen: Windows , Windows , Windows , Mac . Erstellen Sie zum Testen in Ihrem DocumentRoot-Ordner eine index.html -Datei mit folgendem Inhalt: <html><body><h1>DocumentRoot korrekt eingerichtet!</h1></body></html> und rufen Sie dann im Browser http://localhost/ auf. Es sollte im Browser DocumentRoot korrekt eingerichtet! erscheinen. F\u00fcr phpMyAdmin ben\u00f6tigen Sie auch noch php . Erstellen Sie in Ihrem DocumentRoot-Ordner eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen Sie dann im Browser http://localhost/index.php auf. Es sollte etwas in dieser Art erscheinen: Wenn localhost funktioniert, dann gibt es mit PHP eigentlich nur (neuerdings - erst seit Big Sur) unter dem Mac Probleme. Nutzen Sie dann eine der folgenden Anleitungen: 1 , 2 , 3 . Datenbank einrichten: Sie m\u00fcssen nicht unbedingt ein lokales Datenbanksystem installieren, sondern k\u00f6nnen auch den Studi-Server https://studi.f4.htw-berlin.de verwenden. Wenn Sie sich lokal ein Datenbanksystem installieren, was man ruhig einmal gemacht haben sollte, dann ist es egal, ob Sie MariaDB (kommt mit XAMPP) oder MySQL installieren. Beide Systeme sind in der Anwendung v\u00f6llig gleich. Sie k\u00f6nnen auch Postgres verwenden, das habe ich aber nicht lokal und es kann sein, dass meine Anleitungen dann angepasst werden m\u00fcssten (vielleicht aber auch nicht). MariaDB wird mit XAMPP ausgeliefert - betrifft also haupts\u00e4chlich die Windows-Nutzerinnen XAMPP . F\u00fcr Mac ist die Installation von XAMPP nicht notwendig (und auch nicht empfehlenswert, da Sie ansonsten nur mehrere Webserver haben). F\u00fcr die Installation von MySQL unter Mac gibt es viele Videos, sollte aber auch so von hier aus gut funktionieren (eine weitere Anleitung z.B. hier ). phpmyadmin ist eine Weboberfl\u00e4che f\u00fcr die Verwaltung einer MySQl -Datenbank. Es ist sehr zu empfehlen, dass Sie sich phpmyadmin installieren, wenn Sie sich MySQL installiert haben. Installationanleitungen gibt es viele, z.B. f\u00fcr Mac , Linux und Windows . Im Prinzip m\u00fcssen Sie aber das phpmyadmin -Paket nur entpacken und in Ihren DocumentRoot-Ordner bewegen, dann k\u00f6nnen Sie phpmyadmin \u00fcber http://localhost/phpmyadmin aufrufen. Postman installieren: Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen HTTP-Anfragen m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js installieren: Node.js ist eine JavaScript-Laufzeitumgebung f\u00fcr einen Server. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Laden Sie sich hier Node.js herunter und installieren es. Paketmanager npm : Mit der Installation von node.js , installieren Sie auch den Paketmanager npm (siehe npmjs ). Sie k\u00f6nnen testen, ob die Installation von node und npm erfolgreich war, indem Sie im Terminal (Windows-Nutzerinnen bitte als Terminal die GitBash verwenden) eingeben: node --version Sollte etwas, wie v14.15.0 ausgeben und npm --version sollte etwas, wie 7.13.0 ausgeben. Angular-Command-Line-Interface (CLI) installieren: Angular ist ein modernes JavaScript-Framework zur Entwicklung moderner Weboberfl\u00e4chen. Es geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . Um einfacher mit Angular zu entwickeln zu k\u00f6nnen, ben\u00f6tigen wir das Angular-Command-Line-Interface (CLI) . Dieses installieren wir mithilfe des Paketmanagers npm . Geben Sie dazu ins Terminal npm install -g @angular/cli ein. Sie k\u00f6nnen pr\u00fcfen, ob die Installation erfolgreich war, indem Sie in das Terminal ng --version eingeben. Es sollte etwas in der Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 11 .0.1 Node: 14 .15.0 OS: darwin x64 Angular: ... Ivy Workspace: Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1100.1 ( cli-only ) @angular-devkit/core 11 .0.1 ( cli-only ) @angular-devkit/schematics 11 .0.1 ( cli-only ) @schematics/angular 11 .0.1 ( cli-only ) @schematics/update 0 .1100.1 ( cli-only ) Ich hoffe, es klappt alles! Eventuelle Probleme k\u00f6nnen wir in der Vorlesung am 26.5. und/oder in der \u00dcbung am 27.5. besprechen.","title":"\u00dcbung 4 (Entwicklungs-Infrastruktur einrichten)"},{"location":"uebungen/#ubung-5-backend","text":"\u00dcbung 5 Erg\u00e4nzen Sie das in [Backend] erstellte Backend um einen REST-Endpunkt GET http://localhost:3000/posts/title Bei Aufruf dieses Endpunktes soll dem Request-Body ein JSON in der Form { \"title\" : \"first post\" } mitgesendet werden. Der Wert von title in diesem JSON wird verwendet, um den Datensatz/die Datens\u00e4tze auszulesen, die den title haben (also hier der Datensatz mit dem title \"first post\" ).","title":"\u00dcbung 5 (Backend)"},{"location":"uebungen/#ubung-6-frontend","text":"\u00dcbung 6 Im Abschnitt Frontend haben wir uns ein Frontend erstellt, um mithilfe eines Formulars Daten (insb. ein Bild) einzugeben und diese in einer Datenbank abzuspeichern. Erweiteren Sie dieses Frontend um eine Komponente, die alle in der Datenbank gespeicherten Daten visualisiert, insb. die in der Datenbank gespeicherten Bilder. Erstellen Sie sich dazu eine neue Komponente. Sie m\u00fcssen dazu auch den PostService um die Anbindung an den Endpunkt GET /posts erweitern. Tipps : Es kann sein, dass Sie das vom Backend zur\u00fcckgegebene JSON ver\u00e4ndern m\u00fcssen. Derzeit wird f\u00fcr image ein ArrayBuffer zur\u00fcckgegeben, mit \"type\": \"Buffer\" und einem Array f\u00fcr \"data\" . Wenn Sie dieses Array Frontend-seitig verarbeiten k\u00f6nnen und als ein Bild angezeigt bekommen, dann w\u00fcrde mich sehr interessieren, wie Sie das gemacht haben. Ich habe das Backend angepasst und gebe den Base64 -Code f\u00fcr image zur\u00fcck. Im Frontend muss man diesen base64 -Code dann nur noch hinter den String 'data:image/jpg;base64,' h\u00e4ngen und erh\u00e4lt so den Wert f\u00fcr das src -Attribut eines Images. Schauen Sie sich dazu auch den Typ SafeResourceUrl und die Funktion bypassSecurityTrustResourceUrl(src) von DomSanitizer an.","title":"\u00dcbung 6 (Frontend)"},{"location":"uebungen/#ubung-7-indexeddb","text":"\u00dcbung 7 Im Abschnitt IndexedDB haben wir uns mit der Verwendung der In-Browser-datenbank IndexedDB vertraut gemacht. In dem dortigen letzten Abschnitt L\u00f6schen einzelner EIntr\u00e4ge haben wir in der db.js eine Funktion deleteOneData(st, id) geschrieben, die einen einzelnen Datensatz aus der IndexedDB mit der \u00fcbergebenen id l\u00f6scht. Implementieren Sie in der db.js eine Funktion deleteByTitle(st, title) , die den Datensatz (oder die Datens\u00e4tze) l\u00f6scht, der (oder die) in dem title -Attribut den der Methode als title \u00fcbergebenen String enth\u00e4lt. Z.B. soll aus dem Datensatz { id: 1 , title: \"first post\" , location: \"Berlin\" , image: \"/9j/4AA...UgP/9k=\" } { id: 2 , title: \"second post\" , location: \"Wilhelminenhof\" , image: \"/9j/4AA...VY/9k=\" } { id: 5 , title: \"fourth post\" , location: \"Gebaeude C\" , image: \"/9j/4AA...KOX/9k=\" } { id: 10 , title: \"HTW aus der Luft\" , location: \"Campus WH von oben\" , image: \"/9j/4AA...9z//2Q==\" } { id: 11 , title: \"Wilhelminenhofstra\u00dfe\" , location: \"Campus WH Eingang\" , image: \"/9j/4AA...U9D/9k=\" } bei Aufruf von deleteByTitle('posts', 'second') der zweite Datensatz mit der id: 2 gel\u00f6scht werden, bei Aufruf von deleteByTitle('posts', 'post') sollen die ersten drei Datens\u00e4tze (mit id:1 , id:2 und id:5 ) gel\u00f6scht werden. Tipps : Mit der Methode getAllKeys() ermitteln Sie z.B. alle Schl\u00fcssel ( id ) der Datens\u00e4tze und mit der Methode get(key) erhalten Sie den zum Schl\u00fcssel zugeh\u00f6rigen Wert.","title":"\u00dcbung 7 (IndexedDB)"}]}